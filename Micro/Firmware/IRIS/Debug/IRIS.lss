
IRIS.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d9a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004e00  80004e00  00005200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001f3  80005000  80005000  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000005  800051f3  800051f3  000055f3  2**0
                  ALLOC
  6 .data         000000fc  00000004  800051f8  00005804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002ce8  00000100  80005300  00005900  2**5
                  ALLOC
  8 .comment      00000030  00000000  00000000  00005900  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c08  00000000  00000000  00005930  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 0000212e  00000000  00000000  00006538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001f478  00000000  00000000  00008666  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b04  00000000  00000000  00027ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b97f  00000000  00000000  0002a5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c94  00000000  00000000  00035f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007ebb  00000000  00000000  00037bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000041b1  00000000  00000000  0003fab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 0161a397  00000000  00000000  00043c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 19 .debug_ranges 00000c10  00000000  00000000  0165e000  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf e4 e8 	sub	pc,pc,-6936

Disassembly of section .text:

80002004 <adcifa_get_calibration_data>:
80002004:	e0 68 02 04 	mov	r8,516
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80002008:	ea 18 80 80 	orh	r8,0x8080
8000200c:	70 0c       	ld.w	r12,r8[0x0]
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000200e:	70 0a       	ld.w	r10,r8[0x0]
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80002010:	e0 68 02 08 	mov	r8,520
80002014:	ea 18 80 80 	orh	r8,0x8080
80002018:	70 09       	ld.w	r9,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000201a:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
8000201c:	f9 dc c3 06 	bfextu	r12,r12,0x18,0x6
80002020:	b6 6c       	st.h	r11[0xc],r12

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
80002022:	f5 da c0 0f 	bfextu	r10,r10,0x0,0xf
80002026:	b6 5a       	st.h	r11[0xa],r10

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80002028:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
8000202c:	b6 79       	st.h	r11[0xe],r9

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
8000202e:	f1 d8 c2 0a 	bfextu	r8,r8,0x10,0xa
80002032:	f7 58 00 10 	st.h	r11[16],r8
}
80002036:	5e fc       	retal	r12

80002038 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80002038:	d4 21       	pushm	r4-r7,lr
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
8000203a:	76 09       	ld.w	r9,r11[0x0]
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
8000203c:	17 e8       	ld.ub	r8,r11[0x6]
8000203e:	f7 37 00 08 	ld.ub	r7,r11[8]
80002042:	a3 67       	lsl	r7,0x2
80002044:	ef e8 10 37 	or	r7,r7,r8<<0x3
80002048:	17 f8       	ld.ub	r8,r11[0x7]
8000204a:	ef e8 10 47 	or	r7,r7,r8<<0x4
8000204e:	17 c8       	ld.ub	r8,r11[0x4]
80002050:	ef e8 10 57 	or	r7,r7,r8<<0x5
80002054:	17 de       	ld.ub	lr,r11[0x5]
80002056:	ef ee 10 77 	or	r7,r7,lr<<0x7
8000205a:	f7 3e 00 09 	ld.ub	lr,r11[9]
8000205e:	ef ee 10 a7 	or	r7,r7,lr<<0xa
80002062:	e0 68 4d d3 	mov	r8,19923
80002066:	ea 18 10 62 	orh	r8,0x1062
8000206a:	f2 08 06 44 	mulu.d	r4,r9,r8
8000206e:	a7 85       	lsr	r5,0x6
80002070:	e0 6e 03 e8 	mov	lr,1000
80002074:	bd 35       	mul	r5,lr
80002076:	ea 08 06 44 	mulu.d	r4,r5,r8
8000207a:	ea 0e 16 0b 	lsr	lr,r5,0xb
8000207e:	ef ee 11 0e 	or	lr,r7,lr<<0x10
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
80002082:	fc 78 24 00 	mov	r8,-187392
80002086:	91 1e       	st.w	r8[0x4],lr
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
80002088:	a1 79       	lsl	r9,0x1
8000208a:	f4 09 0d 06 	divu	r6,r10,r9
8000208e:	0c 99       	mov	r9,r6
80002090:	20 19       	sub	r9,1
80002092:	f3 d9 c0 09 	bfextu	r9,r9,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
80002096:	f9 49 00 44 	st.w	r12[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
8000209a:	71 a9       	ld.w	r9,r8[0x68]
8000209c:	96 6a       	ld.sh	r10,r11[0xc]
8000209e:	b9 6a       	lsl	r10,0x18
800020a0:	e6 1a 3f 00 	andh	r10,0x3f00,COH
800020a4:	e4 19 c0 ff 	andh	r9,0xc0ff
800020a8:	f5 e9 10 09 	or	r9,r10,r9
800020ac:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800020b0:	71 a9       	ld.w	r9,r8[0x68]
800020b2:	96 5a       	ld.sh	r10,r11[0xa]
800020b4:	f5 da c0 0f 	bfextu	r10,r10,0x0,0xf
800020b8:	e0 19 80 00 	andl	r9,0x8000
800020bc:	f5 e9 10 09 	or	r9,r10,r9
800020c0:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
800020c4:	71 b9       	ld.w	r9,r8[0x6c]
800020c6:	96 7a       	ld.sh	r10,r11[0xe]
800020c8:	f5 da c0 0a 	bfextu	r10,r10,0x0,0xa
800020cc:	e0 19 fc 00 	andl	r9,0xfc00
800020d0:	f5 e9 10 09 	or	r9,r10,r9
800020d4:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
800020d8:	71 b9       	ld.w	r9,r8[0x6c]
800020da:	f7 0a 00 10 	ld.sh	r10,r11[16]
800020de:	b1 6a       	lsl	r10,0x10
800020e0:	e6 1a 03 ff 	andh	r10,0x3ff,COH
800020e4:	e4 19 fc 00 	andh	r9,0xfc00
800020e8:	f5 e9 10 09 	or	r9,r10,r9
800020ec:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
800020f0:	70 19       	ld.w	r9,r8[0x4]
800020f2:	a1 a9       	sbr	r9,0x0
800020f4:	91 19       	st.w	r8[0x4],r9

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
800020f6:	10 99       	mov	r9,r8
800020f8:	72 28       	ld.w	r8,r9[0x8]
800020fa:	e2 18 40 00 	andl	r8,0x4000,COH
800020fe:	cf d0       	breq	800020f8 <adcifa_configure+0xc0>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
}
80002100:	da 2a       	popm	r4-r7,pc,r12=1
80002102:	d7 03       	nop

80002104 <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
80002104:	eb cd 00 c0 	pushm	r6-r7
80002108:	20 cd       	sub	sp,48
	uint8_t g[16] = {0};
8000210a:	30 06       	mov	r6,0
8000210c:	30 07       	mov	r7,0
8000210e:	fa e7 00 20 	st.d	sp[32],r6
80002112:	fa e7 00 28 	st.d	sp[40],r6
	uint8_t mp[16] = {0};
80002116:	fa e7 00 10 	st.d	sp[16],r6
8000211a:	fa e7 00 18 	st.d	sp[24],r6
	uint8_t mn[16] = {0};
8000211e:	fa e7 00 00 	st.d	sp[0],r6
80002122:	fa e7 00 08 	st.d	sp[8],r6

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
80002126:	58 0b       	cp.w	r11,0
80002128:	c0 70       	breq	80002136 <adcifa_configure_sequencer+0x32>
8000212a:	30 18       	mov	r8,1
8000212c:	f0 0b 18 00 	cp.b	r11,r8
80002130:	e0 81 01 97 	brne	8000245e <adcifa_configure_sequencer+0x35a>
80002134:	cf f8       	rjmp	80002332 <adcifa_configure_sequencer+0x22e>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
80002136:	15 8c       	ld.ub	r12,r10[0x0]
80002138:	15 9b       	ld.ub	r11,r10[0x1]
8000213a:	15 a8       	ld.ub	r8,r10[0x2]
8000213c:	a9 68       	lsl	r8,0x8
8000213e:	f1 eb 10 c8 	or	r8,r8,r11<<0xc
80002142:	15 eb       	ld.ub	r11,r10[0x6]
80002144:	16 48       	or	r8,r11
80002146:	15 bb       	ld.ub	r11,r10[0x3]
80002148:	f1 eb 10 28 	or	r8,r8,r11<<0x2
8000214c:	15 cb       	ld.ub	r11,r10[0x4]
8000214e:	f1 eb 10 38 	or	r8,r8,r11<<0x3
80002152:	15 da       	ld.ub	r10,r10[0x5]
80002154:	f1 ea 10 1a 	or	r10,r8,r10<<0x1
80002158:	f8 c8 00 01 	sub	r8,r12,1
8000215c:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
80002160:	fc 78 24 00 	mov	r8,-187392
80002164:	91 5a       	st.w	r8[0x14],r10
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80002166:	58 0c       	cp.w	r12,0
80002168:	c1 00       	breq	80002188 <adcifa_configure_sequencer+0x84>
8000216a:	12 9a       	mov	r10,r9
8000216c:	fa c8 ff e0 	sub	r8,sp,-32
 * \param p_adcifa_sequencer_opt  Structure for the sequencer configuration
 * \param p_adcifa_sequencer_conversion_opt  Pointer on a buffer for each
 *                                           conversion on a sequencer
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
80002170:	f8 c7 00 01 	sub	r7,r12,1
80002174:	5c 57       	castu.b	r7
80002176:	fa cb ff df 	sub	r11,sp,-33
8000217a:	f6 07 00 07 	add	r7,r11,r7
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000217e:	15 ab       	ld.ub	r11,r10[0x2]
80002180:	10 cb       	st.b	r8++,r11
80002182:	2f da       	sub	r10,-3
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80002184:	0e 38       	cp.w	r8,r7
80002186:	cf c1       	brne	8000217e <adcifa_configure_sequencer+0x7a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
80002188:	fb 38 00 27 	ld.ub	r8,sp[39]
8000218c:	fb 3a 00 26 	ld.ub	r10,sp[38]
80002190:	b9 6a       	lsl	r10,0x18
80002192:	f5 e8 11 ca 	or	r10,r10,r8<<0x1c
80002196:	fb 38 00 20 	ld.ub	r8,sp[32]
8000219a:	10 4a       	or	r10,r8
8000219c:	fb 38 00 25 	ld.ub	r8,sp[37]
800021a0:	f5 e8 11 4a 	or	r10,r10,r8<<0x14
800021a4:	fb 38 00 24 	ld.ub	r8,sp[36]
800021a8:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
800021ac:	fb 38 00 23 	ld.ub	r8,sp[35]
800021b0:	f5 e8 10 ca 	or	r10,r10,r8<<0xc
800021b4:	fb 38 00 22 	ld.ub	r8,sp[34]
800021b8:	f5 e8 10 8a 	or	r10,r10,r8<<0x8
800021bc:	fb 38 00 21 	ld.ub	r8,sp[33]
800021c0:	f5 e8 10 4a 	or	r10,r10,r8<<0x4
800021c4:	fc 78 24 00 	mov	r8,-187392
800021c8:	91 7a       	st.w	r8[0x1c],r10
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800021ca:	58 0c       	cp.w	r12,0
800021cc:	c1 10       	breq	800021ee <adcifa_configure_sequencer+0xea>
800021ce:	30 08       	mov	r8,0
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800021d0:	fa c7 ff f0 	sub	r7,sp,-16
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800021d4:	1a 9b       	mov	r11,sp
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800021d6:	13 8a       	ld.ub	r10,r9[0x0]
800021d8:	ee 08 0b 0a 	st.b	r7[r8],r10
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800021dc:	13 9a       	ld.ub	r10,r9[0x1]
800021de:	f6 08 0b 0a 	st.b	r11[r8],r10
800021e2:	2f f8       	sub	r8,-1
800021e4:	2f d9       	sub	r9,-3
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800021e6:	f0 0c 18 00 	cp.b	r12,r8
800021ea:	fe 9b ff f6 	brhi	800021d6 <adcifa_configure_sequencer+0xd2>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
800021ee:	fb 38 00 17 	ld.ub	r8,sp[23]
800021f2:	fb 39 00 16 	ld.ub	r9,sp[22]
800021f6:	b1 69       	lsl	r9,0x10
800021f8:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800021fc:	fb 38 00 14 	ld.ub	r8,sp[20]
80002200:	10 49       	or	r9,r8
80002202:	fb 38 00 15 	ld.ub	r8,sp[21]
80002206:	f3 e8 10 89 	or	r9,r9,r8<<0x8
8000220a:	fc 78 24 00 	mov	r8,-187392
8000220e:	91 b9       	st.w	r8[0x2c],r9
80002210:	fb 3a 00 13 	ld.ub	r10,sp[19]
80002214:	fb 39 00 12 	ld.ub	r9,sp[18]
80002218:	b1 69       	lsl	r9,0x10
8000221a:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000221e:	fb 3a 00 10 	ld.ub	r10,sp[16]
80002222:	14 49       	or	r9,r10
80002224:	fb 3a 00 11 	ld.ub	r10,sp[17]
80002228:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000222c:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000222e:	1b fa       	ld.ub	r10,sp[0x7]
80002230:	1b e9       	ld.ub	r9,sp[0x6]
80002232:	b1 69       	lsl	r9,0x10
80002234:	f3 ea 11 89 	or	r9,r9,r10<<0x18
80002238:	1b ca       	ld.ub	r10,sp[0x4]
8000223a:	14 49       	or	r9,r10
8000223c:	1b da       	ld.ub	r10,sp[0x5]
8000223e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002242:	91 f9       	st.w	r8[0x3c],r9
80002244:	1b ba       	ld.ub	r10,sp[0x3]
80002246:	1b a9       	ld.ub	r9,sp[0x2]
80002248:	b1 69       	lsl	r9,0x10
8000224a:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000224e:	1b 8a       	ld.ub	r10,sp[0x0]
80002250:	14 49       	or	r9,r10
80002252:	1b 9a       	ld.ub	r10,sp[0x1]
80002254:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002258:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
8000225a:	fe f8 02 0e 	ld.w	r8,pc[526]
8000225e:	11 89       	ld.ub	r9,r8[0x0]
80002260:	30 08       	mov	r8,0
80002262:	f0 09 18 00 	cp.b	r9,r8
80002266:	e0 81 00 fc 	brne	8000245e <adcifa_configure_sequencer+0x35a>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
8000226a:	fb 39 00 2f 	ld.ub	r9,sp[47]
8000226e:	fb 38 00 2e 	ld.ub	r8,sp[46]
80002272:	b9 68       	lsl	r8,0x18
80002274:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80002278:	fb 38 00 28 	ld.ub	r8,sp[40]
8000227c:	f3 e8 10 08 	or	r8,r9,r8
80002280:	fb 39 00 2d 	ld.ub	r9,sp[45]
80002284:	f1 e9 11 48 	or	r8,r8,r9<<0x14
80002288:	fb 39 00 2c 	ld.ub	r9,sp[44]
8000228c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002290:	fb 39 00 2b 	ld.ub	r9,sp[43]
80002294:	f1 e9 10 c8 	or	r8,r8,r9<<0xc
80002298:	fb 39 00 2a 	ld.ub	r9,sp[42]
8000229c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800022a0:	fb 39 00 29 	ld.ub	r9,sp[41]
800022a4:	f1 e9 10 49 	or	r9,r8,r9<<0x4
800022a8:	fc 78 24 00 	mov	r8,-187392
800022ac:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
800022ae:	fb 3a 00 1f 	ld.ub	r10,sp[31]
800022b2:	fb 39 00 1e 	ld.ub	r9,sp[30]
800022b6:	b1 69       	lsl	r9,0x10
800022b8:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
800022bc:	fb 39 00 1c 	ld.ub	r9,sp[28]
800022c0:	f5 e9 10 09 	or	r9,r10,r9
800022c4:	fb 3a 00 1d 	ld.ub	r10,sp[29]
800022c8:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800022cc:	91 c9       	st.w	r8[0x30],r9
800022ce:	fb 3a 00 1b 	ld.ub	r10,sp[27]
800022d2:	fb 39 00 1a 	ld.ub	r9,sp[26]
800022d6:	b1 69       	lsl	r9,0x10
800022d8:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
800022dc:	fb 39 00 18 	ld.ub	r9,sp[24]
800022e0:	f5 e9 10 09 	or	r9,r10,r9
800022e4:	fb 3a 00 19 	ld.ub	r10,sp[25]
800022e8:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800022ec:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
800022ee:	fb 3a 00 0f 	ld.ub	r10,sp[15]
800022f2:	fb 39 00 0e 	ld.ub	r9,sp[14]
800022f6:	b1 69       	lsl	r9,0x10
800022f8:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
800022fc:	fb 39 00 0c 	ld.ub	r9,sp[12]
80002300:	f5 e9 10 09 	or	r9,r10,r9
80002304:	fb 3a 00 0d 	ld.ub	r10,sp[13]
80002308:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000230c:	f1 49 00 40 	st.w	r8[64],r9
80002310:	fb 3a 00 0b 	ld.ub	r10,sp[11]
80002314:	fb 39 00 0a 	ld.ub	r9,sp[10]
80002318:	b1 69       	lsl	r9,0x10
8000231a:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
8000231e:	fb 39 00 08 	ld.ub	r9,sp[8]
80002322:	f5 e9 10 09 	or	r9,r10,r9
80002326:	fb 3a 00 09 	ld.ub	r10,sp[9]
8000232a:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000232e:	91 e9       	st.w	r8[0x38],r9
80002330:	c9 78       	rjmp	8000245e <adcifa_configure_sequencer+0x35a>
		break;

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
80002332:	15 8c       	ld.ub	r12,r10[0x0]
80002334:	15 e8       	ld.ub	r8,r10[0x6]
80002336:	a5 a8       	sbr	r8,0x4
80002338:	15 9b       	ld.ub	r11,r10[0x1]
8000233a:	f1 eb 10 c8 	or	r8,r8,r11<<0xc
8000233e:	15 ab       	ld.ub	r11,r10[0x2]
80002340:	f1 eb 10 88 	or	r8,r8,r11<<0x8
80002344:	15 bb       	ld.ub	r11,r10[0x3]
80002346:	f1 eb 10 28 	or	r8,r8,r11<<0x2
8000234a:	15 cb       	ld.ub	r11,r10[0x4]
8000234c:	f1 eb 10 38 	or	r8,r8,r11<<0x3
80002350:	15 da       	ld.ub	r10,r10[0x5]
80002352:	f1 ea 10 1a 	or	r10,r8,r10<<0x1
80002356:	f8 c8 00 01 	sub	r8,r12,1
8000235a:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
8000235e:	fc 78 24 00 	mov	r8,-187392
80002362:	91 6a       	st.w	r8[0x18],r10
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80002364:	58 0c       	cp.w	r12,0
80002366:	c1 00       	breq	80002386 <adcifa_configure_sequencer+0x282>
80002368:	12 9a       	mov	r10,r9
8000236a:	fa c8 ff e0 	sub	r8,sp,-32
 * \param p_adcifa_sequencer_opt  Structure for the sequencer configuration
 * \param p_adcifa_sequencer_conversion_opt  Pointer on a buffer for each
 *                                           conversion on a sequencer
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
8000236e:	f8 c7 00 01 	sub	r7,r12,1
80002372:	5c 57       	castu.b	r7
80002374:	fa cb ff df 	sub	r11,sp,-33
80002378:	f6 07 00 07 	add	r7,r11,r7
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000237c:	15 ab       	ld.ub	r11,r10[0x2]
8000237e:	10 cb       	st.b	r8++,r11
80002380:	2f da       	sub	r10,-3
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80002382:	0e 38       	cp.w	r8,r7
80002384:	cf c1       	brne	8000237c <adcifa_configure_sequencer+0x278>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
80002386:	fb 38 00 27 	ld.ub	r8,sp[39]
8000238a:	fb 3a 00 26 	ld.ub	r10,sp[38]
8000238e:	b9 6a       	lsl	r10,0x18
80002390:	f5 e8 11 ca 	or	r10,r10,r8<<0x1c
80002394:	fb 38 00 20 	ld.ub	r8,sp[32]
80002398:	10 4a       	or	r10,r8
8000239a:	fb 38 00 25 	ld.ub	r8,sp[37]
8000239e:	f5 e8 11 4a 	or	r10,r10,r8<<0x14
800023a2:	fb 38 00 24 	ld.ub	r8,sp[36]
800023a6:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
800023aa:	fb 38 00 23 	ld.ub	r8,sp[35]
800023ae:	f5 e8 10 ca 	or	r10,r10,r8<<0xc
800023b2:	fb 38 00 22 	ld.ub	r8,sp[34]
800023b6:	f5 e8 10 8a 	or	r10,r10,r8<<0x8
800023ba:	fb 38 00 21 	ld.ub	r8,sp[33]
800023be:	f5 e8 10 4a 	or	r10,r10,r8<<0x4
800023c2:	fc 78 24 00 	mov	r8,-187392
800023c6:	91 8a       	st.w	r8[0x20],r10
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800023c8:	58 0c       	cp.w	r12,0
800023ca:	c1 00       	breq	800023ea <adcifa_configure_sequencer+0x2e6>
800023cc:	30 08       	mov	r8,0
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800023ce:	fa c7 ff f0 	sub	r7,sp,-16
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800023d2:	1a 9b       	mov	r11,sp
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800023d4:	13 8a       	ld.ub	r10,r9[0x0]
800023d6:	ee 08 0b 0a 	st.b	r7[r8],r10
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800023da:	13 9a       	ld.ub	r10,r9[0x1]
800023dc:	f6 08 0b 0a 	st.b	r11[r8],r10
800023e0:	2f f8       	sub	r8,-1
800023e2:	2f d9       	sub	r9,-3
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800023e4:	f8 08 18 00 	cp.b	r8,r12
800023e8:	cf 63       	brcs	800023d4 <adcifa_configure_sequencer+0x2d0>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
800023ea:	fb 38 00 17 	ld.ub	r8,sp[23]
800023ee:	fb 39 00 16 	ld.ub	r9,sp[22]
800023f2:	b1 69       	lsl	r9,0x10
800023f4:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800023f8:	fb 38 00 14 	ld.ub	r8,sp[20]
800023fc:	10 49       	or	r9,r8
800023fe:	fb 38 00 15 	ld.ub	r8,sp[21]
80002402:	f3 e8 10 89 	or	r9,r9,r8<<0x8
80002406:	fc 78 24 00 	mov	r8,-187392
8000240a:	91 c9       	st.w	r8[0x30],r9
8000240c:	fb 3a 00 13 	ld.ub	r10,sp[19]
80002410:	fb 39 00 12 	ld.ub	r9,sp[18]
80002414:	b1 69       	lsl	r9,0x10
80002416:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000241a:	fb 3a 00 10 	ld.ub	r10,sp[16]
8000241e:	14 49       	or	r9,r10
80002420:	fb 3a 00 11 	ld.ub	r10,sp[17]
80002424:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002428:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000242a:	1b fa       	ld.ub	r10,sp[0x7]
8000242c:	1b e9       	ld.ub	r9,sp[0x6]
8000242e:	b1 69       	lsl	r9,0x10
80002430:	f3 ea 11 89 	or	r9,r9,r10<<0x18
80002434:	1b ca       	ld.ub	r10,sp[0x4]
80002436:	14 49       	or	r9,r10
80002438:	1b da       	ld.ub	r10,sp[0x5]
8000243a:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000243e:	f1 49 00 40 	st.w	r8[64],r9
80002442:	1b ba       	ld.ub	r10,sp[0x3]
80002444:	1b a9       	ld.ub	r9,sp[0x2]
80002446:	b1 69       	lsl	r9,0x10
80002448:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000244c:	1b 8a       	ld.ub	r10,sp[0x0]
8000244e:	14 49       	or	r9,r10
80002450:	1b 9a       	ld.ub	r10,sp[0x1]
80002452:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002456:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80002458:	30 19       	mov	r9,1
8000245a:	48 48       	lddpc	r8,80002468 <adcifa_configure_sequencer+0x364>
8000245c:	b0 89       	st.b	r8[0x0],r9

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
}
8000245e:	2f 4d       	sub	sp,-48
80002460:	e3 cd 00 c0 	ldm	sp++,r6-r7
80002464:	5e ff       	retal	1
80002466:	00 00       	add	r0,r0
80002468:	00 00       	add	r0,r0
8000246a:	01 00       	ld.w	r0,r0++

8000246c <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000246c:	fe 68 00 00 	mov	r8,-131072
80002470:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002472:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002476:	91 09       	st.w	r8[0x0],r9
}
80002478:	5e fc       	retal	r12
8000247a:	d7 03       	nop

8000247c <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
8000247c:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
8000247e:	e0 68 8a 3f 	mov	r8,35391
80002482:	ea 18 01 f7 	orh	r8,0x1f7
80002486:	10 3c       	cp.w	r12,r8
80002488:	e0 88 00 06 	brls	80002494 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
8000248c:	30 1c       	mov	r12,1
8000248e:	f0 1f 00 04 	mcall	8000249c <flashc_set_bus_freq+0x20>
80002492:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80002494:	30 0c       	mov	r12,0
80002496:	f0 1f 00 02 	mcall	8000249c <flashc_set_bus_freq+0x20>
8000249a:	d8 02       	popm	pc
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	24 6c       	sub	r12,70

800024a0 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024a0:	f8 08 16 05 	lsr	r8,r12,0x5
800024a4:	a9 78       	lsl	r8,0x9
800024a6:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
800024aa:	58 7b       	cp.w	r11,7
800024ac:	e0 8b 00 05 	brhi	800024b6 <gpio_enable_module_pin+0x16>
800024b0:	4a 09       	lddpc	r9,80002530 <gpio_enable_module_pin+0x90>
800024b2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800024b6:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800024b8:	30 19       	mov	r9,1
800024ba:	f2 0c 09 49 	lsl	r9,r9,r12
800024be:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800024c0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800024c2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800024c4:	c3 18       	rjmp	80002526 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800024c6:	30 19       	mov	r9,1
800024c8:	f2 0c 09 49 	lsl	r9,r9,r12
800024cc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800024ce:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800024d0:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800024d2:	c2 a8       	rjmp	80002526 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800024d4:	30 19       	mov	r9,1
800024d6:	f2 0c 09 49 	lsl	r9,r9,r12
800024da:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800024dc:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800024de:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800024e0:	c2 38       	rjmp	80002526 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800024e2:	30 19       	mov	r9,1
800024e4:	f2 0c 09 49 	lsl	r9,r9,r12
800024e8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800024ea:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800024ec:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800024ee:	c1 c8       	rjmp	80002526 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800024f0:	30 19       	mov	r9,1
800024f2:	f2 0c 09 49 	lsl	r9,r9,r12
800024f6:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800024f8:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800024fa:	91 d9       	st.w	r8[0x34],r9
		break;
800024fc:	c1 58       	rjmp	80002526 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800024fe:	30 19       	mov	r9,1
80002500:	f2 0c 09 49 	lsl	r9,r9,r12
80002504:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002506:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002508:	91 d9       	st.w	r8[0x34],r9
		break;
8000250a:	c0 e8       	rjmp	80002526 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000250c:	30 19       	mov	r9,1
8000250e:	f2 0c 09 49 	lsl	r9,r9,r12
80002512:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002514:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002516:	91 d9       	st.w	r8[0x34],r9
		break;
80002518:	c0 78       	rjmp	80002526 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000251a:	30 19       	mov	r9,1
8000251c:	f2 0c 09 49 	lsl	r9,r9,r12
80002520:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002522:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002524:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002526:	30 19       	mov	r9,1
80002528:	f2 0c 09 4c 	lsl	r12,r9,r12
8000252c:	91 2c       	st.w	r8[0x8],r12
8000252e:	5e fd       	retal	0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	50 00       	stdsp	sp[0x0],r0

80002534 <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002534:	f8 08 16 05 	lsr	r8,r12,0x5
80002538:	a9 78       	lsl	r8,0x9
8000253a:	e0 28 e0 00 	sub	r8,57344
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
8000253e:	30 19       	mov	r9,1
80002540:	f2 0c 09 4c 	lsl	r12,r9,r12
80002544:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002548:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000254c:	91 1c       	st.w	r8[0x4],r12
}
8000254e:	5e fc       	retal	r12

80002550 <pdca_get_handler>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002550:	30 f8       	mov	r8,15
80002552:	f0 0c 18 00 	cp.b	r12,r8
80002556:	e0 88 00 03 	brls	8000255c <pdca_get_handler+0xc>
8000255a:	5e fe       	retal	-1

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
8000255c:	a7 6c       	lsl	r12,0x6
8000255e:	e2 3c 00 00 	sub	r12,196608
	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
	}

	return pdca_channel;
}
80002562:	5e fc       	retal	r12

80002564 <pdca_enable>:
	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
}

void pdca_enable(uint8_t pdca_ch_number)
{
80002564:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002566:	f0 1f 00 03 	mcall	80002570 <pdca_enable+0xc>
			pdca_ch_number);

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
8000256a:	30 18       	mov	r8,1
8000256c:	99 58       	st.w	r12[0x14],r8
}
8000256e:	d8 02       	popm	pc
80002570:	80 00       	ld.sh	r0,r0[0x0]
80002572:	25 50       	sub	r0,85

80002574 <pdca_enable_interrupt_transfer_complete>:

	cpu_irq_restore(flags);
}

void pdca_enable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002574:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002576:	f0 1f 00 03 	mcall	80002580 <pdca_enable_interrupt_transfer_complete+0xc>
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
8000257a:	30 28       	mov	r8,2
8000257c:	99 88       	st.w	r12[0x20],r8
}
8000257e:	d8 02       	popm	pc
80002580:	80 00       	ld.sh	r0,r0[0x0]
80002582:	25 50       	sub	r0,85

80002584 <pdca_disable_interrupt_reload_counter_zero>:

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
80002584:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002586:	f0 1f 00 07 	mcall	800025a0 <pdca_disable_interrupt_reload_counter_zero+0x1c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000258a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000258e:	d3 03       	ssrf	0x10
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80002590:	30 19       	mov	r9,1
80002592:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
80002594:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002596:	e6 18 00 01 	andh	r8,0x1,COH
8000259a:	c0 21       	brne	8000259e <pdca_disable_interrupt_reload_counter_zero+0x1a>
      cpu_irq_enable();
8000259c:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
8000259e:	d8 02       	popm	pc
800025a0:	80 00       	ld.sh	r0,r0[0x0]
800025a2:	25 50       	sub	r0,85

800025a4 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
800025a4:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800025a6:	f0 1f 00 07 	mcall	800025c0 <pdca_disable_interrupt_transfer_complete+0x1c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025aa:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800025ae:	d3 03       	ssrf	0x10
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800025b0:	30 29       	mov	r9,2
800025b2:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
800025b4:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800025b6:	e6 18 00 01 	andh	r8,0x1,COH
800025ba:	c0 21       	brne	800025be <pdca_disable_interrupt_transfer_complete+0x1a>
      cpu_irq_enable();
800025bc:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800025be:	d8 02       	popm	pc
800025c0:	80 00       	ld.sh	r0,r0[0x0]
800025c2:	25 50       	sub	r0,85

800025c4 <pdca_reload_channel>:
	return pdca_channel->tcrr;
}

void pdca_reload_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
800025c4:	eb cd 40 c0 	pushm	r6-r7,lr
800025c8:	16 96       	mov	r6,r11
800025ca:	14 97       	mov	r7,r10
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800025cc:	f0 1f 00 09 	mcall	800025f0 <pdca_reload_channel+0x2c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025d0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800025d4:	d3 03       	ssrf	0x10
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	/* set up next memory address */
	pdca_channel->marr = (uint32_t)addr;
800025d6:	99 36       	st.w	r12[0xc],r6
	/* set up next memory size */
	pdca_channel->tcrr = size;
800025d8:	99 47       	st.w	r12[0x10],r7
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800025da:	e0 69 01 00 	mov	r9,256
800025de:	99 59       	st.w	r12[0x14],r9
	pdca_channel->isr;
800025e0:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800025e2:	e6 18 00 01 	andh	r8,0x1,COH
800025e6:	c0 21       	brne	800025ea <pdca_reload_channel+0x26>
      cpu_irq_enable();
800025e8:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800025ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800025ee:	00 00       	add	r0,r0
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	25 50       	sub	r0,85

800025f4 <pdca_init_channel>:
	return pdca_channel;
}

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
800025f4:	eb cd 40 e0 	pushm	r5-r7,lr
800025f8:	18 95       	mov	r5,r12
800025fa:	16 96       	mov	r6,r11
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800025fc:	f0 1f 00 13 	mcall	80002648 <pdca_init_channel+0x54>
80002600:	18 97       	mov	r7,r12
			pdca_ch_number);

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
80002602:	0a 9c       	mov	r12,r5
80002604:	f0 1f 00 12 	mcall	8000264c <pdca_init_channel+0x58>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
80002608:	0a 9c       	mov	r12,r5
8000260a:	f0 1f 00 12 	mcall	80002650 <pdca_init_channel+0x5c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000260e:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002612:	d3 03       	ssrf	0x10
	
	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)opt->addr;
80002614:	6c 09       	ld.w	r9,r6[0x0]
80002616:	8f 09       	st.w	r7[0x0],r9
	pdca_channel->tcr = opt->size;
80002618:	6c 19       	ld.w	r9,r6[0x4]
8000261a:	8f 29       	st.w	r7[0x8],r9
	pdca_channel->psr = opt->pid;
8000261c:	6c 49       	ld.w	r9,r6[0x10]
8000261e:	8f 19       	st.w	r7[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
80002620:	6c 29       	ld.w	r9,r6[0x8]
80002622:	8f 39       	st.w	r7[0xc],r9
	pdca_channel->tcrr = opt->r_size;
80002624:	6c 39       	ld.w	r9,r6[0xc]
80002626:	8f 49       	st.w	r7[0x10],r9
	pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80002628:	ed 3a 00 18 	ld.ub	r10,r6[24]
8000262c:	6c 59       	ld.w	r9,r6[0x14]
8000262e:	f3 ea 10 29 	or	r9,r9,r10<<0x2
	pdca_channel->mar = (uint32_t)opt->addr;
	pdca_channel->tcr = opt->size;
	pdca_channel->psr = opt->pid;
	pdca_channel->marr = (uint32_t)opt->r_addr;
	pdca_channel->tcrr = opt->r_size;
	pdca_channel->mr =
80002632:	8f 69       	st.w	r7[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002634:	e0 69 01 00 	mov	r9,256
80002638:	8f 59       	st.w	r7[0x14],r9
	pdca_channel->isr;
8000263a:	6e b9       	ld.w	r9,r7[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000263c:	e6 18 00 01 	andh	r8,0x1,COH
80002640:	c0 21       	brne	80002644 <pdca_init_channel+0x50>
      cpu_irq_enable();
80002642:	d5 03       	csrf	0x10
	
	cpu_irq_restore(flags);

	return PDCA_SUCCESS;
}
80002644:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002648:	80 00       	ld.sh	r0,r0[0x0]
8000264a:	25 50       	sub	r0,85
8000264c:	80 00       	ld.sh	r0,r0[0x0]
8000264e:	25 a4       	sub	r4,90
80002650:	80 00       	ld.sh	r0,r0[0x0]
80002652:	25 84       	sub	r4,88

80002654 <pevc_channel_configure>:
// See comment header in pevc.h
bool pevc_channel_configure( volatile avr32_pevc_t *pevc,
                             unsigned short int chan_id,
                             unsigned short int gen_id,
                             const pevc_evs_opt_t *pevs )
{
80002654:	eb cd 40 80 	pushm	r7,lr
  if( NULL != pevc )
80002658:	58 0c       	cp.w	r12,0
8000265a:	c3 c0       	breq	800026d2 <pevc_channel_configure+0x7e>
  {
    if(( gen_id < PEVC_NUMBER_OF_EVENT_GENERATORS )
8000265c:	30 1e       	mov	lr,1
8000265e:	32 18       	mov	r8,33
80002660:	f4 08 19 00 	cp.h	r8,r10
80002664:	f9 be 03 00 	movlo	lr,0
80002668:	30 18       	mov	r8,1
8000266a:	31 57       	mov	r7,21
8000266c:	f6 07 19 00 	cp.h	r7,r11
80002670:	f9 b8 03 00 	movlo	r8,0
80002674:	fd e8 00 08 	and	r8,lr,r8
80002678:	30 07       	mov	r7,0
8000267a:	ee 08 18 00 	cp.b	r8,r7
8000267e:	c2 a0       	breq	800026d2 <pevc_channel_configure+0x7e>
    && ( chan_id < PEVC_NUMBER_OF_EVENT_USERS ))
    {
      // Connect the generator gen_id to the channel.
      pevc->CHMX[chan_id].evmx = gen_id;
80002680:	5c 7b       	castu.h	r11
80002682:	2c 0b       	sub	r11,-64
80002684:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
80002688:	f1 da d0 06 	bfins	r8,r10,0x0,0x6
8000268c:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8

      // Configure the event shaper for the channel.
      if( NULL != pevs )
80002690:	58 09       	cp.w	r9,0
80002692:	c0 31       	brne	80002698 <pevc_channel_configure+0x44>
80002694:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      {
        pevc->igfdr = pevs->igfdr;  // Only one divider for all EVS channels.
80002698:	13 88       	ld.ub	r8,r9[0x0]
8000269a:	99 28       	st.w	r12[0x8],r8
        pevc->EVS[gen_id].igf = pevs->igf;
8000269c:	5c 7a       	castu.h	r10
8000269e:	13 fb       	ld.ub	r11,r9[0x7]
800026a0:	28 0a       	sub	r10,-128
800026a2:	f8 0a 03 28 	ld.w	r8,r12[r10<<0x2]
800026a6:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
800026aa:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
        pevc->EVS[gen_id].evf = pevs->evf;
800026ae:	f3 3b 00 0b 	ld.ub	r11,r9[11]
800026b2:	f8 0a 03 28 	ld.w	r8,r12[r10<<0x2]
800026b6:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
800026ba:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
        pevc->EVS[gen_id].evr = pevs->evr;
800026be:	f3 39 00 0f 	ld.ub	r9,r9[15]
800026c2:	f8 0a 03 28 	ld.w	r8,r12[r10<<0x2]
800026c6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800026ca:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
800026ce:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800026d2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1

800026d6 <pevc_channels_enable>:

// See comment header in pevc.h
void pevc_channels_enable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE(pevc, chan_mask);
800026d6:	fc 18 80 00 	movh	r8,0x8000
800026da:	30 09       	mov	r9,0
800026dc:	10 3a       	cp.w	r10,r8
800026de:	f2 0b 13 00 	cpc	r11,r9
800026e2:	f9 fa 8a 08 	st.wls	r12[0x20],r10
800026e6:	f9 fa ba 09 	st.whi	r12[0x24],r10
800026ea:	5e fc       	retal	r12

800026ec <scif_start_gclk>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800026ec:	f8 c9 ff e7 	sub	r9,r12,-25
800026f0:	fe 78 08 00 	mov	r8,-63488
800026f4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800026f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800026fc:	c0 20       	breq	80002700 <scif_start_gclk+0x14>
800026fe:	5e fe       	retal	-1
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80002700:	76 19       	ld.w	r9,r11[0x4]
80002702:	b1 69       	lsl	r9,0x10
80002704:	e6 19 00 ff 	andh	r9,0xff,COH
80002708:	76 28       	ld.w	r8,r11[0x8]
8000270a:	a1 78       	lsl	r8,0x1
8000270c:	e2 18 00 02 	andl	r8,0x2,COH
80002710:	10 49       	or	r9,r8
80002712:	a1 a9       	sbr	r9,0x0
80002714:	76 08       	ld.w	r8,r11[0x0]
80002716:	a9 68       	lsl	r8,0x8
80002718:	e2 18 0f 00 	andl	r8,0xf00,COH
8000271c:	10 49       	or	r9,r8
8000271e:	2e 7c       	sub	r12,-25
80002720:	fe 78 08 00 	mov	r8,-63488
80002724:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
80002728:	5e fd       	retal	0

8000272a <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
8000272a:	5e fd       	retal	0

8000272c <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
8000272c:	fe 68 10 00 	mov	r8,-126976
80002730:	70 09       	ld.w	r9,r8[0x0]
80002732:	a7 d9       	cbr	r9,0x7
80002734:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80002736:	70 09       	ld.w	r9,r8[0x0]
80002738:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000273c:	e0 19 ff 80 	andl	r9,0xff80
80002740:	f9 e9 10 09 	or	r9,r12,r9
80002744:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002746:	70 09       	ld.w	r9,r8[0x0]
80002748:	a7 b9       	sbr	r9,0x7
8000274a:	91 09       	st.w	r8[0x0],r9
}
8000274c:	5e fc       	retal	r12

8000274e <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
8000274e:	fe 68 10 00 	mov	r8,-126976
80002752:	70 0c       	ld.w	r12,r8[0x0]
}
80002754:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002758:	5e fc       	retal	r12

8000275a <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
8000275a:	fe 68 10 20 	mov	r8,-126944
8000275e:	70 0c       	ld.w	r12,r8[0x0]
}
80002760:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80002764:	5e fc       	retal	r12

80002766 <udd_get_micro_frame_number>:
#ifdef USB_DEVICE_HS_SUPPORT
	return udd_micro_frame_number();
#else
	return 0;
#endif
}
80002766:	5e fd       	retal	0

80002768 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002768:	48 28       	lddpc	r8,80002770 <udd_set_setup_payload+0x8>
8000276a:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
8000276c:	b0 6b       	st.h	r8[0xc],r11
}
8000276e:	5e fc       	retal	r12
80002770:	00 00       	add	r0,r0
80002772:	05 a8       	ld.ub	r8,r2[0x2]

80002774 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002774:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002778:	a3 68       	lsl	r8,0x2
8000277a:	e0 38 ee 40 	sub	r8,126528
8000277e:	70 0c       	ld.w	r12,r8[0x0]
}
80002780:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002784:	5e fc       	retal	r12
80002786:	d7 03       	nop

80002788 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002788:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000278a:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
8000278e:	30 38       	mov	r8,3
80002790:	f0 0c 18 00 	cp.b	r12,r8
80002794:	e0 88 00 03 	brls	8000279a <udd_ep_clear_halt+0x12>
80002798:	d8 0a       	popm	pc,r12=0
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)) {
8000279a:	f8 08 15 02 	lsl	r8,r12,0x2
8000279e:	fe 6a 11 c0 	mov	r10,-126528
800027a2:	f0 0a 00 09 	add	r9,r8,r10
800027a6:	72 09       	ld.w	r9,r9[0x0]
800027a8:	e6 19 00 08 	andh	r9,0x8,COH
800027ac:	c2 b0       	breq	80002802 <udd_ep_clear_halt+0x7a>
		// Remove stall request
		udd_disable_stall_handshake(ep);
800027ae:	fe 6a 12 20 	mov	r10,-126432
800027b2:	f0 0a 00 09 	add	r9,r8,r10
800027b6:	e8 6a 00 00 	mov	r10,524288
800027ba:	93 0a       	st.w	r9[0x0],r10
		if (Is_udd_stall(ep)) {
800027bc:	fe 6a 11 30 	mov	r10,-126672
800027c0:	f0 0a 00 09 	add	r9,r8,r10
800027c4:	72 09       	ld.w	r9,r9[0x0]
800027c6:	e2 19 00 40 	andl	r9,0x40,COH
800027ca:	c0 c0       	breq	800027e2 <udd_ep_clear_halt+0x5a>
			udd_ack_stall(ep);
800027cc:	fe 6a 11 60 	mov	r10,-126624
800027d0:	f0 0a 00 09 	add	r9,r8,r10
800027d4:	34 0a       	mov	r10,64
800027d6:	93 0a       	st.w	r9[0x0],r10
			// A packet has been stalled, then reset data toggle
			udd_reset_data_toggle(ep);
800027d8:	e0 38 ee 10 	sub	r8,126480
800027dc:	e4 69 00 00 	mov	r9,262144
800027e0:	91 09       	st.w	r8[0x0],r9

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
800027e2:	20 1c       	sub	r12,1
800027e4:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800027e8:	48 78       	lddpc	r8,80002804 <udd_ep_clear_halt+0x7c>
800027ea:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
			udd_reset_data_toggle(ep);
		}

		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800027ee:	78 08       	ld.w	r8,r12[0x0]
800027f0:	58 08       	cp.w	r8,0
800027f2:	c0 84       	brge	80002802 <udd_ep_clear_halt+0x7a>
			ptr_job->busy = false;
800027f4:	30 09       	mov	r9,0
800027f6:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
800027fa:	99 08       	st.w	r12[0x0],r8
			ptr_job->call_nohalt();
800027fc:	78 48       	ld.w	r8,r12[0x10]
800027fe:	5d 18       	icall	r8
80002800:	da 0a       	popm	pc,r12=1
80002802:	da 0a       	popm	pc,r12=1
80002804:	00 00       	add	r0,r0
80002806:	01 04       	ld.w	r4,r0++

80002808 <udd_ctrl_init>:
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002808:	30 19       	mov	r9,1
8000280a:	fe 68 12 20 	mov	r8,-126432
8000280e:	91 09       	st.w	r8[0x0],r9
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002810:	30 29       	mov	r9,2
80002812:	fe 68 11 60 	mov	r8,-126624
80002816:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80002818:	48 49       	lddpc	r9,80002828 <udd_ctrl_init+0x20>
8000281a:	30 08       	mov	r8,0
8000281c:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
8000281e:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002820:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002822:	48 39       	lddpc	r9,8000282c <udd_ctrl_init+0x24>
80002824:	93 08       	st.w	r9[0x0],r8
}
80002826:	5e fc       	retal	r12
80002828:	00 00       	add	r0,r0
8000282a:	05 a8       	ld.ub	r8,r2[0x2]
8000282c:	00 00       	add	r0,r0
8000282e:	01 c8       	ld.ub	r8,r0[0x4]

80002830 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002830:	30 59       	mov	r9,5
80002832:	48 58       	lddpc	r8,80002844 <udd_ctrl_stall_data+0x14>
80002834:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80002836:	e8 69 00 00 	mov	r9,524288
8000283a:	fe 68 11 f0 	mov	r8,-126480
8000283e:	91 09       	st.w	r8[0x0],r9
}
80002840:	5e fc       	retal	r12
80002842:	00 00       	add	r0,r0
80002844:	00 00       	add	r0,r0
80002846:	01 c8       	ld.ub	r8,r0[0x4]

80002848 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002848:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000284a:	48 48       	lddpc	r8,80002858 <udd_ctrl_endofrequest+0x10>
8000284c:	70 48       	ld.w	r8,r8[0x10]
8000284e:	58 08       	cp.w	r8,0
80002850:	c0 20       	breq	80002854 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80002852:	5d 18       	icall	r8
80002854:	d8 02       	popm	pc
80002856:	00 00       	add	r0,r0
80002858:	00 00       	add	r0,r0
8000285a:	05 a8       	ld.ub	r8,r2[0x2]

8000285c <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
8000285c:	d4 01       	pushm	lr
	irqflags_t flags;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000285e:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002862:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002866:	d3 03       	ssrf	0x10

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
80002868:	e0 6b 10 00 	mov	r11,4096
8000286c:	f6 0a 09 4b 	lsl	r11,r11,r10
80002870:	fe 69 10 00 	mov	r9,-126976
80002874:	93 5b       	st.w	r9[0x14],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002876:	e6 18 00 01 	andh	r8,0x1,COH
8000287a:	c0 21       	brne	8000287e <udd_ep_abort+0x22>
      cpu_irq_enable();
8000287c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Stop transfer
	udd_enable_busy_bank0(ep);
8000287e:	f4 0b 15 02 	lsl	r11,r10,0x2
80002882:	fe 69 11 f0 	mov	r9,-126480
80002886:	f6 09 00 08 	add	r8,r11,r9
8000288a:	fc 19 01 00 	movh	r9,0x100
8000288e:	91 09       	st.w	r8[0x0],r9

	// Job complete then call callback
	ptr_job = &udd_ep_job[ep - 1];
80002890:	f4 c9 00 01 	sub	r9,r10,1
80002894:	f2 09 00 29 	add	r9,r9,r9<<0x2
80002898:	48 c8       	lddpc	r8,800028c8 <udd_ep_abort+0x6c>
8000289a:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (!ptr_job->busy) {
8000289e:	72 08       	ld.w	r8,r9[0x0]
800028a0:	58 08       	cp.w	r8,0
800028a2:	c1 24       	brge	800028c6 <udd_ep_abort+0x6a>
		return;
	}
	ptr_job->busy = false;
800028a4:	30 0c       	mov	r12,0
800028a6:	f1 dc d3 e1 	bfins	r8,r12,0x1f,0x1
800028aa:	93 08       	st.w	r9[0x0],r8
	if (NULL != ptr_job->call_trans) {
800028ac:	72 48       	ld.w	r8,r9[0x10]
800028ae:	58 08       	cp.w	r8,0
800028b0:	c0 b0       	breq	800028c6 <udd_ep_abort+0x6a>
		if (Is_udd_endpoint_in(ep)) {
800028b2:	e0 3b ef 00 	sub	r11,126720
800028b6:	76 0b       	ld.w	r11,r11[0x0]
800028b8:	e2 1b 01 00 	andl	r11,0x100,COH
800028bc:	c0 20       	breq	800028c0 <udd_ep_abort+0x64>
			ep |= USB_EP_DIR_IN;
800028be:	a7 ba       	sbr	r10,0x7
		}
		// It can be a Transfer or stall callback
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
800028c0:	72 3b       	ld.w	r11,r9[0xc]
800028c2:	30 1c       	mov	r12,1
800028c4:	5d 18       	icall	r8
800028c6:	d8 02       	popm	pc
800028c8:	00 00       	add	r0,r0
800028ca:	01 04       	ld.w	r4,r0++

800028cc <udd_ep_set_halt>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
800028cc:	d4 01       	pushm	lr
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
800028ce:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < ep_index) {
800028d2:	30 39       	mov	r9,3
800028d4:	f2 08 18 00 	cp.b	r8,r9
800028d8:	e0 88 00 03 	brls	800028de <udd_ep_set_halt+0x12>
800028dc:	d8 0a       	popm	pc,r12=0
		return false;
	}

	// Stall endpoint
	udd_enable_stall_handshake(ep_index);
800028de:	a3 68       	lsl	r8,0x2
800028e0:	e0 38 ee 10 	sub	r8,126480
800028e4:	e8 69 00 00 	mov	r9,524288
800028e8:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort(ep);
800028ea:	f0 1f 00 02 	mcall	800028f0 <udd_ep_set_halt+0x24>
800028ee:	da 0a       	popm	pc,r12=1
800028f0:	80 00       	ld.sh	r0,r0[0x0]
800028f2:	28 5c       	sub	r12,-123

800028f4 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
800028f4:	eb cd 40 80 	pushm	r7,lr
800028f8:	18 97       	mov	r7,r12
	udd_ep_abort(ep);
800028fa:	f0 1f 00 07 	mcall	80002914 <udd_ep_free+0x20>
#if( defined UDC_RAM_ACCESS_ERROR_EVENT )
	if( Is_udd_ram_access_error(ep & 0x7F) ){
		UDC_RAM_ACCESS_ERROR_EVENT();
	}
#endif
	udd_disable_endpoint(ep & 0x7F);
800028fe:	fe 68 10 00 	mov	r8,-126976
80002902:	70 79       	ld.w	r9,r8[0x1c]
80002904:	30 1a       	mov	r10,1
80002906:	f4 07 09 47 	lsl	r7,r10,r7
8000290a:	5c d7       	com	r7
8000290c:	12 67       	and	r7,r9
8000290e:	91 77       	st.w	r8[0x1c],r7
}
80002910:	e3 cd 80 80 	ldm	sp++,r7,pc
80002914:	80 00       	ld.sh	r0,r0[0x0]
80002916:	28 5c       	sub	r12,-123

80002918 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
80002918:	58 0c       	cp.w	r12,0
8000291a:	c1 41       	brne	80002942 <udd_sleep_mode+0x2a>
8000291c:	49 48       	lddpc	r8,8000296c <udd_sleep_mode+0x54>
8000291e:	11 89       	ld.ub	r9,r8[0x0]
80002920:	30 08       	mov	r8,0
80002922:	f0 09 18 00 	cp.b	r9,r8
80002926:	c2 00       	breq	80002966 <udd_sleep_mode+0x4e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002928:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000292c:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
8000292e:	49 18       	lddpc	r8,80002970 <udd_sleep_mode+0x58>
80002930:	11 9a       	ld.ub	r10,r8[0x1]
80002932:	20 1a       	sub	r10,1
80002934:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002936:	12 98       	mov	r8,r9
80002938:	e6 18 00 01 	andh	r8,0x1,COH
8000293c:	c0 21       	brne	80002940 <udd_sleep_mode+0x28>
      cpu_irq_enable();
8000293e:	d5 03       	csrf	0x10
   }

	barrier();
80002940:	c1 38       	rjmp	80002966 <udd_sleep_mode+0x4e>
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002942:	48 b8       	lddpc	r8,8000296c <udd_sleep_mode+0x54>
80002944:	11 89       	ld.ub	r9,r8[0x0]
80002946:	30 08       	mov	r8,0
80002948:	f0 09 18 00 	cp.b	r9,r8
8000294c:	c0 d1       	brne	80002966 <udd_sleep_mode+0x4e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000294e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002952:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002954:	48 78       	lddpc	r8,80002970 <udd_sleep_mode+0x58>
80002956:	11 9a       	ld.ub	r10,r8[0x1]
80002958:	2f fa       	sub	r10,-1
8000295a:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000295c:	12 98       	mov	r8,r9
8000295e:	e6 18 00 01 	andh	r8,0x1,COH
80002962:	c0 21       	brne	80002966 <udd_sleep_mode+0x4e>
      cpu_irq_enable();
80002964:	d5 03       	csrf	0x10
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80002966:	48 28       	lddpc	r8,8000296c <udd_sleep_mode+0x54>
80002968:	b0 8c       	st.b	r8[0x0],r12
}
8000296a:	5e fc       	retal	r12
8000296c:	00 00       	add	r0,r0
8000296e:	01 c0       	ld.ub	r0,r0[0x4]
80002970:	00 00       	add	r0,r0
80002972:	06 00       	add	r0,r3

80002974 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002974:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80002976:	fe 68 18 00 	mov	r8,-124928
8000297a:	70 09       	ld.w	r9,r8[0x0]
8000297c:	af c9       	cbr	r9,0xe
8000297e:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80002980:	fe 69 10 00 	mov	r9,-126976
80002984:	72 0a       	ld.w	r10,r9[0x0]
80002986:	a9 aa       	sbr	r10,0x8
80002988:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
8000298a:	70 09       	ld.w	r9,r8[0x0]
8000298c:	af a9       	sbr	r9,0xe
8000298e:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002990:	30 0c       	mov	r12,0
80002992:	f0 1f 00 02 	mcall	80002998 <udd_detach+0x24>
}
80002996:	d8 02       	popm	pc
80002998:	80 00       	ld.sh	r0,r0[0x0]
8000299a:	29 18       	sub	r8,-111

8000299c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
8000299c:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800029a0:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800029a4:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
800029a6:	30 1c       	mov	r12,1
800029a8:	f0 1f 00 18 	mcall	80002a08 <udd_attach+0x6c>
	otg_unfreeze_clock();
800029ac:	fe 68 18 00 	mov	r8,-124928
800029b0:	70 09       	ld.w	r9,r8[0x0]
800029b2:	af c9       	cbr	r9,0xe
800029b4:	91 09       	st.w	r8[0x0],r9
	while (!Is_otg_clock_usable());
800029b6:	fe 68 18 04 	mov	r8,-124924
800029ba:	70 09       	ld.w	r9,r8[0x0]
800029bc:	e2 19 40 00 	andl	r9,0x4000,COH
800029c0:	cf d0       	breq	800029ba <udd_attach+0x1e>

	// Authorize attach if Vbus is present
	udd_attach_device();
800029c2:	fe 68 10 00 	mov	r8,-126976
800029c6:	70 09       	ld.w	r9,r8[0x0]
800029c8:	a9 c9       	cbr	r9,0x8
800029ca:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
800029cc:	fe 68 10 18 	mov	r8,-126952
800029d0:	30 8c       	mov	r12,8
800029d2:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
800029d4:	30 1a       	mov	r10,1
800029d6:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
800029d8:	31 09       	mov	r9,16
800029da:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
800029dc:	30 4b       	mov	r11,4
800029de:	91 0b       	st.w	r8[0x0],r11

	// Reset following interrupts flag
	udd_ack_reset();
800029e0:	fe 68 10 08 	mov	r8,-126968
800029e4:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
800029e6:	91 0b       	st.w	r8[0x0],r11

	// The first suspend interrupt must be forced
	udd_raise_suspend();
800029e8:	fe 6b 10 0c 	mov	r11,-126964
800029ec:	97 0a       	st.w	r11[0x0],r10
	udd_ack_wake_up();
800029ee:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800029f0:	fe 68 18 00 	mov	r8,-124928
800029f4:	70 09       	ld.w	r9,r8[0x0]
800029f6:	af a9       	sbr	r9,0xe
800029f8:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800029fa:	e6 17 00 01 	andh	r7,0x1,COH
800029fe:	c0 21       	brne	80002a02 <udd_attach+0x66>
      cpu_irq_enable();
80002a00:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002a02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a06:	00 00       	add	r0,r0
80002a08:	80 00       	ld.sh	r0,r0[0x0]
80002a0a:	29 18       	sub	r8,-111

80002a0c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002a0c:	30 39       	mov	r9,3
80002a0e:	48 e8       	lddpc	r8,80002a44 <udd_ctrl_send_zlp_in+0x38>
80002a10:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	udd_udesc_rst_buf0_ctn(0);
80002a12:	48 e8       	lddpc	r8,80002a48 <udd_ctrl_send_zlp_in+0x3c>
80002a14:	70 19       	ld.w	r9,r8[0x4]
80002a16:	30 0a       	mov	r10,0
80002a18:	f3 da d0 0f 	bfins	r9,r10,0x0,0xf
80002a1c:	91 19       	st.w	r8[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a1e:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002a22:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002a24:	fe 6a 11 60 	mov	r10,-126624
80002a28:	30 19       	mov	r9,1
80002a2a:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80002a2c:	fe 68 11 f0 	mov	r8,-126480
80002a30:	91 09       	st.w	r8[0x0],r9

	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002a32:	30 89       	mov	r9,8
80002a34:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
80002a36:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002a38:	16 98       	mov	r8,r11
80002a3a:	e6 18 00 01 	andh	r8,0x1,COH
80002a3e:	c0 21       	brne	80002a42 <udd_ctrl_send_zlp_in+0x36>
      cpu_irq_enable();
80002a40:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002a42:	5e fc       	retal	r12
80002a44:	00 00       	add	r0,r0
80002a46:	01 c8       	ld.ub	r8,r0[0x4]
80002a48:	00 00       	add	r0,r0
80002a4a:	01 40       	ld.w	r0,--r0

80002a4c <udd_ep_trans_done>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80002a4c:	d4 31       	pushm	r0-r7,lr
80002a4e:	20 1d       	sub	sp,4
80002a50:	18 96       	mov	r6,r12
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
80002a52:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
	ep_size = udd_get_endpoint_size(ep_num);
80002a56:	f0 00 15 02 	lsl	r0,r8,0x2
80002a5a:	fe 6c 11 00 	mov	r12,-126720
80002a5e:	e0 0c 00 09 	add	r9,r0,r12
80002a62:	72 01       	ld.w	r1,r9[0x0]

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
80002a64:	f0 c5 00 01 	sub	r5,r8,1
80002a68:	ea 05 00 27 	add	r7,r5,r5<<0x2
80002a6c:	fe f9 02 d0 	ld.w	r9,pc[720]
80002a70:	f2 07 00 27 	add	r7,r9,r7<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a74:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002a78:	d3 03       	ssrf	0x10

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep_num);
80002a7a:	e0 64 10 00 	mov	r4,4096
80002a7e:	e8 08 09 44 	lsl	r4,r4,r8
80002a82:	fe 6a 10 00 	mov	r10,-126976
80002a86:	95 54       	st.w	r10[0x14],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002a88:	e6 19 00 01 	andh	r9,0x1,COH
80002a8c:	c0 21       	brne	80002a90 <udd_ep_trans_done+0x44>
      cpu_irq_enable();
80002a8e:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (!ptr_job->busy) {
80002a90:	6e 09       	ld.w	r9,r7[0x0]
80002a92:	58 09       	cp.w	r9,0
80002a94:	e0 84 01 51 	brge	80002d36 <udd_ep_trans_done+0x2ea>
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
	ep_size = udd_get_endpoint_size(ep_num);
80002a98:	e3 d1 c0 83 	bfextu	r1,r1,0x4,0x3
80002a9c:	30 89       	mov	r9,8
80002a9e:	f2 01 09 41 	lsl	r1,r9,r1
80002aa2:	5c 81       	casts.h	r1

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
80002aa4:	30 09       	mov	r9,0
80002aa6:	f2 06 18 00 	cp.b	r6,r9
80002aaa:	e0 84 00 94 	brge	80002bd2 <udd_ep_trans_done+0x186>
		// Transfer complete on IN
		nb_trans = udd_udesc_get_buf0_size(ep_num);
80002aae:	f0 0a 15 01 	lsl	r10,r8,0x1
80002ab2:	a3 78       	lsl	r8,0x3
80002ab4:	2f f8       	sub	r8,-1
80002ab6:	fe f9 02 8a 	ld.w	r9,pc[650]
80002aba:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80002abe:	f3 d9 c2 0f 	bfextu	r9,r9,0x10,0xf

		// Lock emission of new IN packet
		udd_enable_busy_bank0(ep_num);
80002ac2:	fe 68 11 f0 	mov	r8,-126480
80002ac6:	e0 08 00 0b 	add	r11,r0,r8
80002aca:	fc 18 01 00 	movh	r8,0x100
80002ace:	97 08       	st.w	r11[0x0],r8

		// Ack interrupt
		udd_ack_in_send(ep_num);
80002ad0:	fe 6c 11 60 	mov	r12,-126624
80002ad4:	e0 0c 00 08 	add	r8,r0,r12
80002ad8:	30 1c       	mov	r12,1
80002ada:	91 0c       	st.w	r8[0x0],r12

		if (0 == nb_trans) {
80002adc:	58 09       	cp.w	r9,0
80002ade:	c1 21       	brne	80002b02 <udd_ep_trans_done+0xb6>
			if (0 == udd_nb_busy_bank(ep_num)) {
80002ae0:	fe 6c 11 30 	mov	r12,-126672
80002ae4:	e0 0c 00 08 	add	r8,r0,r12
80002ae8:	70 08       	ld.w	r8,r8[0x0]
80002aea:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002aee:	c0 a1       	brne	80002b02 <udd_ep_trans_done+0xb6>
				// All byte are transfered than take nb byte requested
				nb_trans = udd_udesc_get_buf0_ctn(ep_num);
80002af0:	f4 09 15 02 	lsl	r9,r10,0x2
80002af4:	2f f9       	sub	r9,-1
80002af6:	fe f8 02 4a 	ld.w	r8,pc[586]
80002afa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80002afe:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
			}
		}
		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
80002b02:	6e 38       	ld.w	r8,r7[0xc]
80002b04:	10 09       	add	r9,r8
80002b06:	8f 39       	st.w	r7[0xc],r9

		// Need to send other data
		if ((ptr_job->nb_trans != ptr_job->buf_size)
80002b08:	6e 28       	ld.w	r8,r7[0x8]
80002b0a:	10 39       	cp.w	r9,r8
80002b0c:	c0 61       	brne	80002b18 <udd_ep_trans_done+0xcc>
				|| ptr_job->b_shortpacket) {
80002b0e:	6e 0c       	ld.w	r12,r7[0x0]
80002b10:	e6 1c 40 00 	andh	r12,0x4000,COH
80002b14:	e0 80 01 05 	breq	80002d1e <udd_ep_trans_done+0x2d2>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80002b18:	f0 09 01 09 	sub	r9,r8,r9
80002b1c:	f9 d9 b0 10 	bfexts	r12,r9,0x0,0x10
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80002b20:	30 08       	mov	r8,0
80002b22:	f0 0c 19 00 	cp.h	r12,r8
80002b26:	c1 84       	brge	80002b56 <udd_ep_trans_done+0x10a>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
80002b28:	f3 d1 c0 10 	bfextu	r9,r1,0x0,0x10
80002b2c:	e0 68 7f ff 	mov	r8,32767
80002b30:	f0 09 0c 08 	divs	r8,r8,r9
80002b34:	e0 6c 7f ff 	mov	r12,32767
80002b38:	12 1c       	sub	r12,r9
80002b3a:	5c 8c       	casts.h	r12
						(UDD_ENDPOINT_MAX_TRANS % ep_size);
				udd_udesc_set_buf0_autozlp(ep_num, false);
80002b3c:	fe f8 02 04 	ld.w	r8,pc[516]
80002b40:	f4 09 15 02 	lsl	r9,r10,0x2
80002b44:	2f f9       	sub	r9,-1
80002b46:	f0 09 03 26 	ld.w	r6,r8[r9<<0x2]
80002b4a:	30 05       	mov	r5,0
80002b4c:	ed d5 d3 e1 	bfins	r6,r5,0x1f,0x1
80002b50:	f0 09 09 26 	st.w	r8[r9<<0x2],r6
80002b54:	c1 28       	rjmp	80002b78 <udd_ep_trans_done+0x12c>
			} else {
				// Need ZLP, if requested and last packet is not a short packet
				udd_udesc_set_buf0_autozlp(ep_num, ptr_job->b_shortpacket);
80002b56:	6e 08       	ld.w	r8,r7[0x0]
80002b58:	e7 d8 c3 c1 	bfextu	r3,r8,0x1e,0x1
80002b5c:	4f 99       	lddpc	r9,80002d40 <udd_ep_trans_done+0x2f4>
80002b5e:	f4 06 15 02 	lsl	r6,r10,0x2
80002b62:	2f f6       	sub	r6,-1
80002b64:	f2 06 03 25 	ld.w	r5,r9[r6<<0x2]
80002b68:	eb d3 d3 e1 	bfins	r5,r3,0x1f,0x1
80002b6c:	f2 06 09 25 	st.w	r9[r6<<0x2],r5
				ptr_job->b_shortpacket = false; // No need to request another ZLP
80002b70:	30 09       	mov	r9,0
80002b72:	f1 d9 d3 c1 	bfins	r8,r9,0x1e,0x1
80002b76:	8f 08       	st.w	r7[0x0],r8
			}

			udd_udesc_set_buf0_ctn(ep_num, next_trans);
80002b78:	4f 28       	lddpc	r8,80002d40 <udd_ep_trans_done+0x2f4>
80002b7a:	f4 09 15 02 	lsl	r9,r10,0x2
80002b7e:	2f f9       	sub	r9,-1
80002b80:	f0 09 03 26 	ld.w	r6,r8[r9<<0x2]
80002b84:	ed dc d0 0f 	bfins	r6,r12,0x0,0xf
80002b88:	f0 09 09 26 	st.w	r8[r9<<0x2],r6
			udd_udesc_rst_buf0_size(ep_num);
80002b8c:	f0 09 03 2c 	ld.w	r12,r8[r9<<0x2]
80002b90:	30 06       	mov	r6,0
80002b92:	f9 d6 d2 0f 	bfins	r12,r6,0x10,0xf
80002b96:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12

			// Link the user buffer directly on USB hardware DMA
			udd_udesc_set_buf0_addr(ep_num,
80002b9a:	6e 1c       	ld.w	r12,r7[0x4]
80002b9c:	6e 39       	ld.w	r9,r7[0xc]
80002b9e:	f8 09 00 09 	add	r9,r12,r9
80002ba2:	a5 6a       	lsl	r10,0x4
80002ba4:	14 08       	add	r8,r10
80002ba6:	91 09       	st.w	r8[0x0],r9
					&ptr_job->buf[ptr_job->nb_trans]);

			// Start transfer
			udd_ack_fifocon(ep_num);
80002ba8:	e0 30 ed e0 	sub	r0,126432
80002bac:	e0 68 40 00 	mov	r8,16384
80002bb0:	81 08       	st.w	r0[0x0],r8
			udd_disable_busy_bank0(ep_num);
80002bb2:	fc 18 01 00 	movh	r8,0x100
80002bb6:	81 08       	st.w	r0[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bb8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002bbc:	d3 03       	ssrf	0x10

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_in_send_interrupt(ep_num);
80002bbe:	30 19       	mov	r9,1
80002bc0:	97 09       	st.w	r11[0x0],r9
			udd_enable_endpoint_interrupt(ep_num);
80002bc2:	fe 69 10 00 	mov	r9,-126976
80002bc6:	93 64       	st.w	r9[0x18],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002bc8:	e6 18 00 01 	andh	r8,0x1,COH
80002bcc:	c0 21       	brne	80002bd0 <udd_ep_trans_done+0x184>
      cpu_irq_enable();
80002bce:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
80002bd0:	cb 38       	rjmp	80002d36 <udd_ep_trans_done+0x2ea>
		}
	} else {
		// Transfer complete on OUT
		nb_trans = udd_udesc_get_buf0_ctn(ep_num);
80002bd2:	f0 02 15 01 	lsl	r2,r8,0x1
80002bd6:	a3 78       	lsl	r8,0x3
80002bd8:	2f f8       	sub	r8,-1
80002bda:	4d a9       	lddpc	r9,80002d40 <udd_ep_trans_done+0x2f4>
80002bdc:	f2 08 03 23 	ld.w	r3,r9[r8<<0x2]
80002be0:	e7 d3 c0 0f 	bfextu	r3,r3,0x0,0xf

		// Lock reception of new OUT packet
		udd_enable_busy_bank0(ep_num);
80002be4:	fe 6a 11 f0 	mov	r10,-126480
80002be8:	e0 0a 00 0a 	add	r10,r0,r10
80002bec:	50 0a       	stdsp	sp[0x0],r10
80002bee:	fc 18 01 00 	movh	r8,0x100
80002bf2:	95 08       	st.w	r10[0x0],r8

		// Ack interrupt
		udd_ack_out_received(ep_num);
80002bf4:	fe 69 11 60 	mov	r9,-126624
80002bf8:	e0 09 00 08 	add	r8,r0,r9
80002bfc:	30 29       	mov	r9,2
80002bfe:	91 09       	st.w	r8[0x0],r9
		udd_ack_fifocon(ep_num);
80002c00:	e0 30 ed e0 	sub	r0,126432
80002c04:	e0 68 40 00 	mov	r8,16384
80002c08:	81 08       	st.w	r0[0x0],r8

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
80002c0a:	6e 08       	ld.w	r8,r7[0x0]
80002c0c:	e6 18 20 00 	andh	r8,0x2000,COH
80002c10:	c1 00       	breq	80002c30 <udd_ep_trans_done+0x1e4>
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
80002c12:	6e 1c       	ld.w	r12,r7[0x4]
80002c14:	6e 39       	ld.w	r9,r7[0xc]
80002c16:	f7 d1 c0 10 	bfextu	r11,r1,0x0,0x10
80002c1a:	6e 28       	ld.w	r8,r7[0x8]
80002c1c:	f0 0b 0d 0a 	divu	r10,r8,r11
80002c20:	ea 08 15 06 	lsl	r8,r5,0x6
80002c24:	16 9a       	mov	r10,r11
80002c26:	4c 8b       	lddpc	r11,80002d44 <udd_ep_trans_done+0x2f8>
80002c28:	10 0b       	add	r11,r8
80002c2a:	12 0c       	add	r12,r9
80002c2c:	f0 1f 00 47 	mcall	80002d48 <udd_ep_trans_done+0x2fc>
					udd_ep_out_cache_buffer[ep_num - 1],
					ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
80002c30:	6e 38       	ld.w	r8,r7[0xc]
80002c32:	e6 08 00 08 	add	r8,r3,r8
80002c36:	8f 38       	st.w	r7[0xc],r8
		if (ptr_job->nb_trans > ptr_job->buf_size) {
80002c38:	6e 29       	ld.w	r9,r7[0x8]
			ptr_job->nb_trans = ptr_job->buf_size;
80002c3a:	12 38       	cp.w	r8,r9
80002c3c:	ef f9 ba 03 	st.whi	r7[0xc],r9
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
80002c40:	e4 09 15 02 	lsl	r9,r2,0x2
80002c44:	2f f9       	sub	r9,-1
80002c46:	4b f8       	lddpc	r8,80002d40 <udd_ep_trans_done+0x2f4>
80002c48:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002c4c:	f1 d8 c2 0f 	bfextu	r8,r8,0x10,0xf
80002c50:	e6 08 19 00 	cp.h	r8,r3
80002c54:	c6 51       	brne	80002d1e <udd_ep_trans_done+0x2d2>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
80002c56:	6e 38       	ld.w	r8,r7[0xc]
80002c58:	6e 29       	ld.w	r9,r7[0x8]
			ptr_job->nb_trans = ptr_job->buf_size;
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
80002c5a:	12 38       	cp.w	r8,r9
80002c5c:	c6 10       	breq	80002d1e <udd_ep_trans_done+0x2d2>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80002c5e:	f2 08 01 08 	sub	r8,r9,r8
80002c62:	5c 88       	casts.h	r8
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80002c64:	30 09       	mov	r9,0
80002c66:	f2 08 19 00 	cp.h	r8,r9
80002c6a:	c0 c4       	brge	80002c82 <udd_ep_trans_done+0x236>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
80002c6c:	f3 d1 c0 10 	bfextu	r9,r1,0x0,0x10
80002c70:	e0 68 7f ff 	mov	r8,32767
80002c74:	f0 09 0c 08 	divs	r8,r8,r9
80002c78:	e0 68 7f ff 	mov	r8,32767
80002c7c:	12 18       	sub	r8,r9
80002c7e:	5c 88       	casts.h	r8
80002c80:	c0 98       	rjmp	80002c92 <udd_ep_trans_done+0x246>
						- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
80002c82:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80002c86:	f7 d1 c0 10 	bfextu	r11,r1,0x0,0x10
80002c8a:	f2 0b 0d 0a 	divu	r10,r9,r11
80002c8e:	16 18       	sub	r8,r11
80002c90:	5c 88       	casts.h	r8
			}

			udd_udesc_rst_buf0_ctn(ep_num);
80002c92:	4a c9       	lddpc	r9,80002d40 <udd_ep_trans_done+0x2f4>
80002c94:	e4 0a 15 02 	lsl	r10,r2,0x2
80002c98:	2f fa       	sub	r10,-1
80002c9a:	f2 0a 03 2b 	ld.w	r11,r9[r10<<0x2]
80002c9e:	30 0c       	mov	r12,0
80002ca0:	f7 dc d0 0f 	bfins	r11,r12,0x0,0xf
80002ca4:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
			if (next_trans < ep_size) {
80002ca8:	e2 08 19 00 	cp.h	r8,r1
80002cac:	c1 72       	brcc	80002cda <udd_ep_trans_done+0x28e>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
80002cae:	6e 08       	ld.w	r8,r7[0x0]
80002cb0:	30 19       	mov	r9,1
80002cb2:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
80002cb6:	8f 08       	st.w	r7[0x0],r8
				udd_udesc_set_buf0_addr(ep_num,
80002cb8:	a7 65       	lsl	r5,0x6
80002cba:	4a 38       	lddpc	r8,80002d44 <udd_ep_trans_done+0x2f8>
80002cbc:	10 05       	add	r5,r8
80002cbe:	4a 18       	lddpc	r8,80002d40 <udd_ep_trans_done+0x2f4>
80002cc0:	e4 09 15 04 	lsl	r9,r2,0x4
80002cc4:	f0 09 00 09 	add	r9,r8,r9
80002cc8:	93 05       	st.w	r9[0x0],r5
						udd_ep_out_cache_buffer[ep_num-1]);
				udd_udesc_set_buf0_size(ep_num, ep_size);
80002cca:	14 92       	mov	r2,r10
80002ccc:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
80002cd0:	f3 d1 d2 0f 	bfins	r9,r1,0x10,0xf
80002cd4:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9
80002cd8:	c1 28       	rjmp	80002cfc <udd_ep_trans_done+0x2b0>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_udesc_set_buf0_addr(ep_num, &ptr_job->buf[ptr_job->nb_trans]);
80002cda:	6e 1b       	ld.w	r11,r7[0x4]
80002cdc:	6e 39       	ld.w	r9,r7[0xc]
80002cde:	12 0b       	add	r11,r9
80002ce0:	49 89       	lddpc	r9,80002d40 <udd_ep_trans_done+0x2f4>
80002ce2:	e4 0a 15 04 	lsl	r10,r2,0x4
80002ce6:	f2 0a 00 0a 	add	r10,r9,r10
80002cea:	95 0b       	st.w	r10[0x0],r11
				udd_udesc_set_buf0_size(ep_num, next_trans);
80002cec:	a3 62       	lsl	r2,0x2
80002cee:	2f f2       	sub	r2,-1
80002cf0:	f2 02 03 2a 	ld.w	r10,r9[r2<<0x2]
80002cf4:	f5 d8 d2 0f 	bfins	r10,r8,0x10,0xf
80002cf8:	f2 02 09 2a 	st.w	r9[r2<<0x2],r10
			}
			// Start transfer
			udd_disable_busy_bank0(ep_num);
80002cfc:	fc 18 01 00 	movh	r8,0x100
80002d00:	81 08       	st.w	r0[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d02:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002d06:	d3 03       	ssrf	0x10

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_out_received_interrupt(ep_num);
80002d08:	30 29       	mov	r9,2
80002d0a:	40 0c       	lddsp	r12,sp[0x0]
80002d0c:	99 09       	st.w	r12[0x0],r9
			udd_enable_endpoint_interrupt(ep_num);
80002d0e:	fe 69 10 00 	mov	r9,-126976
80002d12:	93 64       	st.w	r9[0x18],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002d14:	e6 18 00 01 	andh	r8,0x1,COH
80002d18:	c0 21       	brne	80002d1c <udd_ep_trans_done+0x2d0>
      cpu_irq_enable();
80002d1a:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
80002d1c:	c0 d8       	rjmp	80002d36 <udd_ep_trans_done+0x2ea>
		}
	}

	// Job complete then call callback
	ptr_job->busy = false;
80002d1e:	6e 08       	ld.w	r8,r7[0x0]
80002d20:	30 09       	mov	r9,0
80002d22:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80002d26:	8f 08       	st.w	r7[0x0],r8
	if (NULL != ptr_job->call_trans) {
80002d28:	6e 48       	ld.w	r8,r7[0x10]
80002d2a:	58 08       	cp.w	r8,0
80002d2c:	c0 50       	breq	80002d36 <udd_ep_trans_done+0x2ea>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
80002d2e:	0c 9a       	mov	r10,r6
80002d30:	6e 3b       	ld.w	r11,r7[0xc]
80002d32:	12 9c       	mov	r12,r9
80002d34:	5d 18       	icall	r8
	}
	return;
}
80002d36:	2f fd       	sub	sp,-4
80002d38:	d8 32       	popm	r0-r7,pc
80002d3a:	00 00       	add	r0,r0
80002d3c:	00 00       	add	r0,r0
80002d3e:	01 04       	ld.w	r4,r0++
80002d40:	00 00       	add	r0,r0
80002d42:	01 40       	ld.w	r0,--r0
80002d44:	00 00       	add	r0,r0
80002d46:	04 e8       	st.h	--r2,r8
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	4c 48       	lddpc	r8,80002e58 <udd_ctrl_in_sent+0x18>

80002d4c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002d4c:	eb cd 40 f8 	pushm	r3-r7,lr
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
80002d50:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep_num) {
80002d54:	30 37       	mov	r7,3
80002d56:	ee 0e 18 00 	cp.b	lr,r7
80002d5a:	e0 8b 00 6a 	brhi	80002e2e <udd_ep_run+0xe2>
		return false;
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
80002d5e:	fe 67 10 00 	mov	r7,-126976
80002d62:	6e 76       	ld.w	r6,r7[0x1c]
80002d64:	1c 95       	mov	r5,lr
80002d66:	30 17       	mov	r7,1
80002d68:	ee 0e 09 47 	lsl	r7,r7,lr
80002d6c:	0c 67       	and	r7,r6
80002d6e:	c6 00       	breq	80002e2e <udd_ep_run+0xe2>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
80002d70:	fc 07 15 02 	lsl	r7,lr,0x2
80002d74:	fe 64 11 c0 	mov	r4,-126528
80002d78:	ee 04 00 06 	add	r6,r7,r4
80002d7c:	6c 06       	ld.w	r6,r6[0x0]

	ep_num = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_num) {
		return false;
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
80002d7e:	e6 16 00 08 	andh	r6,0x8,COH
80002d82:	c5 61       	brne	80002e2e <udd_ep_run+0xe2>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
		return false; // Endpoint is halted
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
80002d84:	20 1e       	sub	lr,1
80002d86:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80002d8a:	4a b6       	lddpc	r6,80002e34 <udd_ep_run+0xe8>
80002d8c:	ec 0e 00 2e 	add	lr,r6,lr<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d90:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
80002d94:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002d96:	7c 06       	ld.w	r6,lr[0x0]
80002d98:	58 06       	cp.w	r6,0
80002d9a:	c0 74       	brge	80002da8 <udd_ep_run+0x5c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002d9c:	e6 14 00 01 	andh	r4,0x1,COH
80002da0:	c0 21       	brne	80002da4 <udd_ep_run+0x58>
      cpu_irq_enable();
80002da2:	d5 03       	csrf	0x10
   }

	barrier();
80002da4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80002da8:	7c 06       	ld.w	r6,lr[0x0]
80002daa:	30 13       	mov	r3,1
80002dac:	ed d3 d3 e1 	bfins	r6,r3,0x1f,0x1
80002db0:	9d 06       	st.w	lr[0x0],r6
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002db2:	e6 14 00 01 	andh	r4,0x1,COH
80002db6:	c0 21       	brne	80002dba <udd_ep_run+0x6e>
      cpu_irq_enable();
80002db8:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80002dba:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
80002dbc:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
80002dbe:	30 0a       	mov	r10,0
80002dc0:	9d 3a       	st.w	lr[0xc],r10
	ptr_job->call_trans = callback;
80002dc2:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
80002dc4:	7c 08       	ld.w	r8,lr[0x0]
80002dc6:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
	ptr_job->b_use_out_cache_buffer = false;
80002dca:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80002dce:	9d 08       	st.w	lr[0x0],r8

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
80002dd0:	f4 0c 18 00 	cp.b	r12,r10
80002dd4:	c1 95       	brlt	80002e06 <udd_ep_run+0xba>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
80002dd6:	e0 37 ef 00 	sub	r7,126720
80002dda:	6e 08       	ld.w	r8,r7[0x0]
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->b_use_out_cache_buffer = false;

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
80002ddc:	f1 d8 c1 62 	bfextu	r8,r8,0xb,0x2
80002de0:	58 18       	cp.w	r8,1
80002de2:	c1 21       	brne	80002e06 <udd_ep_run+0xba>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
			&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
80002de4:	6e 08       	ld.w	r8,r7[0x0]
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->b_use_out_cache_buffer = false;

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
80002de6:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
80002dea:	30 8a       	mov	r10,8
80002dec:	f4 08 09 48 	lsl	r8,r10,r8
80002df0:	20 18       	sub	r8,1
80002df2:	f1 e9 00 09 	and	r9,r8,r9
80002df6:	c0 80       	breq	80002e06 <udd_ep_run+0xba>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
			&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
		// The user must use a buffer size modulo endpoint size
		// for an isochronous IN endpoint
		ptr_job->busy = false;
80002df8:	7c 08       	ld.w	r8,lr[0x0]
80002dfa:	30 0c       	mov	r12,0
80002dfc:	f1 dc d3 e1 	bfins	r8,r12,0x1f,0x1
80002e00:	9d 08       	st.w	lr[0x0],r8
		return false;
80002e02:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	}

	// Initialize value to simulate a empty transfer
	udd_udesc_rst_buf0_ctn(ep_num);
80002e06:	48 d8       	lddpc	r8,80002e38 <udd_ep_run+0xec>
80002e08:	a3 75       	lsl	r5,0x3
80002e0a:	2f f5       	sub	r5,-1
80002e0c:	f0 05 03 29 	ld.w	r9,r8[r5<<0x2]
80002e10:	30 0a       	mov	r10,0
80002e12:	f3 da d0 0f 	bfins	r9,r10,0x0,0xf
80002e16:	f0 05 09 29 	st.w	r8[r5<<0x2],r9
	udd_udesc_rst_buf0_size(ep_num);
80002e1a:	f0 05 03 29 	ld.w	r9,r8[r5<<0x2]
80002e1e:	f3 da d2 0f 	bfins	r9,r10,0x10,0xf
80002e22:	f0 05 09 29 	st.w	r8[r5<<0x2],r9

	// Request next transfer
	udd_ep_trans_done(ep);
80002e26:	f0 1f 00 06 	mcall	80002e3c <udd_ep_run+0xf0>
80002e2a:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
	return true;
80002e2e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80002e32:	00 00       	add	r0,r0
80002e34:	00 00       	add	r0,r0
80002e36:	01 04       	ld.w	r4,r0++
80002e38:	00 00       	add	r0,r0
80002e3a:	01 40       	ld.w	r0,--r0
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	2a 4c       	sub	r12,-92

80002e40 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80002e40:	eb cd 40 e0 	pushm	r5-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e44:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002e48:	d3 03       	ssrf	0x10
	static bool b_shortpacket = false;
	uint16_t nb_remain;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80002e4a:	30 1a       	mov	r10,1
80002e4c:	fe 69 12 20 	mov	r9,-126432
80002e50:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e52:	e6 18 00 01 	andh	r8,0x1,COH
80002e56:	c0 21       	brne	80002e5a <udd_ctrl_in_sent+0x1a>
      cpu_irq_enable();
80002e58:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002e5a:	4c 08       	lddpc	r8,80002f58 <udd_ctrl_in_sent+0x118>
80002e5c:	70 08       	ld.w	r8,r8[0x0]
80002e5e:	58 38       	cp.w	r8,3
80002e60:	c0 71       	brne	80002e6e <udd_ctrl_in_sent+0x2e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80002e62:	f0 1f 00 3f 	mcall	80002f5c <udd_ctrl_in_sent+0x11c>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002e66:	f0 1f 00 3f 	mcall	80002f60 <udd_ctrl_in_sent+0x120>
		return;
80002e6a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80002e6e:	4b e8       	lddpc	r8,80002f64 <udd_ctrl_in_sent+0x124>
80002e70:	90 08       	ld.sh	r8,r8[0x0]
80002e72:	4b e9       	lddpc	r9,80002f68 <udd_ctrl_in_sent+0x128>
80002e74:	92 67       	ld.sh	r7,r9[0xc]
80002e76:	10 17       	sub	r7,r8
80002e78:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002e7a:	c3 01       	brne	80002eda <udd_ctrl_in_sent+0x9a>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002e7c:	4b c9       	lddpc	r9,80002f6c <udd_ctrl_in_sent+0x12c>
80002e7e:	92 0a       	ld.sh	r10,r9[0x0]
80002e80:	f4 08 00 08 	add	r8,r10,r8
80002e84:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80002e86:	4b 99       	lddpc	r9,80002f68 <udd_ctrl_in_sent+0x128>
80002e88:	92 39       	ld.sh	r9,r9[0x6]
80002e8a:	f0 09 19 00 	cp.h	r9,r8
80002e8e:	c0 70       	breq	80002e9c <udd_ctrl_in_sent+0x5c>
80002e90:	4b 88       	lddpc	r8,80002f70 <udd_ctrl_in_sent+0x130>
80002e92:	11 89       	ld.ub	r9,r8[0x0]
80002e94:	30 08       	mov	r8,0
80002e96:	f0 09 18 00 	cp.b	r9,r8
80002e9a:	c1 50       	breq	80002ec4 <udd_ctrl_in_sent+0x84>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002e9c:	30 49       	mov	r9,4
80002e9e:	4a f8       	lddpc	r8,80002f58 <udd_ctrl_in_sent+0x118>
80002ea0:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ea2:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002ea6:	d3 03       	ssrf	0x10

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002ea8:	31 08       	mov	r8,16
80002eaa:	fe 6a 11 60 	mov	r10,-126624
80002eae:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80002eb0:	fe 6a 11 f0 	mov	r10,-126480
80002eb4:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002eb6:	12 98       	mov	r8,r9
80002eb8:	e6 18 00 01 	andh	r8,0x1,COH
80002ebc:	c0 21       	brne	80002ec0 <udd_ctrl_in_sent+0x80>
      cpu_irq_enable();
80002ebe:	d5 03       	csrf	0x10
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002ec0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
80002ec4:	4a 98       	lddpc	r8,80002f68 <udd_ctrl_in_sent+0x128>
80002ec6:	70 5c       	ld.w	r12,r8[0x14]
80002ec8:	58 0c       	cp.w	r12,0
80002eca:	c1 20       	breq	80002eee <udd_ctrl_in_sent+0xae>
80002ecc:	5d 1c       	icall	r12
80002ece:	c1 00       	breq	80002eee <udd_ctrl_in_sent+0xae>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0, this allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80002ed0:	30 09       	mov	r9,0
80002ed2:	4a 58       	lddpc	r8,80002f64 <udd_ctrl_in_sent+0x124>
80002ed4:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002ed6:	4a 58       	lddpc	r8,80002f68 <udd_ctrl_in_sent+0x128>
80002ed8:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
80002eda:	33 f8       	mov	r8,63
80002edc:	f0 07 19 00 	cp.h	r7,r8
80002ee0:	e0 88 00 07 	brls	80002eee <udd_ctrl_in_sent+0xae>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
80002ee4:	30 09       	mov	r9,0
80002ee6:	4a 38       	lddpc	r8,80002f70 <udd_ctrl_in_sent+0x130>
80002ee8:	b0 89       	st.b	r8[0x0],r9
80002eea:	34 07       	mov	r7,64
80002eec:	c0 48       	rjmp	80002ef4 <udd_ctrl_in_sent+0xb4>
	} else {
		b_shortpacket = true;
80002eee:	30 19       	mov	r9,1
80002ef0:	4a 08       	lddpc	r8,80002f70 <udd_ctrl_in_sent+0x130>
80002ef2:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ef4:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002ef8:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80002efa:	fe 68 11 30 	mov	r8,-126672
80002efe:	70 08       	ld.w	r8,r8[0x0]
80002f00:	e2 18 00 02 	andl	r8,0x2,COH
80002f04:	c0 a0       	breq	80002f18 <udd_ctrl_in_sent+0xd8>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f06:	e6 16 00 01 	andh	r6,0x1,COH
80002f0a:	c0 21       	brne	80002f0e <udd_ctrl_in_sent+0xce>
      cpu_irq_enable();
80002f0c:	d5 03       	csrf	0x10
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002f0e:	30 49       	mov	r9,4
80002f10:	49 28       	lddpc	r8,80002f58 <udd_ctrl_in_sent+0x118>
80002f12:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
80002f14:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}
	// Write quickly the IN data
	memcpy(udd_ctrl_buffer,
80002f18:	49 35       	lddpc	r5,80002f64 <udd_ctrl_in_sent+0x124>
80002f1a:	8a 88       	ld.uh	r8,r5[0x0]
80002f1c:	49 39       	lddpc	r9,80002f68 <udd_ctrl_in_sent+0x128>
80002f1e:	72 2b       	ld.w	r11,r9[0x8]
80002f20:	0e 9a       	mov	r10,r7
80002f22:	5c 7a       	castu.h	r10
80002f24:	10 0b       	add	r11,r8
80002f26:	49 4c       	lddpc	r12,80002f74 <udd_ctrl_in_sent+0x134>
80002f28:	f0 1f 00 14 	mcall	80002f78 <udd_ctrl_in_sent+0x138>
			udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,
			nb_remain);
	udd_ctrl_payload_nb_trans += nb_remain;
80002f2c:	8a 08       	ld.sh	r8,r5[0x0]
80002f2e:	0e 08       	add	r8,r7
80002f30:	aa 08       	st.h	r5[0x0],r8
	udd_udesc_set_buf0_ctn(0, nb_remain);
80002f32:	49 38       	lddpc	r8,80002f7c <udd_ctrl_in_sent+0x13c>
80002f34:	70 19       	ld.w	r9,r8[0x4]
80002f36:	f3 d7 d0 0f 	bfins	r9,r7,0x0,0xf
80002f3a:	91 19       	st.w	r8[0x4],r9

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80002f3c:	30 18       	mov	r8,1
80002f3e:	fe 69 11 60 	mov	r9,-126624
80002f42:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80002f44:	fe 69 11 f0 	mov	r9,-126480
80002f48:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f4a:	e6 16 00 01 	andh	r6,0x1,COH
80002f4e:	c0 21       	brne	80002f52 <udd_ctrl_in_sent+0x112>
      cpu_irq_enable();
80002f50:	d5 03       	csrf	0x10
   }

	barrier();
80002f52:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002f56:	00 00       	add	r0,r0
80002f58:	00 00       	add	r0,r0
80002f5a:	01 c8       	ld.ub	r8,r0[0x4]
80002f5c:	80 00       	ld.sh	r0,r0[0x0]
80002f5e:	28 48       	sub	r8,-124
80002f60:	80 00       	ld.sh	r0,r0[0x0]
80002f62:	28 08       	sub	r8,-128
80002f64:	00 00       	add	r0,r0
80002f66:	01 c2       	ld.ub	r2,r0[0x4]
80002f68:	00 00       	add	r0,r0
80002f6a:	05 a8       	ld.ub	r8,r2[0x2]
80002f6c:	00 00       	add	r0,r0
80002f6e:	01 02       	ld.w	r2,r0++
80002f70:	00 00       	add	r0,r0
80002f72:	01 c4       	ld.ub	r4,r0[0x4]
80002f74:	00 00       	add	r0,r0
80002f76:	05 c0       	ld.ub	r0,r2[0x4]
80002f78:	80 00       	ld.sh	r0,r0[0x0]
80002f7a:	4c 48       	lddpc	r8,80003088 <udd_enable+0x7c>
80002f7c:	00 00       	add	r0,r0
80002f7e:	01 40       	ld.w	r0,--r0

80002f80 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80002f80:	eb cd 40 e0 	pushm	r5-r7,lr
	uint8_t ep_addr = ep & USB_EP_ADDR_MASK;
80002f84:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4
	if (Is_udd_endpoint_enabled(ep_addr)) {
80002f88:	fe 68 10 00 	mov	r8,-126976
80002f8c:	70 7e       	ld.w	lr,r8[0x1c]
80002f8e:	30 18       	mov	r8,1
80002f90:	f0 09 09 48 	lsl	r8,r8,r9
80002f94:	f1 ee 00 0e 	and	lr,r8,lr
80002f98:	c0 30       	breq	80002f9e <udd_ep_alloc+0x1e>
80002f9a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
	// Check endpoint type
	Assert(((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS)
			|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_BULK)
			|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_INTERRUPT));

	udd_configure_endpoint(ep_addr, bmAttributes,
80002f9e:	a3 69       	lsl	r9,0x2
80002fa0:	fe 67 11 00 	mov	r7,-126720
80002fa4:	f2 07 00 0e 	add	lr,r9,r7
80002fa8:	7c 06       	ld.w	r6,lr[0x0]
80002faa:	30 07       	mov	r7,0
80002fac:	e0 65 01 00 	mov	r5,256
80002fb0:	f8 07 18 00 	cp.b	r7,r12
80002fb4:	ea 07 17 90 	movgt	r7,r5
80002fb8:	f9 b7 0a 00 	movle	r7,0
80002fbc:	5c 7a       	castu.h	r10
80002fbe:	30 8c       	mov	r12,8
80002fc0:	f4 0c 0c 4a 	max	r10,r10,r12
80002fc4:	e0 6c 04 00 	mov	r12,1024
80002fc8:	f4 0c 0d 4a 	min	r10,r10,r12
80002fcc:	a1 7a       	lsl	r10,0x1
80002fce:	20 1a       	sub	r10,1
80002fd0:	f4 0a 12 00 	clz	r10,r10
80002fd4:	ab 7b       	lsl	r11,0xb
80002fd6:	e2 1b 18 00 	andl	r11,0x1800,COH
80002fda:	16 47       	or	r7,r11
80002fdc:	f4 0c 11 1c 	rsub	r12,r10,28
80002fe0:	ef ec 10 4c 	or	r12,r7,r12<<0x4
80002fe4:	e2 1c 19 74 	andl	r12,0x1974,COH
80002fe8:	0c 9a       	mov	r10,r6
80002fea:	e0 1a e6 8b 	andl	r10,0xe68b
80002fee:	f9 ea 10 0a 	or	r10,r12,r10
80002ff2:	9d 0a       	st.w	lr[0x0],r10
			((ep & USB_EP_DIR_IN) ? 1 : 0),
			MaxEndpointSize, AVR32_USBC_UECFG0_EPBK_SINGLE);

	udd_enable_busy_bank0(ep_addr);
80002ff4:	e0 39 ee 10 	sub	r9,126480
80002ff8:	fc 1a 01 00 	movh	r10,0x100
80002ffc:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(ep_addr);
80002ffe:	fe 69 10 00 	mov	r9,-126976
80003002:	72 7a       	ld.w	r10,r9[0x1c]
80003004:	14 48       	or	r8,r10
80003006:	93 78       	st.w	r9[0x1c],r8
80003008:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1

8000300c <udd_enable>:
#endif
}


void udd_enable(void)
{
8000300c:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003010:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003014:	d3 03       	ssrf	0x10
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80003016:	f0 1f 00 37 	mcall	800030f0 <udd_enable+0xe4>

	// Here, only the device mode is possible,
	// USBC interrupt is linked to UDD interrupt
	irq_register_handler(
8000301a:	30 0a       	mov	r10,0
8000301c:	e0 6b 01 00 	mov	r11,256
80003020:	4b 5c       	lddpc	r12,800030f4 <udd_enable+0xe8>
80003022:	f0 1f 00 36 	mcall	800030f8 <udd_enable+0xec>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80003026:	fe 78 04 00 	mov	r8,-64512
8000302a:	f0 f9 01 88 	ld.w	r9,r8[392]
8000302e:	a1 a9       	sbr	r9,0x0
80003030:	f1 49 01 88 	st.w	r8[392],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80003034:	fe 68 18 00 	mov	r8,-124928
80003038:	70 09       	ld.w	r9,r8[0x0]
8000303a:	b9 c9       	cbr	r9,0x18
8000303c:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
8000303e:	70 09       	ld.w	r9,r8[0x0]
80003040:	b9 b9       	sbr	r9,0x19
80003042:	91 09       	st.w	r8[0x0],r9
#endif

	// Enable USB hardware
	otg_enable_pad();
80003044:	70 09       	ld.w	r9,r8[0x0]
80003046:	ad a9       	sbr	r9,0xc
80003048:	91 09       	st.w	r8[0x0],r9
	otg_enable();
8000304a:	70 09       	ld.w	r9,r8[0x0]
8000304c:	af b9       	sbr	r9,0xf
8000304e:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80003050:	70 09       	ld.w	r9,r8[0x0]
80003052:	af c9       	cbr	r9,0xe
80003054:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80003056:	70 08       	ld.w	r8,r8[0x0]

	memset((uint8_t *) udd_g_ep_table, 0, sizeof(udd_g_ep_table));
80003058:	4a 97       	lddpc	r7,800030fc <udd_enable+0xf0>
8000305a:	e0 6a 00 80 	mov	r10,128
8000305e:	30 0b       	mov	r11,0
80003060:	0e 9c       	mov	r12,r7
80003062:	f0 1f 00 28 	mcall	80003100 <udd_enable+0xf4>
	otg_register_desc_tab(udd_g_ep_table);
80003066:	fe 68 10 00 	mov	r8,-126976
8000306a:	f0 f9 08 30 	ld.w	r9,r8[2096]
8000306e:	f1 47 08 30 	st.w	r8[2096],r7
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	{
		uint8_t i;
		for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_job[i].busy = false;
80003072:	4a 59       	lddpc	r9,80003104 <udd_enable+0xf8>
80003074:	72 0b       	ld.w	r11,r9[0x0]
80003076:	30 0a       	mov	r10,0
80003078:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
8000307c:	93 0b       	st.w	r9[0x0],r11
8000307e:	72 5b       	ld.w	r11,r9[0x14]
80003080:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
80003084:	93 5b       	st.w	r9[0x14],r11
80003086:	72 ab       	ld.w	r11,r9[0x28]
80003088:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
8000308c:	93 ab       	st.w	r9[0x28],r11

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
8000308e:	70 09       	ld.w	r9,r8[0x0]
80003090:	ad c9       	cbr	r9,0xc
80003092:	91 09       	st.w	r8[0x0],r9
#   ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#   else
	udd_high_speed_disable();
80003094:	70 09       	ld.w	r9,r8[0x0]
80003096:	e8 19 0c 00 	orl	r9,0xc00
8000309a:	91 09       	st.w	r8[0x0],r9
#   endif
#endif
	otg_ack_vbus_transition();
8000309c:	30 29       	mov	r9,2
8000309e:	fe 68 18 08 	mov	r8,-124920
800030a2:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
800030a4:	fe 68 18 04 	mov	r8,-124924
800030a8:	70 08       	ld.w	r8,r8[0x0]
800030aa:	e2 18 08 00 	andl	r8,0x800,COH
800030ae:	c0 40       	breq	800030b6 <udd_enable+0xaa>
		otg_raise_vbus_transition();
800030b0:	fe 68 18 0c 	mov	r8,-124916
800030b4:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
800030b6:	fe 68 18 00 	mov	r8,-124928
800030ba:	70 09       	ld.w	r9,r8[0x0]
800030bc:	a1 b9       	sbr	r9,0x1
800030be:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800030c0:	70 09       	ld.w	r9,r8[0x0]
800030c2:	af a9       	sbr	r9,0xe
800030c4:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
800030c6:	30 09       	mov	r9,0
800030c8:	49 08       	lddpc	r8,80003108 <udd_enable+0xfc>
800030ca:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800030cc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800030d0:	d3 03       	ssrf	0x10
800030d2:	48 f8       	lddpc	r8,8000310c <udd_enable+0x100>
800030d4:	11 ea       	ld.ub	r10,r8[0x6]
800030d6:	2f fa       	sub	r10,-1
800030d8:	b0 ea       	st.b	r8[0x6],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800030da:	12 98       	mov	r8,r9
800030dc:	e6 18 00 01 	andh	r8,0x1,COH
800030e0:	c0 21       	brne	800030e4 <udd_enable+0xd8>
      cpu_irq_enable();
800030e2:	d5 03       	csrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800030e4:	e6 16 00 01 	andh	r6,0x1,COH
800030e8:	c0 21       	brne	800030ec <udd_enable+0xe0>
      cpu_irq_enable();
800030ea:	d5 03       	csrf	0x10
	udd_attach();
#  endif	
#endif	

	cpu_irq_restore(flags);
}
800030ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	37 b4       	mov	r4,123
800030f4:	80 00       	ld.sh	r0,r0[0x0]
800030f6:	31 10       	mov	r0,17
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	3a 0c       	mov	r12,-96
800030fc:	00 00       	add	r0,r0
800030fe:	01 40       	ld.w	r0,--r0
80003100:	80 00       	ld.sh	r0,r0[0x0]
80003102:	4d 90       	lddpc	r0,80003264 <udd_interrupt+0x154>
80003104:	00 00       	add	r0,r0
80003106:	01 04       	ld.w	r4,r0++
80003108:	00 00       	add	r0,r0
8000310a:	01 c0       	ld.ub	r0,r0[0x4]
8000310c:	00 00       	add	r0,r0
8000310e:	06 00       	add	r0,r3

80003110 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#   else
ISR(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#   endif
#endif
{
80003110:	eb cd 40 80 	pushm	r7,lr
	if (Is_udd_sof()) {
80003114:	fe 68 10 04 	mov	r8,-126972
80003118:	70 08       	ld.w	r8,r8[0x0]
8000311a:	e2 18 00 04 	andl	r8,0x4,COH
8000311e:	c0 90       	breq	80003130 <udd_interrupt+0x20>
		udd_ack_sof();
80003120:	30 49       	mov	r9,4
80003122:	fe 68 10 08 	mov	r8,-126968
80003126:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80003128:	f0 1f 01 2f 	mcall	800035e4 <udd_interrupt+0x4d4>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
8000312c:	e0 8f 02 4d 	bral	800035c6 <udd_interrupt+0x4b6>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
80003130:	fe 68 10 00 	mov	r8,-126976
80003134:	70 18       	ld.w	r8,r8[0x4]
80003136:	e2 18 10 00 	andl	r8,0x1000,COH
8000313a:	e0 80 01 72 	breq	8000341e <udd_interrupt+0x30e>
		return false; // No interrupt events on control endpoint
	}

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000313e:	fe 68 12 20 	mov	r8,-126432
80003142:	31 09       	mov	r9,16
80003144:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80003146:	30 89       	mov	r9,8
80003148:	91 09       	st.w	r8[0x0],r9

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000314a:	fe 68 11 30 	mov	r8,-126672
8000314e:	70 08       	ld.w	r8,r8[0x0]
80003150:	e2 18 00 04 	andl	r8,0x4,COH
80003154:	c7 60       	breq	80003240 <udd_interrupt+0x130>

static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80003156:	fe f8 04 92 	ld.w	r8,pc[1170]
8000315a:	70 08       	ld.w	r8,r8[0x0]
8000315c:	58 08       	cp.w	r8,0
8000315e:	c0 50       	breq	80003168 <udd_interrupt+0x58>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80003160:	f0 1f 01 23 	mcall	800035ec <udd_interrupt+0x4dc>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80003164:	f0 1f 01 23 	mcall	800035f0 <udd_interrupt+0x4e0>
	}
	// Fill setup request structure
	if (8 != udd_udesc_get_buf0_ctn(0)) {
80003168:	fe f8 04 8c 	ld.w	r8,pc[1164]
8000316c:	70 18       	ld.w	r8,r8[0x4]
8000316e:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80003172:	58 88       	cp.w	r8,8
80003174:	c0 90       	breq	80003186 <udd_interrupt+0x76>
		udd_ctrl_stall_data();
80003176:	f0 1f 01 21 	mcall	800035f8 <udd_interrupt+0x4e8>
		udd_ack_setup_received(0);
8000317a:	30 49       	mov	r9,4
8000317c:	fe 68 11 60 	mov	r8,-126624
80003180:	91 09       	st.w	r8[0x0],r9
80003182:	e0 8f 02 22 	bral	800035c6 <udd_interrupt+0x4b6>
		return; // Error data number doesn't correspond to SETUP packet
	}
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
80003186:	fe f7 04 76 	ld.w	r7,pc[1142]
8000318a:	30 8a       	mov	r10,8
8000318c:	fe fb 04 74 	ld.w	r11,pc[1140]
80003190:	0e 9c       	mov	r12,r7
80003192:	f0 1f 01 1d 	mcall	80003604 <udd_interrupt+0x4f4>

	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80003196:	8e 18       	ld.sh	r8,r7[0x2]
80003198:	5c c8       	swap.bh	r8
8000319a:	ae 18       	st.h	r7[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000319c:	8e 28       	ld.sh	r8,r7[0x4]
8000319e:	5c c8       	swap.bh	r8
800031a0:	ae 28       	st.h	r7[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
800031a2:	8e 38       	ld.sh	r8,r7[0x6]
800031a4:	5c c8       	swap.bh	r8
800031a6:	ae 38       	st.h	r7[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
800031a8:	f0 1f 01 18 	mcall	80003608 <udd_interrupt+0x4f8>
800031ac:	c0 91       	brne	800031be <udd_interrupt+0xae>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
800031ae:	f0 1f 01 13 	mcall	800035f8 <udd_interrupt+0x4e8>
		udd_ack_setup_received(0);
800031b2:	30 49       	mov	r9,4
800031b4:	fe 68 11 60 	mov	r8,-126624
800031b8:	91 09       	st.w	r8[0x0],r9
800031ba:	e0 8f 02 06 	bral	800035c6 <udd_interrupt+0x4b6>
		return;
	}
	udd_ack_setup_received(0);
800031be:	30 49       	mov	r9,4
800031c0:	fe 68 11 60 	mov	r8,-126624
800031c4:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
800031c6:	fe f8 04 36 	ld.w	r8,pc[1078]
800031ca:	11 89       	ld.ub	r9,r8[0x0]
800031cc:	30 08       	mov	r8,0
800031ce:	f0 09 18 00 	cp.b	r9,r8
800031d2:	c1 04       	brge	800031f2 <udd_interrupt+0xe2>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800031d4:	30 08       	mov	r8,0
800031d6:	fe f9 04 36 	ld.w	r9,pc[1078]
800031da:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800031dc:	fe f9 04 34 	ld.w	r9,pc[1076]
800031e0:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800031e2:	30 29       	mov	r9,2
800031e4:	fe f8 04 04 	ld.w	r8,pc[1028]
800031e8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800031ea:	f0 1f 01 0b 	mcall	80003614 <udd_interrupt+0x504>
800031ee:	e0 8f 01 ec 	bral	800035c6 <udd_interrupt+0x4b6>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800031f2:	fe f8 04 0a 	ld.w	r8,pc[1034]
800031f6:	90 39       	ld.sh	r9,r8[0x6]
800031f8:	30 08       	mov	r8,0
800031fa:	f0 09 19 00 	cp.h	r9,r8
800031fe:	c0 51       	brne	80003208 <udd_interrupt+0xf8>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80003200:	f0 1f 01 06 	mcall	80003618 <udd_interrupt+0x508>
80003204:	e0 8f 01 e1 	bral	800035c6 <udd_interrupt+0x4b6>
			return;
		}

		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003208:	30 08       	mov	r8,0
8000320a:	fe f9 04 02 	ld.w	r9,pc[1026]
8000320e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003210:	fe f9 04 00 	ld.w	r9,pc[1024]
80003214:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80003216:	30 19       	mov	r9,1
80003218:	fe f8 03 d0 	ld.w	r8,pc[976]
8000321c:	91 09       	st.w	r8[0x0],r9

		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000321e:	31 08       	mov	r8,16
80003220:	fe 69 11 60 	mov	r9,-126624
80003224:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003226:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000322a:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
8000322c:	fe 6a 11 f0 	mov	r10,-126480
80003230:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003232:	12 98       	mov	r8,r9
80003234:	e6 18 00 01 	andh	r8,0x1,COH
80003238:	c0 21       	brne	8000323c <udd_interrupt+0x12c>
      cpu_irq_enable();
8000323a:	d5 03       	csrf	0x10
   }

	barrier();
8000323c:	e0 8f 01 c5 	bral	800035c6 <udd_interrupt+0x4b6>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_out_received(0)) {
80003240:	fe 68 11 30 	mov	r8,-126672
80003244:	70 08       	ld.w	r8,r8[0x0]
80003246:	e2 18 00 02 	andl	r8,0x2,COH
8000324a:	e0 80 00 9d 	breq	80003384 <udd_interrupt+0x274>
static void udd_ctrl_out_received(void)
{
	irqflags_t flags;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
8000324e:	fe f8 03 9a 	ld.w	r8,pc[922]
80003252:	70 08       	ld.w	r8,r8[0x0]
80003254:	58 18       	cp.w	r8,1
80003256:	c1 10       	breq	80003278 <udd_interrupt+0x168>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state) ||
80003258:	58 28       	cp.w	r8,2
8000325a:	5f 09       	sreq	r9
8000325c:	58 48       	cp.w	r8,4
8000325e:	5f 08       	sreq	r8
80003260:	f3 e8 10 08 	or	r8,r9,r8
80003264:	c0 40       	breq	8000326c <udd_interrupt+0x15c>
				(UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80003266:	f0 1f 00 e2 	mcall	800035ec <udd_interrupt+0x4dc>
8000326a:	c0 38       	rjmp	80003270 <udd_interrupt+0x160>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000326c:	f0 1f 00 e3 	mcall	800035f8 <udd_interrupt+0x4e8>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003270:	f0 1f 00 e0 	mcall	800035f0 <udd_interrupt+0x4e0>
80003274:	e0 8f 01 a9 	bral	800035c6 <udd_interrupt+0x4b6>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_udesc_get_buf0_ctn(0);
80003278:	fe f8 03 7c 	ld.w	r8,pc[892]
8000327c:	70 17       	ld.w	r7,r8[0x4]
8000327e:	ef d7 c0 0f 	bfextu	r7,r7,0x0,0xf
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80003282:	fe f8 03 7a 	ld.w	r8,pc[890]
80003286:	90 69       	ld.sh	r9,r8[0xc]
80003288:	fe f8 03 88 	ld.w	r8,pc[904]
8000328c:	90 08       	ld.sh	r8,r8[0x0]
8000328e:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80003292:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003296:	ee 0a 00 0a 	add	r10,r7,r10
8000329a:	14 3b       	cp.w	r11,r10
8000329c:	c0 44       	brge	800032a4 <udd_interrupt+0x194>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
8000329e:	10 19       	sub	r9,r8
800032a0:	ef d9 b0 10 	bfexts	r7,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
800032a4:	5c 78       	castu.h	r8
800032a6:	fe f9 03 56 	ld.w	r9,pc[854]
800032aa:	72 2c       	ld.w	r12,r9[0x8]
800032ac:	0e 9a       	mov	r10,r7
800032ae:	5c 7a       	castu.h	r10
800032b0:	fe fb 03 50 	ld.w	r11,pc[848]
800032b4:	10 0c       	add	r12,r8
800032b6:	f0 1f 00 d4 	mcall	80003604 <udd_interrupt+0x4f4>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
800032ba:	fe f9 03 56 	ld.w	r9,pc[854]
800032be:	92 08       	ld.sh	r8,r9[0x0]
800032c0:	0e 08       	add	r8,r7
800032c2:	5c 88       	casts.h	r8
800032c4:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
800032c6:	34 09       	mov	r9,64
800032c8:	f2 07 19 00 	cp.h	r7,r9
800032cc:	c0 e1       	brne	800032e8 <udd_interrupt+0x1d8>
800032ce:	fe f9 03 2e 	ld.w	r9,pc[814]
800032d2:	92 ba       	ld.uh	r10,r9[0x6]
800032d4:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
800032d8:	fe f9 03 34 	ld.w	r9,pc[820]
800032dc:	92 89       	ld.uh	r9,r9[0x0]
800032de:	f6 09 00 09 	add	r9,r11,r9
800032e2:	12 3a       	cp.w	r10,r9
800032e4:	e0 89 00 18 	brgt	80003314 <udd_interrupt+0x204>
			(udd_g_ctrlreq.req.wLength <=
			(udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
800032e8:	fe f9 03 14 	ld.w	r9,pc[788]
800032ec:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
800032ee:	72 5c       	ld.w	r12,r9[0x14]
800032f0:	58 0c       	cp.w	r12,0
800032f2:	c0 a0       	breq	80003306 <udd_interrupt+0x1f6>
			if (!udd_g_ctrlreq.over_under_run()) {
800032f4:	5d 1c       	icall	r12
800032f6:	c0 81       	brne	80003306 <udd_interrupt+0x1f6>
				// Stall ZLP
				udd_ctrl_stall_data();
800032f8:	f0 1f 00 c0 	mcall	800035f8 <udd_interrupt+0x4e8>

				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
800032fc:	30 29       	mov	r9,2
800032fe:	fe 68 11 60 	mov	r8,-126624
80003302:	91 09       	st.w	r8[0x0],r9
80003304:	c6 19       	rjmp	800035c6 <udd_interrupt+0x4b6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80003306:	30 29       	mov	r9,2
80003308:	fe 68 11 60 	mov	r8,-126624
8000330c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000330e:	f0 1f 00 c3 	mcall	80003618 <udd_interrupt+0x508>
80003312:	c5 a9       	rjmp	800035c6 <udd_interrupt+0x4b6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80003314:	fe f9 02 e8 	ld.w	r9,pc[744]
80003318:	92 69       	ld.sh	r9,r9[0xc]
8000331a:	f0 09 19 00 	cp.h	r9,r8
8000331e:	c2 11       	brne	80003360 <udd_interrupt+0x250>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80003320:	fe f8 02 dc 	ld.w	r8,pc[732]
80003324:	70 5c       	ld.w	r12,r8[0x14]
80003326:	58 0c       	cp.w	r12,0
80003328:	c0 81       	brne	80003338 <udd_interrupt+0x228>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000332a:	f0 1f 00 b4 	mcall	800035f8 <udd_interrupt+0x4e8>

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000332e:	30 29       	mov	r9,2
80003330:	fe 68 11 60 	mov	r8,-126624
80003334:	91 09       	st.w	r8[0x0],r9
80003336:	c4 89       	rjmp	800035c6 <udd_interrupt+0x4b6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80003338:	5d 1c       	icall	r12
8000333a:	c0 81       	brne	8000334a <udd_interrupt+0x23a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
8000333c:	f0 1f 00 af 	mcall	800035f8 <udd_interrupt+0x4e8>

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003340:	30 29       	mov	r9,2
80003342:	fe 68 11 60 	mov	r8,-126624
80003346:	91 09       	st.w	r8[0x0],r9
80003348:	c3 f9       	rjmp	800035c6 <udd_interrupt+0x4b6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000334a:	fe f9 02 c2 	ld.w	r9,pc[706]
8000334e:	fe f8 02 c2 	ld.w	r8,pc[706]
80003352:	90 0b       	ld.sh	r11,r8[0x0]
80003354:	92 0a       	ld.sh	r10,r9[0x0]
80003356:	f6 0a 00 0a 	add	r10,r11,r10
8000335a:	b2 0a       	st.h	r9[0x0],r10

		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000335c:	30 09       	mov	r9,0
8000335e:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80003360:	fe 69 11 60 	mov	r9,-126624
80003364:	30 28       	mov	r8,2
80003366:	93 08       	st.w	r9[0x0],r8

	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80003368:	31 08       	mov	r8,16
8000336a:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000336c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003370:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80003372:	fe 6a 11 f0 	mov	r10,-126480
80003376:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003378:	12 98       	mov	r8,r9
8000337a:	e6 18 00 01 	andh	r8,0x1,COH
8000337e:	c0 21       	brne	80003382 <udd_interrupt+0x272>
      cpu_irq_enable();
80003380:	d5 03       	csrf	0x10
   }

	barrier();
80003382:	c2 29       	rjmp	800035c6 <udd_interrupt+0x4b6>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80003384:	fe 68 11 30 	mov	r8,-126672
80003388:	70 08       	ld.w	r8,r8[0x0]
8000338a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000338e:	c0 a0       	breq	800033a2 <udd_interrupt+0x292>
80003390:	fe 68 11 c0 	mov	r8,-126528
80003394:	70 08       	ld.w	r8,r8[0x0]
80003396:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000339a:	c0 40       	breq	800033a2 <udd_interrupt+0x292>
		// IN packet sent
		udd_ctrl_in_sent();
8000339c:	f0 1f 00 9e 	mcall	80003614 <udd_interrupt+0x504>
800033a0:	c1 39       	rjmp	800035c6 <udd_interrupt+0x4b6>
		return true;
	}
	if (Is_udd_nak_out(0)) {
800033a2:	fe 68 11 30 	mov	r8,-126672
800033a6:	70 08       	ld.w	r8,r8[0x0]
800033a8:	e2 18 00 08 	andl	r8,0x8,COH
800033ac:	c1 80       	breq	800033dc <udd_interrupt+0x2cc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
800033ae:	30 89       	mov	r9,8
800033b0:	fe 68 11 60 	mov	r8,-126624
800033b4:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0)) {
800033b6:	fe 68 11 30 	mov	r8,-126672
800033ba:	70 08       	ld.w	r8,r8[0x0]
800033bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033c0:	e0 81 01 03 	brne	800035c6 <udd_interrupt+0x4b6>
	}

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800033c4:	fe f8 02 24 	ld.w	r8,pc[548]
800033c8:	70 08       	ld.w	r8,r8[0x0]
800033ca:	58 38       	cp.w	r8,3
800033cc:	e0 81 00 fd 	brne	800035c6 <udd_interrupt+0x4b6>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
800033d0:	e8 69 00 00 	mov	r9,524288
800033d4:	fe 68 11 f0 	mov	r8,-126480
800033d8:	91 09       	st.w	r8[0x0],r9
800033da:	cf 68       	rjmp	800035c6 <udd_interrupt+0x4b6>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
800033dc:	fe 68 11 30 	mov	r8,-126672
800033e0:	70 08       	ld.w	r8,r8[0x0]
800033e2:	e2 18 00 10 	andl	r8,0x10,COH
800033e6:	c1 c0       	breq	8000341e <udd_interrupt+0x30e>
		// Underflow on IN packet
		udd_ack_nak_in(0);
800033e8:	31 09       	mov	r9,16
800033ea:	fe 68 11 60 	mov	r8,-126624
800033ee:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
800033f0:	fe 68 11 30 	mov	r8,-126672
800033f4:	70 08       	ld.w	r8,r8[0x0]
800033f6:	e2 18 00 02 	andl	r8,0x2,COH
800033fa:	e0 81 00 e6 	brne	800035c6 <udd_interrupt+0x4b6>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
800033fe:	4f b8       	lddpc	r8,800035e8 <udd_interrupt+0x4d8>
80003400:	70 08       	ld.w	r8,r8[0x0]
80003402:	58 18       	cp.w	r8,1
80003404:	c0 41       	brne	8000340c <udd_interrupt+0x2fc>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80003406:	f0 1f 00 85 	mcall	80003618 <udd_interrupt+0x508>
8000340a:	cd e8       	rjmp	800035c6 <udd_interrupt+0x4b6>

	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
8000340c:	58 48       	cp.w	r8,4
8000340e:	e0 81 00 dc 	brne	800035c6 <udd_interrupt+0x4b6>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80003412:	e8 69 00 00 	mov	r9,524288
80003416:	fe 68 11 f0 	mov	r8,-126480
8000341a:	91 09       	st.w	r8[0x0],r9
8000341c:	cd 58       	rjmp	800035c6 <udd_interrupt+0x4b6>
8000341e:	30 08       	mov	r8,0
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
80003420:	fe 6b 10 00 	mov	r11,-126976
80003424:	e0 67 10 00 	mov	r7,4096
		udd_ctrl_send_zlp_in();

	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80003428:	f0 cc ff ff 	sub	r12,r8,-1
8000342c:	5c 5c       	castu.b	r12
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
8000342e:	76 4a       	ld.w	r10,r11[0x10]
#   ifdef FREERTOS_USED
#      include "FreeRTOS.h"
#      include "task.h"
ISR_FREERTOS(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#   else
ISR(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
80003430:	2f f8       	sub	r8,-1
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
80003432:	ee 08 09 49 	lsl	r9,r7,r8
80003436:	f3 ea 00 0a 	and	r10,r9,r10
8000343a:	c0 40       	breq	80003442 <udd_interrupt+0x332>
				|| !Is_udd_endpoint_interrupt(ep)) {
8000343c:	76 1a       	ld.w	r10,r11[0x4]
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
8000343e:	14 69       	and	r9,r10
80003440:	c0 41       	brne	80003448 <udd_interrupt+0x338>
static bool udd_ep_interrupt(void)
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80003442:	58 38       	cp.w	r8,3
80003444:	cf 21       	brne	80003428 <udd_interrupt+0x318>
80003446:	cc 78       	rjmp	800035d4 <udd_interrupt+0x4c4>
		if (!Is_udd_endpoint_interrupt_enabled(ep)
				|| !Is_udd_endpoint_interrupt(ep)) {
			continue;
		}
		ep_addr = Is_udd_endpoint_in(ep) ? (ep | USB_EP_DIR_IN) : ep;
80003448:	f8 08 15 02 	lsl	r8,r12,0x2
8000344c:	e0 38 ef 00 	sub	r8,126720
80003450:	70 08       	ld.w	r8,r8[0x0]
80003452:	e2 18 01 00 	andl	r8,0x100,COH
80003456:	c0 20       	breq	8000345a <udd_interrupt+0x34a>
80003458:	a7 bc       	sbr	r12,0x7
		udd_ep_trans_done(ep_addr);
8000345a:	f0 1f 00 71 	mcall	8000361c <udd_interrupt+0x50c>
8000345e:	cb 48       	rjmp	800035c6 <udd_interrupt+0x4b6>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80003460:	30 87       	mov	r7,8
80003462:	fe 68 10 08 	mov	r8,-126968
80003466:	91 07       	st.w	r8[0x0],r7
#if (USB_DEVICE_MAX_EP != 0)
		// For each endpoint, kill job
		{
			uint8_t i;
			for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
				udd_ep_abort(i);
80003468:	30 1c       	mov	r12,1
8000346a:	f0 1f 00 6e 	mcall	80003620 <udd_interrupt+0x510>
8000346e:	30 2c       	mov	r12,2
80003470:	f0 1f 00 6c 	mcall	80003620 <udd_interrupt+0x510>
80003474:	30 3c       	mov	r12,3
80003476:	f0 1f 00 6b 	mcall	80003620 <udd_interrupt+0x510>
			}
		}
#endif
		// Reset USB Device Stack Core
		udc_reset();
8000347a:	f0 1f 00 6b 	mcall	80003624 <udd_interrupt+0x514>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000347e:	fe 68 10 00 	mov	r8,-126976
80003482:	70 09       	ld.w	r9,r8[0x0]
80003484:	e0 19 ff 80 	andl	r9,0xff80
80003488:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000348a:	70 09       	ld.w	r9,r8[0x0]
8000348c:	a7 b9       	sbr	r9,0x7
8000348e:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80003490:	fe 69 11 00 	mov	r9,-126720
80003494:	72 0a       	ld.w	r10,r9[0x0]
80003496:	34 0b       	mov	r11,64
80003498:	f6 07 0c 47 	max	r7,r11,r7
8000349c:	e0 6b 04 00 	mov	r11,1024
800034a0:	ee 0b 0d 4b 	min	r11,r7,r11
800034a4:	a1 7b       	lsl	r11,0x1
800034a6:	20 1b       	sub	r11,1
800034a8:	f6 0b 12 00 	clz	r11,r11
800034ac:	f6 0b 11 1c 	rsub	r11,r11,28
800034b0:	a5 6b       	lsl	r11,0x4
800034b2:	e2 1b 19 74 	andl	r11,0x1974,COH
800034b6:	e0 1a e6 8b 	andl	r10,0xe68b
800034ba:	f7 ea 10 0a 	or	r10,r11,r10
800034be:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBC_UECFG0_EPBK_SINGLE);

	// Use internal buffer for endpoint control
	udd_udesc_set_buf0_addr(0, udd_ctrl_buffer);
800034c0:	4c d9       	lddpc	r9,800035f4 <udd_interrupt+0x4e4>
800034c2:	4d 0a       	lddpc	r10,80003600 <udd_interrupt+0x4f0>
800034c4:	93 0a       	st.w	r9[0x0],r10

	// don't use multipacket on endpoint control
	udd_udesc_rst_buf0_size(0);
800034c6:	72 1a       	ld.w	r10,r9[0x4]
800034c8:	30 0b       	mov	r11,0
800034ca:	f5 db d2 0f 	bfins	r10,r11,0x10,0xf
800034ce:	93 1a       	st.w	r9[0x4],r10
	udd_enable_endpoint(0);
800034d0:	70 79       	ld.w	r9,r8[0x1c]
800034d2:	a1 a9       	sbr	r9,0x0
800034d4:	91 79       	st.w	r8[0x1c],r9
	udd_disable_busy_bank0(0);
800034d6:	fc 1a 01 00 	movh	r10,0x100
800034da:	fe 69 12 20 	mov	r9,-126432
800034de:	93 0a       	st.w	r9[0x0],r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034e0:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800034e4:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
800034e6:	fe 69 11 f0 	mov	r9,-126480
800034ea:	30 4b       	mov	r11,4
800034ec:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
800034ee:	30 2b       	mov	r11,2
800034f0:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
800034f2:	e0 69 10 00 	mov	r9,4096
800034f6:	91 69       	st.w	r8[0x18],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800034f8:	14 98       	mov	r8,r10
800034fa:	e6 18 00 01 	andh	r8,0x1,COH
800034fe:	c0 21       	brne	80003502 <udd_interrupt+0x3f2>
      cpu_irq_enable();
80003500:	d5 03       	csrf	0x10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
80003502:	f0 1f 00 3c 	mcall	800035f0 <udd_interrupt+0x4e0>
		goto udd_interrupt_end;
80003506:	c6 08       	rjmp	800035c6 <udd_interrupt+0x4b6>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80003508:	fe 68 10 10 	mov	r8,-126960
8000350c:	70 08       	ld.w	r8,r8[0x0]
8000350e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003512:	c1 b0       	breq	80003548 <udd_interrupt+0x438>
80003514:	fe 68 10 04 	mov	r8,-126972
80003518:	70 08       	ld.w	r8,r8[0x0]
8000351a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000351e:	c1 50       	breq	80003548 <udd_interrupt+0x438>
		otg_unfreeze_clock();
80003520:	fe 68 18 00 	mov	r8,-124928
80003524:	70 09       	ld.w	r9,r8[0x0]
80003526:	af c9       	cbr	r9,0xe
80003528:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatically acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000352a:	30 1a       	mov	r10,1
8000352c:	fe 69 10 14 	mov	r9,-126956
80003530:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
80003532:	31 0a       	mov	r10,16
80003534:	fe 69 10 18 	mov	r9,-126952
80003538:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
8000353a:	70 09       	ld.w	r9,r8[0x0]
8000353c:	af a9       	sbr	r9,0xe
8000353e:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80003540:	30 0c       	mov	r12,0
80003542:	f0 1f 00 3a 	mcall	80003628 <udd_interrupt+0x518>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80003546:	c4 08       	rjmp	800035c6 <udd_interrupt+0x4b6>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003548:	fe 68 10 10 	mov	r8,-126960
8000354c:	70 08       	ld.w	r8,r8[0x0]
8000354e:	e2 18 00 10 	andl	r8,0x10,COH
80003552:	c1 d0       	breq	8000358c <udd_interrupt+0x47c>
80003554:	fe 68 10 04 	mov	r8,-126972
80003558:	70 08       	ld.w	r8,r8[0x0]
8000355a:	e2 18 00 10 	andl	r8,0x10,COH
8000355e:	c1 70       	breq	8000358c <udd_interrupt+0x47c>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003560:	fe 68 18 00 	mov	r8,-124928
80003564:	70 09       	ld.w	r9,r8[0x0]
80003566:	af c9       	cbr	r9,0xe
80003568:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
8000356a:	fe 69 18 04 	mov	r9,-124924
8000356e:	72 08       	ld.w	r8,r9[0x0]
80003570:	e2 18 40 00 	andl	r8,0x4000,COH
80003574:	cf d0       	breq	8000356e <udd_interrupt+0x45e>

		// The wakeup interrupt is automatically acked when a suspend occur
		udd_disable_wake_up_interrupt();
80003576:	31 09       	mov	r9,16
80003578:	fe 68 10 14 	mov	r8,-126956
8000357c:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
8000357e:	30 1c       	mov	r12,1
80003580:	fe 68 10 18 	mov	r8,-126952
80003584:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
80003586:	f0 1f 00 29 	mcall	80003628 <udd_interrupt+0x518>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000358a:	c1 e8       	rjmp	800035c6 <udd_interrupt+0x4b6>
	}

	if (Is_otg_vbus_transition()) {
8000358c:	fe 68 18 04 	mov	r8,-124924
80003590:	70 08       	ld.w	r8,r8[0x0]
80003592:	e2 18 00 02 	andl	r8,0x2,COH
80003596:	c1 80       	breq	800035c6 <udd_interrupt+0x4b6>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80003598:	fe 68 18 00 	mov	r8,-124928
8000359c:	70 09       	ld.w	r9,r8[0x0]
8000359e:	af c9       	cbr	r9,0xe
800035a0:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
800035a2:	30 2a       	mov	r10,2
800035a4:	fe 69 18 08 	mov	r9,-124920
800035a8:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
800035aa:	70 09       	ld.w	r9,r8[0x0]
800035ac:	af a9       	sbr	r9,0xe
800035ae:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
800035b0:	fe 68 18 04 	mov	r8,-124924
800035b4:	70 08       	ld.w	r8,r8[0x0]
800035b6:	e2 18 08 00 	andl	r8,0x800,COH
800035ba:	c0 40       	breq	800035c2 <udd_interrupt+0x4b2>
			udd_attach();
800035bc:	f0 1f 00 1c 	mcall	8000362c <udd_interrupt+0x51c>
800035c0:	c0 38       	rjmp	800035c6 <udd_interrupt+0x4b6>
		} else {
			udd_detach();
800035c2:	f0 1f 00 1c 	mcall	80003630 <udd_interrupt+0x520>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800035c6:	fe 68 10 00 	mov	r8,-126976
800035ca:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
800035ce:	e3 cd 40 80 	ldm	sp++,r7,lr
800035d2:	d6 03       	rete
		goto udd_interrupt_end;
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800035d4:	fe 68 10 04 	mov	r8,-126972
800035d8:	70 08       	ld.w	r8,r8[0x0]
800035da:	e2 18 00 08 	andl	r8,0x8,COH
800035de:	fe 91 ff 41 	brne	80003460 <udd_interrupt+0x350>
800035e2:	c9 3b       	rjmp	80003508 <udd_interrupt+0x3f8>
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	41 b8       	lddsp	r8,sp[0x6c]
800035e8:	00 00       	add	r0,r0
800035ea:	01 c8       	ld.ub	r8,r0[0x4]
800035ec:	80 00       	ld.sh	r0,r0[0x0]
800035ee:	28 48       	sub	r8,-124
800035f0:	80 00       	ld.sh	r0,r0[0x0]
800035f2:	28 08       	sub	r8,-128
800035f4:	00 00       	add	r0,r0
800035f6:	01 40       	ld.w	r0,--r0
800035f8:	80 00       	ld.sh	r0,r0[0x0]
800035fa:	28 30       	sub	r0,-125
800035fc:	00 00       	add	r0,r0
800035fe:	05 a8       	ld.ub	r8,r2[0x2]
80003600:	00 00       	add	r0,r0
80003602:	05 c0       	ld.ub	r0,r2[0x4]
80003604:	80 00       	ld.sh	r0,r0[0x0]
80003606:	4c 48       	lddpc	r8,80003714 <sysclk_set_prescalers+0x8>
80003608:	80 00       	ld.sh	r0,r0[0x0]
8000360a:	44 34       	lddsp	r4,sp[0x10c]
8000360c:	00 00       	add	r0,r0
8000360e:	01 02       	ld.w	r2,r0++
80003610:	00 00       	add	r0,r0
80003612:	01 c2       	ld.ub	r2,r0[0x4]
80003614:	80 00       	ld.sh	r0,r0[0x0]
80003616:	2e 40       	sub	r0,-28
80003618:	80 00       	ld.sh	r0,r0[0x0]
8000361a:	2a 0c       	sub	r12,-96
8000361c:	80 00       	ld.sh	r0,r0[0x0]
8000361e:	2a 4c       	sub	r12,-92
80003620:	80 00       	ld.sh	r0,r0[0x0]
80003622:	28 5c       	sub	r12,-123
80003624:	80 00       	ld.sh	r0,r0[0x0]
80003626:	43 d8       	lddsp	r8,sp[0xf4]
80003628:	80 00       	ld.sh	r0,r0[0x0]
8000362a:	29 18       	sub	r8,-111
8000362c:	80 00       	ld.sh	r0,r0[0x0]
8000362e:	29 9c       	sub	r12,-103
80003630:	80 00       	ld.sh	r0,r0[0x0]
80003632:	29 74       	sub	r4,-105

80003634 <osc_priv_enable_rc120m>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003634:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003638:	d3 03       	ssrf	0x10
void osc_priv_enable_rc120m(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8000363a:	fe 78 08 00 	mov	r8,-63488
8000363e:	35 8a       	mov	r10,88
80003640:	ea 1a aa 00 	orh	r10,0xaa00
80003644:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80003646:	30 1a       	mov	r10,1
80003648:	f1 4a 00 58 	st.w	r8[88],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000364c:	12 98       	mov	r8,r9
8000364e:	e6 18 00 01 	andh	r8,0x1,COH
80003652:	c0 21       	brne	80003656 <osc_priv_enable_rc120m+0x22>
      cpu_irq_enable();
80003654:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80003656:	5e fc       	retal	r12

80003658 <osc_priv_enable_rc8m>:
{
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
80003658:	fe 79 08 00 	mov	r9,-63488
8000365c:	73 28       	ld.w	r8,r9[0x48]
8000365e:	e6 18 00 01 	andh	r8,0x1,COH
80003662:	cf d0       	breq	8000365c <osc_priv_enable_rc8m+0x4>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003664:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003668:	d3 03       	ssrf	0x10
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
	rccr8 = AVR32_SCIF.rccr8;
8000366a:	fe 78 08 00 	mov	r8,-63488
8000366e:	71 2b       	ld.w	r11,r8[0x48]
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80003670:	e0 6a 02 00 	mov	r10,512
80003674:	ea 1a 80 80 	orh	r10,0x8080
80003678:	15 ba       	ld.ub	r10,r10[0x3]
8000367a:	b1 aa       	sbr	r10,0x10
8000367c:	16 6a       	and	r10,r11
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
8000367e:	b9 aa       	sbr	r10,0x18
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
80003680:	34 8b       	mov	r11,72
80003682:	ea 1b aa 00 	orh	r11,0xaa00
80003686:	91 6b       	st.w	r8[0x18],r11
	AVR32_SCIF.rccr8 = rccr8;
80003688:	f1 4a 00 48 	st.w	r8[72],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000368c:	12 98       	mov	r8,r9
8000368e:	e6 18 00 01 	andh	r8,0x1,COH
80003692:	c0 21       	brne	80003696 <osc_priv_enable_rc8m+0x3e>
      cpu_irq_enable();
80003694:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80003696:	5e fc       	retal	r12

80003698 <pll_enable>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003698:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000369c:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8000369e:	2f 9b       	sub	r11,-7
800036a0:	f6 0a 15 02 	lsl	r10,r11,0x2
800036a4:	ea 1a aa 00 	orh	r10,0xaa00
800036a8:	fe 78 08 00 	mov	r8,-63488
800036ac:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
800036ae:	78 0a       	ld.w	r10,r12[0x0]
800036b0:	a1 aa       	sbr	r10,0x0
800036b2:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800036b6:	12 98       	mov	r8,r9
800036b8:	e6 18 00 01 	andh	r8,0x1,COH
800036bc:	c0 21       	brne	800036c0 <pll_enable+0x28>
      cpu_irq_enable();
800036be:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800036c0:	5e fc       	retal	r12
800036c2:	d7 03       	nop

800036c4 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
800036c4:	d4 01       	pushm	lr
	switch (id) {
800036c6:	30 28       	mov	r8,2
800036c8:	f0 0c 18 00 	cp.b	r12,r8
800036cc:	c0 60       	breq	800036d8 <osc_enable+0x14>
800036ce:	30 48       	mov	r8,4
800036d0:	f0 0c 18 00 	cp.b	r12,r8
800036d4:	c0 71       	brne	800036e2 <osc_enable+0x1e>
800036d6:	c0 48       	rjmp	800036de <osc_enable+0x1a>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
800036d8:	f0 1f 00 03 	mcall	800036e4 <osc_enable+0x20>
		break;
800036dc:	d8 02       	popm	pc

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
800036de:	f0 1f 00 03 	mcall	800036e8 <osc_enable+0x24>
800036e2:	d8 02       	popm	pc
800036e4:	80 00       	ld.sh	r0,r0[0x0]
800036e6:	36 58       	mov	r8,101
800036e8:	80 00       	ld.sh	r0,r0[0x0]
800036ea:	36 34       	mov	r4,99

800036ec <sysclk_set_source>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800036ec:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800036f0:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
800036f2:	fe 78 04 00 	mov	r8,-64512
800036f6:	fc 1a aa 00 	movh	r10,0xaa00
800036fa:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
800036fe:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003700:	12 98       	mov	r8,r9
80003702:	e6 18 00 01 	andh	r8,0x1,COH
80003706:	c0 21       	brne	8000370a <sysclk_set_source+0x1e>
      cpu_irq_enable();
80003708:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
8000370a:	5e fc       	retal	r12

8000370c <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
8000370c:	eb cd 40 80 	pushm	r7,lr
	uint32_t   pbc_cksel = 0;

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80003710:	58 0c       	cp.w	r12,0
80003712:	c0 30       	breq	80003718 <sysclk_set_prescalers+0xc>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
80003714:	20 1c       	sub	r12,1
80003716:	a7 bc       	sbr	r12,0x7
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80003718:	58 0b       	cp.w	r11,0
8000371a:	c0 30       	breq	80003720 <sysclk_set_prescalers+0x14>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
8000371c:	20 1b       	sub	r11,1
8000371e:	a7 bb       	sbr	r11,0x7
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80003720:	58 0a       	cp.w	r10,0
80003722:	c0 30       	breq	80003728 <sysclk_set_prescalers+0x1c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
80003724:	20 1a       	sub	r10,1
80003726:	a7 ba       	sbr	r10,0x7
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
80003728:	58 09       	cp.w	r9,0
8000372a:	c0 30       	breq	80003730 <sysclk_set_prescalers+0x24>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL_PBSEL)
8000372c:	20 19       	sub	r9,1
8000372e:	a7 b9       	sbr	r9,0x7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003730:	e1 be 00 00 	mfsr	lr,0x0
	cpu_irq_disable();
80003734:	d3 03       	ssrf	0x10
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80003736:	fe 78 04 00 	mov	r8,-64512
8000373a:	30 47       	mov	r7,4
8000373c:	ea 17 aa 00 	orh	r7,0xaa00
80003740:	f1 47 00 58 	st.w	r8[88],r7
	AVR32_PM.cpusel = cpu_cksel;
80003744:	91 1c       	st.w	r8[0x4],r12
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80003746:	30 cc       	mov	r12,12
80003748:	ea 1c aa 00 	orh	r12,0xaa00
8000374c:	f1 4c 00 58 	st.w	r8[88],r12
	AVR32_PM.pbasel = pba_cksel;
80003750:	91 3b       	st.w	r8[0xc],r11
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80003752:	31 0b       	mov	r11,16
80003754:	ea 1b aa 00 	orh	r11,0xaa00
80003758:	f1 4b 00 58 	st.w	r8[88],r11
	AVR32_PM.pbbsel = pbb_cksel;
8000375c:	91 4a       	st.w	r8[0x10],r10
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
8000375e:	31 4a       	mov	r10,20
80003760:	ea 1a aa 00 	orh	r10,0xaa00
80003764:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.pbcsel = pbc_cksel;
80003768:	91 59       	st.w	r8[0x14],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000376a:	1c 98       	mov	r8,lr
8000376c:	e6 18 00 01 	andh	r8,0x1,COH
80003770:	c0 21       	brne	80003774 <sysclk_set_prescalers+0x68>
      cpu_irq_enable();
80003772:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80003774:	e3 cd 80 80 	ldm	sp++,r7,pc

80003778 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80003778:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000377a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000377e:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80003780:	a3 6c       	lsl	r12,0x2
80003782:	fe 7a 04 20 	mov	r10,-64480
80003786:	f8 0a 00 08 	add	r8,r12,r10
8000378a:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
8000378c:	30 1e       	mov	lr,1
8000378e:	fc 0b 09 4b 	lsl	r11,lr,r11
80003792:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80003794:	32 0a       	mov	r10,32
80003796:	ea 1a aa 00 	orh	r10,0xaa00
8000379a:	14 0c       	add	r12,r10
8000379c:	fe 7a 04 00 	mov	r10,-64512
800037a0:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
800037a4:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800037a6:	12 98       	mov	r8,r9
800037a8:	e6 18 00 01 	andh	r8,0x1,COH
800037ac:	c0 21       	brne	800037b0 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
800037ae:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800037b0:	d8 02       	popm	pc
800037b2:	d7 03       	nop

800037b4 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800037b4:	d4 01       	pushm	lr
800037b6:	20 1d       	sub	sp,4

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
800037b8:	fe 78 08 00 	mov	r8,-63488
800037bc:	70 58       	ld.w	r8,r8[0x14]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
800037be:	e2 18 00 20 	andl	r8,0x20,COH
800037c2:	c2 91       	brne	80003814 <sysclk_enable_usb+0x60>
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
800037c4:	fe 78 08 00 	mov	r8,-63488
800037c8:	70 58       	ld.w	r8,r8[0x14]
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;

	case PLL_SRC_RC8M:
		if (!osc_is_ready(OSC_ID_RC8M)) {
800037ca:	e2 18 00 08 	andl	r8,0x8,COH
800037ce:	c0 a1       	brne	800037e2 <sysclk_enable_usb+0x2e>
			osc_enable(OSC_ID_RC8M);
800037d0:	30 2c       	mov	r12,2
800037d2:	f0 1f 00 15 	mcall	80003824 <sysclk_enable_usb+0x70>
800037d6:	fe 79 08 00 	mov	r9,-63488
800037da:	72 58       	ld.w	r8,r9[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800037dc:	e2 18 00 08 	andl	r8,0x8,COH
800037e0:	cf d0       	breq	800037da <sysclk_enable_usb+0x26>
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
800037e2:	31 08       	mov	r8,16
800037e4:	a3 b8       	sbr	r8,0x3
800037e6:	50 08       	stdsp	sp[0x0],r8
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
800037e8:	10 99       	mov	r9,r8
800037ea:	ea 19 3f 00 	orh	r9,0x3f00
800037ee:	e8 19 01 04 	orl	r9,0x104
800037f2:	30 c8       	mov	r8,12
800037f4:	20 18       	sub	r8,1
800037f6:	f3 e8 11 08 	or	r8,r9,r8<<0x10
800037fa:	fa cc ff fc 	sub	r12,sp,-4
800037fe:	18 d8       	st.w	--r12,r8
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
80003800:	30 1b       	mov	r11,1
80003802:	1a 9c       	mov	r12,sp
80003804:	f0 1f 00 09 	mcall	80003828 <sysclk_enable_usb+0x74>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80003808:	fe 79 08 00 	mov	r9,-63488
8000380c:	72 58       	ld.w	r8,r9[0x14]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
8000380e:	e2 18 00 20 	andl	r8,0x20,COH
80003812:	cf d0       	breq	8000380c <sysclk_enable_usb+0x58>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80003814:	e0 69 06 01 	mov	r9,1537
80003818:	fe 78 08 00 	mov	r8,-63488
8000381c:	f1 49 00 64 	st.w	r8[100],r9
	genclk_enable_config(AVR32_USBC_GCLK_NUM, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
80003820:	2f fd       	sub	sp,-4
80003822:	d8 02       	popm	pc
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	36 c4       	mov	r4,108
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	36 98       	mov	r8,105

8000382c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000382c:	d4 01       	pushm	lr
8000382e:	20 1d       	sub	sp,4
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0) || (CONFIG_SYSCLK_PBC_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
80003830:	30 29       	mov	r9,2
80003832:	30 0a       	mov	r10,0
80003834:	14 9b       	mov	r11,r10
80003836:	14 9c       	mov	r12,r10
80003838:	f0 1f 00 1d 	mcall	800038ac <sysclk_init+0x80>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8000383c:	fe 78 08 00 	mov	r8,-63488
80003840:	70 58       	ld.w	r8,r8[0x14]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80003842:	e2 18 00 10 	andl	r8,0x10,COH
80003846:	c2 81       	brne	80003896 <sysclk_init+0x6a>
80003848:	fe 78 08 00 	mov	r8,-63488
8000384c:	70 58       	ld.w	r8,r8[0x14]
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;

	case PLL_SRC_RC8M:
		if (!osc_is_ready(OSC_ID_RC8M)) {
8000384e:	e2 18 00 08 	andl	r8,0x8,COH
80003852:	c0 a1       	brne	80003866 <sysclk_init+0x3a>
			osc_enable(OSC_ID_RC8M);
80003854:	30 2c       	mov	r12,2
80003856:	f0 1f 00 17 	mcall	800038b0 <sysclk_init+0x84>
8000385a:	fe 79 08 00 	mov	r9,-63488
8000385e:	72 58       	ld.w	r8,r9[0x14]
80003860:	e2 18 00 08 	andl	r8,0x8,COH
80003864:	cf d0       	breq	8000385e <sysclk_init+0x32>
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80003866:	31 08       	mov	r8,16
80003868:	10 99       	mov	r9,r8
8000386a:	a3 b9       	sbr	r9,0x3
8000386c:	50 09       	stdsp	sp[0x0],r9
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8000386e:	ea 19 3f 00 	orh	r9,0x3f00
80003872:	e8 19 01 04 	orl	r9,0x104
80003876:	20 18       	sub	r8,1
80003878:	f3 e8 11 08 	or	r8,r9,r8<<0x10
8000387c:	fa cc ff fc 	sub	r12,sp,-4
80003880:	18 d8       	st.w	--r12,r8
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
80003882:	30 0b       	mov	r11,0
80003884:	1a 9c       	mov	r12,sp
80003886:	f0 1f 00 0c 	mcall	800038b4 <sysclk_init+0x88>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8000388a:	fe 79 08 00 	mov	r9,-63488
8000388e:	72 58       	ld.w	r8,r9[0x14]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80003890:	e2 18 00 10 	andl	r8,0x10,COH
80003894:	cf d0       	breq	8000388e <sysclk_init+0x62>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80003896:	e0 6c 90 00 	mov	r12,36864
8000389a:	ea 1c 03 d0 	orh	r12,0x3d0
8000389e:	f0 1f 00 07 	mcall	800038b8 <sysclk_init+0x8c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
800038a2:	30 3c       	mov	r12,3
800038a4:	f0 1f 00 06 	mcall	800038bc <sysclk_init+0x90>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800038a8:	2f fd       	sub	sp,-4
800038aa:	d8 02       	popm	pc
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	37 0c       	mov	r12,112
800038b0:	80 00       	ld.sh	r0,r0[0x0]
800038b2:	36 c4       	mov	r4,108
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	36 98       	mov	r8,105
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	24 7c       	sub	r12,71
800038bc:	80 00       	ld.sh	r0,r0[0x0]
800038be:	36 ec       	mov	r12,110

800038c0 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800038c0:	76 09       	ld.w	r9,r11[0x0]
800038c2:	58 29       	cp.w	r9,2
800038c4:	e0 88 00 03 	brls	800038ca <tc_init_waveform+0xa>
800038c8:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800038ca:	76 18       	ld.w	r8,r11[0x4]
800038cc:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800038d0:	af ba       	sbr	r10,0xf
800038d2:	10 9b       	mov	r11,r8
800038d4:	e6 1b c0 00 	andh	r11,0xc000,COH
800038d8:	16 4a       	or	r10,r11
800038da:	10 9b       	mov	r11,r8
800038dc:	e6 1b 30 00 	andh	r11,0x3000,COH
800038e0:	16 4a       	or	r10,r11
800038e2:	10 9b       	mov	r11,r8
800038e4:	e6 1b 0c 00 	andh	r11,0xc00,COH
800038e8:	16 4a       	or	r10,r11
800038ea:	10 9b       	mov	r11,r8
800038ec:	e6 1b 03 00 	andh	r11,0x300,COH
800038f0:	16 4a       	or	r10,r11
800038f2:	10 9b       	mov	r11,r8
800038f4:	e6 1b 00 c0 	andh	r11,0xc0,COH
800038f8:	16 4a       	or	r10,r11
800038fa:	10 9b       	mov	r11,r8
800038fc:	e6 1b 00 30 	andh	r11,0x30,COH
80003900:	16 4a       	or	r10,r11
80003902:	10 9b       	mov	r11,r8
80003904:	e6 1b 00 0c 	andh	r11,0xc,COH
80003908:	16 4a       	or	r10,r11
8000390a:	10 9b       	mov	r11,r8
8000390c:	e6 1b 00 03 	andh	r11,0x3,COH
80003910:	16 4a       	or	r10,r11
80003912:	10 9b       	mov	r11,r8
80003914:	e2 1b 60 00 	andl	r11,0x6000,COH
80003918:	16 4a       	or	r10,r11
8000391a:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
8000391e:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
80003922:	10 9b       	mov	r11,r8
80003924:	e2 1b 0c 00 	andl	r11,0xc00,COH
80003928:	16 4a       	or	r10,r11
8000392a:	10 9b       	mov	r11,r8
8000392c:	e2 1b 03 00 	andl	r11,0x300,COH
80003930:	16 4a       	or	r10,r11
80003932:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
80003936:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
8000393a:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
8000393e:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
80003942:	10 9b       	mov	r11,r8
80003944:	e2 1b 00 30 	andl	r11,0x30,COH
80003948:	16 4a       	or	r10,r11
8000394a:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
8000394e:	f5 e8 10 38 	or	r8,r10,r8<<0x3
80003952:	a5 69       	lsl	r9,0x4
80003954:	2f f9       	sub	r9,-1
80003956:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
8000395a:	5e fd       	retal	0

8000395c <tc_sync_start>:
void tc_sync_start(volatile avr32_tc_t *tc)
{
  unsigned int i;
  // Enable the clock for each channel.
  for(i=0; i<TC_NUMBER_OF_CHANNELS;i++)
    tc->channel[i].ccr = AVR32_TC_CLKEN_MASK;
8000395c:	30 18       	mov	r8,1
8000395e:	99 08       	st.w	r12[0x0],r8
80003960:	f9 48 00 40 	st.w	r12[64],r8
80003964:	f9 48 00 80 	st.w	r12[128],r8

  // Reset all channels of the selected timer/counter.
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
80003968:	f9 48 00 c0 	st.w	r12[192],r8
}
8000396c:	5e fc       	retal	r12

8000396e <tc_write_ra>:


int tc_write_ra(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000396e:	58 2b       	cp.w	r11,2
80003970:	e0 88 00 03 	brls	80003976 <tc_write_ra+0x8>
80003974:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80003976:	f6 08 15 04 	lsl	r8,r11,0x4
8000397a:	2f f8       	sub	r8,-1
8000397c:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80003980:	e2 18 80 00 	andl	r8,0x8000,COH
80003984:	c0 c0       	breq	8000399c <tc_write_ra+0x2e>
    Wr_bitfield(tc->channel[channel].ra, AVR32_TC_RA_MASK, value);
80003986:	a7 6b       	lsl	r11,0x6
80003988:	16 0c       	add	r12,r11
8000398a:	2e cc       	sub	r12,-20
8000398c:	78 08       	ld.w	r8,r12[0x0]
8000398e:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80003992:	e0 18 00 00 	andl	r8,0x0
80003996:	f3 e8 10 08 	or	r8,r9,r8
8000399a:	99 08       	st.w	r12[0x0],r8

  return value;
8000399c:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
800039a0:	5e fc       	retal	r12

800039a2 <tc_write_rb>:


int tc_write_rb(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800039a2:	58 2b       	cp.w	r11,2
800039a4:	e0 88 00 03 	brls	800039aa <tc_write_rb+0x8>
800039a8:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800039aa:	f6 08 15 04 	lsl	r8,r11,0x4
800039ae:	2f f8       	sub	r8,-1
800039b0:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800039b4:	e2 18 80 00 	andl	r8,0x8000,COH
800039b8:	c0 c0       	breq	800039d0 <tc_write_rb+0x2e>
    Wr_bitfield(tc->channel[channel].rb, AVR32_TC_RB_MASK, value);
800039ba:	a7 6b       	lsl	r11,0x6
800039bc:	16 0c       	add	r12,r11
800039be:	2e 8c       	sub	r12,-24
800039c0:	78 08       	ld.w	r8,r12[0x0]
800039c2:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
800039c6:	e0 18 00 00 	andl	r8,0x0
800039ca:	f3 e8 10 08 	or	r8,r9,r8
800039ce:	99 08       	st.w	r12[0x0],r8

  return value;
800039d0:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
800039d4:	5e fc       	retal	r12

800039d6 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800039d6:	58 2b       	cp.w	r11,2
800039d8:	e0 88 00 03 	brls	800039de <tc_write_rc+0x8>
800039dc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800039de:	f6 08 15 04 	lsl	r8,r11,0x4
800039e2:	2f f8       	sub	r8,-1
800039e4:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800039e8:	e2 18 80 00 	andl	r8,0x8000,COH
800039ec:	c0 c0       	breq	80003a04 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800039ee:	a7 6b       	lsl	r11,0x6
800039f0:	16 0c       	add	r12,r11
800039f2:	2e 4c       	sub	r12,-28
800039f4:	78 08       	ld.w	r8,r12[0x0]
800039f6:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
800039fa:	e0 18 00 00 	andl	r8,0x0
800039fe:	f3 e8 10 08 	or	r8,r9,r8
80003a02:	99 08       	st.w	r12[0x0],r8

  return value;
80003a04:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80003a08:	5e fc       	retal	r12

80003a0a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003a0a:	c0 08       	rjmp	80003a0a <_unhandled_interrupt>

80003a0c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003a0c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003a10:	49 99       	lddpc	r9,80003a74 <INTC_register_interrupt+0x68>
80003a12:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003a16:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003a1a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003a1c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003a20:	58 0a       	cp.w	r10,0
80003a22:	c0 91       	brne	80003a34 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003a24:	49 59       	lddpc	r9,80003a78 <INTC_register_interrupt+0x6c>
80003a26:	49 6a       	lddpc	r10,80003a7c <INTC_register_interrupt+0x70>
80003a28:	12 1a       	sub	r10,r9
80003a2a:	fe 79 00 00 	mov	r9,-65536
80003a2e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003a32:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003a34:	58 1a       	cp.w	r10,1
80003a36:	c0 a1       	brne	80003a4a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003a38:	49 09       	lddpc	r9,80003a78 <INTC_register_interrupt+0x6c>
80003a3a:	49 2a       	lddpc	r10,80003a80 <INTC_register_interrupt+0x74>
80003a3c:	12 1a       	sub	r10,r9
80003a3e:	bf aa       	sbr	r10,0x1e
80003a40:	fe 79 00 00 	mov	r9,-65536
80003a44:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003a48:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003a4a:	58 2a       	cp.w	r10,2
80003a4c:	c0 a1       	brne	80003a60 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80003a4e:	48 b9       	lddpc	r9,80003a78 <INTC_register_interrupt+0x6c>
80003a50:	48 da       	lddpc	r10,80003a84 <INTC_register_interrupt+0x78>
80003a52:	12 1a       	sub	r10,r9
80003a54:	bf ba       	sbr	r10,0x1f
80003a56:	fe 79 00 00 	mov	r9,-65536
80003a5a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003a5e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003a60:	48 69       	lddpc	r9,80003a78 <INTC_register_interrupt+0x6c>
80003a62:	48 aa       	lddpc	r10,80003a88 <INTC_register_interrupt+0x7c>
80003a64:	12 1a       	sub	r10,r9
80003a66:	ea 1a c0 00 	orh	r10,0xc000
80003a6a:	fe 79 00 00 	mov	r9,-65536
80003a6e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003a72:	5e fc       	retal	r12
80003a74:	80 00       	ld.sh	r0,r0[0x0]
80003a76:	50 20       	stdsp	sp[0x8],r0
80003a78:	80 00       	ld.sh	r0,r0[0x0]
80003a7a:	4e 00       	lddpc	r0,80003bf8 <udi_cdc_comm_setup+0x18>
80003a7c:	80 00       	ld.sh	r0,r0[0x0]
80003a7e:	4f 04       	lddpc	r4,80003c3c <udi_cdc_comm_setup+0x5c>
80003a80:	80 00       	ld.sh	r0,r0[0x0]
80003a82:	4f 12       	lddpc	r2,80003c44 <udi_cdc_comm_setup+0x64>
80003a84:	80 00       	ld.sh	r0,r0[0x0]
80003a86:	4f 20       	lddpc	r0,80003c4c <udi_cdc_comm_setup+0x6c>
80003a88:	80 00       	ld.sh	r0,r0[0x0]
80003a8a:	4f 2e       	lddpc	lr,80003c50 <udi_cdc_comm_setup+0x70>

80003a8c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80003a8c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003a8e:	49 18       	lddpc	r8,80003ad0 <INTC_init_interrupts+0x44>
80003a90:	e3 b8 00 01 	mtsr	0x4,r8
80003a94:	49 0e       	lddpc	lr,80003ad4 <INTC_init_interrupts+0x48>
80003a96:	30 07       	mov	r7,0
80003a98:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003a9a:	49 0c       	lddpc	r12,80003ad8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003a9c:	49 05       	lddpc	r5,80003adc <INTC_init_interrupts+0x50>
80003a9e:	10 15       	sub	r5,r8
80003aa0:	fe 76 00 00 	mov	r6,-65536
80003aa4:	c1 18       	rjmp	80003ac6 <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003aa6:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003aa8:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003aaa:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003aac:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003ab0:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003ab2:	10 3a       	cp.w	r10,r8
80003ab4:	fe 9b ff fc 	brhi	80003aac <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003ab8:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003abc:	2f f7       	sub	r7,-1
80003abe:	2f 8e       	sub	lr,-8
80003ac0:	e0 47 00 2f 	cp.w	r7,47
80003ac4:	c0 50       	breq	80003ace <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003ac6:	7c 08       	ld.w	r8,lr[0x0]
80003ac8:	58 08       	cp.w	r8,0
80003aca:	ce e1       	brne	80003aa6 <INTC_init_interrupts+0x1a>
80003acc:	cf 6b       	rjmp	80003ab8 <INTC_init_interrupts+0x2c>
80003ace:	d8 22       	popm	r4-r7,pc
80003ad0:	80 00       	ld.sh	r0,r0[0x0]
80003ad2:	4e 00       	lddpc	r0,80003c50 <udi_cdc_comm_setup+0x70>
80003ad4:	80 00       	ld.sh	r0,r0[0x0]
80003ad6:	50 20       	stdsp	sp[0x8],r0
80003ad8:	80 00       	ld.sh	r0,r0[0x0]
80003ada:	3a 0a       	mov	r10,-96
80003adc:	80 00       	ld.sh	r0,r0[0x0]
80003ade:	4f 04       	lddpc	r4,80003c9c <udi_cdc_multi_get_free_tx_buffer+0x14>

80003ae0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003ae0:	fe 78 00 00 	mov	r8,-65536
80003ae4:	e0 69 00 83 	mov	r9,131
80003ae8:	f2 0c 01 0c 	sub	r12,r9,r12
80003aec:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003af0:	f2 ca ff c0 	sub	r10,r9,-64
80003af4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003af8:	58 08       	cp.w	r8,0
80003afa:	c0 21       	brne	80003afe <_get_interrupt_handler+0x1e>
80003afc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003afe:	f0 08 12 00 	clz	r8,r8
80003b02:	48 5a       	lddpc	r10,80003b14 <_get_interrupt_handler+0x34>
80003b04:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003b08:	f0 08 11 1f 	rsub	r8,r8,31
80003b0c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003b0e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003b12:	5e fc       	retal	r12
80003b14:	80 00       	ld.sh	r0,r0[0x0]
80003b16:	50 20       	stdsp	sp[0x8],r0

80003b18 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003b18:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003b1c:	fe c0 ed 1c 	sub	r0,pc,-4836

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003b20:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003b24:	d5 53       	csrf	0x15
  cp      r0, r1
80003b26:	30 40       	mov	r0,4
  brhs    idata_load_loop_end
80003b28:	e0 61 01 00 	mov	r1,256
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003b2c:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80003b2e:	c0 72       	brcc	80003b3c <idata_load_loop_end>
  cp      r0, r1
80003b30:	fe c2 e9 38 	sub	r2,pc,-5832

80003b34 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003b34:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003b36:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003b38:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003b3a:	cf d3       	brcs	80003b34 <idata_load_loop>

80003b3c <idata_load_loop_end>:
  mov     r2, 0
80003b3c:	e0 60 01 00 	mov	r0,256
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003b40:	e0 61 2d e8 	mov	r1,11752
  cp      r0, r1
  brlo    udata_clear_loop
80003b44:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003b46:	c0 62       	brcc	80003b52 <udata_clear_loop_end>
80003b48:	30 02       	mov	r2,0
80003b4a:	30 03       	mov	r3,0

80003b4c <udata_clear_loop>:
80003b4c:	a1 22       	st.d	r0++,r2
80003b4e:	02 30       	cp.w	r0,r1
80003b50:	cf e3       	brcs	80003b4c <udata_clear_loop>

80003b52 <udata_clear_loop_end>:
80003b52:	fe cf f1 ca 	sub	pc,pc,-3638
80003b56:	d7 03       	nop

80003b58 <board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
80003b58:	5e fc       	retal	r12
80003b5a:	d7 03       	nop

80003b5c <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
80003b5c:	49 0b       	lddpc	r11,80003b9c <udi_cdc_comm_enable+0x40>
80003b5e:	30 0a       	mov	r10,0
80003b60:	b6 8a       	st.b	r11[0x0],r10
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
80003b62:	30 09       	mov	r9,0
80003b64:	48 f8       	lddpc	r8,80003ba0 <udi_cdc_comm_enable+0x44>
80003b66:	b0 09       	st.h	r8[0x0],r9

	uid_cdc_state_msg[port].header.bmRequestType =
80003b68:	48 f8       	lddpc	r8,80003ba4 <udi_cdc_comm_enable+0x48>
80003b6a:	3a 1c       	mov	r12,-95
80003b6c:	b0 8c       	st.b	r8[0x0],r12
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
80003b6e:	32 0c       	mov	r12,32
80003b70:	b0 9c       	st.b	r8[0x1],r12
	uid_cdc_state_msg[port].header.wValue = LE16(0);
80003b72:	b0 19       	st.h	r8[0x2],r9
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
80003b74:	b0 29       	st.h	r8[0x4],r9
	uid_cdc_state_msg[port].header.wLength = LE16(2);
80003b76:	e0 6c 02 00 	mov	r12,512
80003b7a:	b0 3c       	st.h	r8[0x6],r12
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
80003b7c:	b0 49       	st.h	r8[0x8],r9

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003b7e:	48 b8       	lddpc	r8,80003ba8 <udi_cdc_comm_enable+0x4c>
80003b80:	b0 89       	st.b	r8[0x0],r9
80003b82:	3c 29       	mov	r9,-62
80003b84:	b0 99       	st.b	r8[0x1],r9
80003b86:	30 1c       	mov	r12,1
80003b88:	b0 ac       	st.b	r8[0x2],r12
80003b8a:	b0 ba       	st.b	r8[0x3],r10
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003b8c:	b0 ca       	st.b	r8[0x4],r10
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
80003b8e:	b0 da       	st.b	r8[0x5],r10
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003b90:	30 89       	mov	r9,8
80003b92:	b0 e9       	st.b	r8[0x6],r9
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
80003b94:	17 88       	ld.ub	r8,r11[0x0]
80003b96:	2f f8       	sub	r8,-1
80003b98:	b6 88       	st.b	r11[0x0],r8
	return true;
}
80003b9a:	5e fc       	retal	r12
80003b9c:	00 00       	add	r0,r0
80003b9e:	04 28       	rsub	r8,r2
80003ba0:	00 00       	add	r0,r0
80003ba2:	04 d0       	st.w	--r2,r0
80003ba4:	00 00       	add	r0,r0
80003ba6:	04 3c       	cp.w	r12,r2
80003ba8:	00 00       	add	r0,r0
80003baa:	03 94       	ld.ub	r4,r1[0x1]

80003bac <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
80003bac:	48 38       	lddpc	r8,80003bb8 <udi_cdc_comm_disable+0xc>
80003bae:	11 89       	ld.ub	r9,r8[0x0]
80003bb0:	20 19       	sub	r9,1
80003bb2:	b0 89       	st.b	r8[0x0],r9
}
80003bb4:	5e fc       	retal	r12
80003bb6:	00 00       	add	r0,r0
80003bb8:	00 00       	add	r0,r0
80003bba:	04 28       	rsub	r8,r2

80003bbc <udi_cdc_data_disable>:
{
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
80003bbc:	48 58       	lddpc	r8,80003bd0 <udi_cdc_data_disable+0x14>
80003bbe:	11 89       	ld.ub	r9,r8[0x0]
80003bc0:	20 19       	sub	r9,1
80003bc2:	b0 89       	st.b	r8[0x0],r9
	port = udi_cdc_nb_data_enabled;
80003bc4:	11 88       	ld.ub	r8,r8[0x0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
80003bc6:	30 09       	mov	r9,0
80003bc8:	48 38       	lddpc	r8,80003bd4 <udi_cdc_data_disable+0x18>
80003bca:	b0 89       	st.b	r8[0x0],r9
}
80003bcc:	5e fc       	retal	r12
80003bce:	00 00       	add	r0,r0
80003bd0:	00 00       	add	r0,r0
80003bd2:	03 9b       	ld.ub	r11,r1[0x1]
80003bd4:	00 00       	add	r0,r0
80003bd6:	04 30       	cp.w	r0,r2

80003bd8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003bd8:	5e fd       	retal	0

80003bda <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003bda:	5e fd       	retal	0

80003bdc <udi_cdc_setup_to_port>:
	default:
		port = 0;
		break;
	}
	return port;
}
80003bdc:	5e fd       	retal	0
80003bde:	d7 03       	nop

80003be0 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
80003be0:	d4 01       	pushm	lr
	uint8_t port = udi_cdc_setup_to_port();
80003be2:	f0 1f 00 25 	mcall	80003c74 <udi_cdc_comm_setup+0x94>

	if (Udd_setup_is_in()) {
80003be6:	4a 58       	lddpc	r8,80003c78 <udi_cdc_comm_setup+0x98>
80003be8:	11 88       	ld.ub	r8,r8[0x0]
80003bea:	30 09       	mov	r9,0
80003bec:	f2 08 18 00 	cp.b	r8,r9
80003bf0:	c1 d4       	brge	80003c2a <udi_cdc_comm_setup+0x4a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003bf2:	e2 18 00 60 	andl	r8,0x60,COH
80003bf6:	e0 48 00 20 	cp.w	r8,32
80003bfa:	c3 c1       	brne	80003c72 <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80003bfc:	49 f8       	lddpc	r8,80003c78 <udi_cdc_comm_setup+0x98>
80003bfe:	11 99       	ld.ub	r9,r8[0x1]
80003c00:	32 18       	mov	r8,33
80003c02:	f0 09 18 00 	cp.b	r9,r8
80003c06:	c3 61       	brne	80003c72 <udi_cdc_comm_setup+0x92>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003c08:	49 c8       	lddpc	r8,80003c78 <udi_cdc_comm_setup+0x98>
80003c0a:	90 39       	ld.sh	r9,r8[0x6]
80003c0c:	30 78       	mov	r8,7
80003c0e:	f0 09 19 00 	cp.h	r9,r8
80003c12:	c3 01       	brne	80003c72 <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
80003c14:	49 98       	lddpc	r8,80003c78 <udi_cdc_comm_setup+0x98>
80003c16:	f8 09 15 03 	lsl	r9,r12,0x3
80003c1a:	f2 0c 01 0c 	sub	r12,r9,r12
80003c1e:	49 89       	lddpc	r9,80003c7c <udi_cdc_comm_setup+0x9c>
80003c20:	18 09       	add	r9,r12
80003c22:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80003c24:	30 79       	mov	r9,7
80003c26:	b0 69       	st.h	r8[0xc],r9
80003c28:	da 0a       	popm	pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003c2a:	e2 18 00 60 	andl	r8,0x60,COH
80003c2e:	e0 48 00 20 	cp.w	r8,32
80003c32:	c2 01       	brne	80003c72 <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003c34:	49 18       	lddpc	r8,80003c78 <udi_cdc_comm_setup+0x98>
80003c36:	11 98       	ld.ub	r8,r8[0x1]
80003c38:	32 09       	mov	r9,32
80003c3a:	f2 08 18 00 	cp.b	r8,r9
80003c3e:	c0 60       	breq	80003c4a <udi_cdc_comm_setup+0x6a>
80003c40:	32 29       	mov	r9,34
80003c42:	f2 08 18 00 	cp.b	r8,r9
80003c46:	c1 61       	brne	80003c72 <udi_cdc_comm_setup+0x92>
80003c48:	da 0a       	popm	pc,r12=1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003c4a:	48 c8       	lddpc	r8,80003c78 <udi_cdc_comm_setup+0x98>
80003c4c:	90 39       	ld.sh	r9,r8[0x6]
80003c4e:	30 78       	mov	r8,7
80003c50:	f0 09 19 00 	cp.h	r9,r8
80003c54:	c0 f1       	brne	80003c72 <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
80003c56:	48 98       	lddpc	r8,80003c78 <udi_cdc_comm_setup+0x98>
80003c58:	48 a9       	lddpc	r9,80003c80 <udi_cdc_comm_setup+0xa0>
80003c5a:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003c5c:	f8 09 15 03 	lsl	r9,r12,0x3
80003c60:	f2 0c 01 0c 	sub	r12,r9,r12
80003c64:	48 69       	lddpc	r9,80003c7c <udi_cdc_comm_setup+0x9c>
80003c66:	f2 0c 00 0c 	add	r12,r9,r12
80003c6a:	91 2c       	st.w	r8[0x8],r12
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80003c6c:	30 79       	mov	r9,7
80003c6e:	b0 69       	st.h	r8[0xc],r9
80003c70:	da 0a       	popm	pc,r12=1
						sizeof(usb_cdc_line_coding_t);
				return true;
80003c72:	d8 0a       	popm	pc,r12=0
80003c74:	80 00       	ld.sh	r0,r0[0x0]
80003c76:	3b dc       	mov	r12,-67
80003c78:	00 00       	add	r0,r0
80003c7a:	05 a8       	ld.ub	r8,r2[0x2]
80003c7c:	00 00       	add	r0,r0
80003c7e:	03 94       	ld.ub	r4,r1[0x1]
80003c80:	80 00       	ld.sh	r0,r0[0x0]
80003c82:	3c 84       	mov	r4,-56

80003c84 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
80003c84:	5e fc       	retal	r12
80003c86:	d7 03       	nop

80003c88 <udi_cdc_multi_get_free_tx_buffer>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003c88:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80003c8c:	d3 03       	ssrf	0x10
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80003c8e:	49 78       	lddpc	r8,80003ce8 <udi_cdc_multi_get_free_tx_buffer+0x60>
80003c90:	11 88       	ld.ub	r8,r8[0x0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80003c92:	49 7a       	lddpc	r10,80003cec <udi_cdc_multi_get_free_tx_buffer+0x64>
80003c94:	f4 08 05 19 	ld.uh	r9,r10[r8<<0x1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
80003c98:	58 08       	cp.w	r8,0
80003c9a:	f9 bc 01 00 	movne	r12,0
80003c9e:	f9 bc 00 02 	moveq	r12,2
80003ca2:	f4 0c 05 0a 	ld.uh	r10,r10[r12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
80003ca6:	e0 49 00 40 	cp.w	r9,64
80003caa:	c1 21       	brne	80003cce <udi_cdc_multi_get_free_tx_buffer+0x46>
		if ((!udi_cdc_tx_trans_ongoing[port])
80003cac:	49 1c       	lddpc	r12,80003cf0 <udi_cdc_multi_get_free_tx_buffer+0x68>
80003cae:	19 8c       	ld.ub	r12,r12[0x0]
80003cb0:	58 0c       	cp.w	r12,0
80003cb2:	c0 e1       	brne	80003cce <udi_cdc_multi_get_free_tx_buffer+0x46>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
80003cb4:	49 0c       	lddpc	r12,80003cf4 <udi_cdc_multi_get_free_tx_buffer+0x6c>
80003cb6:	19 8c       	ld.ub	r12,r12[0x0]
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
80003cb8:	58 0c       	cp.w	r12,0
80003cba:	c0 a1       	brne	80003cce <udi_cdc_multi_get_free_tx_buffer+0x46>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
80003cbc:	30 1a       	mov	r10,1
80003cbe:	48 e9       	lddpc	r9,80003cf4 <udi_cdc_multi_get_free_tx_buffer+0x6c>
80003cc0:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
80003cc2:	58 08       	cp.w	r8,0
80003cc4:	5f 09       	sreq	r9
80003cc6:	48 98       	lddpc	r8,80003ce8 <udi_cdc_multi_get_free_tx_buffer+0x60>
80003cc8:	b0 89       	st.b	r8[0x0],r9
80003cca:	34 0a       	mov	r10,64
80003ccc:	30 09       	mov	r9,0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003cce:	16 98       	mov	r8,r11
80003cd0:	e6 18 00 01 	andh	r8,0x1,COH
80003cd4:	c0 21       	brne	80003cd8 <udi_cdc_multi_get_free_tx_buffer+0x50>
      cpu_irq_enable();
80003cd6:	d5 03       	csrf	0x10
   }

	barrier();
80003cd8:	e0 68 00 80 	mov	r8,128
80003cdc:	f0 09 01 09 	sub	r9,r8,r9
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
80003ce0:	f2 0a 01 0c 	sub	r12,r9,r10
80003ce4:	5e fc       	retal	r12
80003ce6:	00 00       	add	r0,r0
80003ce8:	00 00       	add	r0,r0
80003cea:	03 9c       	ld.ub	r12,r1[0x1]
80003cec:	00 00       	add	r0,r0
80003cee:	03 a0       	ld.ub	r0,r1[0x2]
80003cf0:	00 00       	add	r0,r0
80003cf2:	04 38       	cp.w	r8,r2
80003cf4:	00 00       	add	r0,r0
80003cf6:	04 cc       	st.b	r2++,r12

80003cf8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
80003cf8:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
80003cfa:	f0 1f 00 03 	mcall	80003d04 <udi_cdc_multi_is_tx_ready+0xc>
}
80003cfe:	5f 1c       	srne	r12
80003d00:	d8 02       	popm	pc
80003d02:	00 00       	add	r0,r0
80003d04:	80 00       	ld.sh	r0,r0[0x0]
80003d06:	3c 88       	mov	r8,-56

80003d08 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
80003d08:	d4 01       	pushm	lr
	return udi_cdc_multi_is_tx_ready(0);
80003d0a:	30 0c       	mov	r12,0
80003d0c:	f0 1f 00 02 	mcall	80003d14 <udi_cdc_is_tx_ready+0xc>
}
80003d10:	d8 02       	popm	pc
80003d12:	00 00       	add	r0,r0
80003d14:	80 00       	ld.sh	r0,r0[0x0]
80003d16:	3c f8       	mov	r8,-49

80003d18 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
80003d18:	d4 31       	pushm	r0-r7,lr
80003d1a:	20 1d       	sub	sp,4
80003d1c:	14 97       	mov	r7,r10

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
80003d1e:	49 f8       	lddpc	r8,80003d98 <udi_cdc_multi_write_buf+0x80>
80003d20:	11 e9       	ld.ub	r9,r8[0x6]
80003d22:	30 98       	mov	r8,9
80003d24:	f0 09 18 00 	cp.b	r9,r8
80003d28:	c0 21       	brne	80003d2c <udi_cdc_multi_write_buf+0x14>
		size *=2;
80003d2a:	a1 77       	lsl	r7,0x1
{
	irqflags_t flags;
	uint8_t buf_sel;
	uint16_t buf_nb;
	iram_size_t copy_nb;
	uint8_t *ptr_buf = (uint8_t *)buf;
80003d2c:	16 92       	mov	r2,r11
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80003d2e:	30 03       	mov	r3,0
		if (!udi_cdc_data_running) {
80003d30:	49 b1       	lddpc	r1,80003d9c <udi_cdc_multi_write_buf+0x84>
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80003d32:	49 c0       	lddpc	r0,80003da0 <udi_cdc_multi_write_buf+0x88>
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80003d34:	06 9c       	mov	r12,r3
80003d36:	f0 1f 00 1c 	mcall	80003da4 <udi_cdc_multi_write_buf+0x8c>
80003d3a:	c0 51       	brne	80003d44 <udi_cdc_multi_write_buf+0x2c>
		if (!udi_cdc_data_running) {
80003d3c:	03 88       	ld.ub	r8,r1[0x0]
80003d3e:	58 08       	cp.w	r8,0
80003d40:	cf a1       	brne	80003d34 <udi_cdc_multi_write_buf+0x1c>
80003d42:	c2 88       	rjmp	80003d92 <udi_cdc_multi_write_buf+0x7a>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d44:	e1 b8 00 00 	mfsr	r8,0x0
80003d48:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003d4a:	d3 03       	ssrf	0x10
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80003d4c:	49 78       	lddpc	r8,80003da8 <udi_cdc_multi_write_buf+0x90>
80003d4e:	11 85       	ld.ub	r5,r8[0x0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80003d50:	e0 05 04 14 	ld.sh	r4,r0[r5<<0x1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
80003d54:	08 98       	mov	r8,r4
80003d56:	5c 78       	castu.h	r8
80003d58:	f0 06 11 40 	rsub	r6,r8,64
80003d5c:	0c 37       	cp.w	r7,r6
80003d5e:	ee 06 17 80 	movls	r6,r7
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
80003d62:	ea 0c 15 06 	lsl	r12,r5,0x6
80003d66:	f0 0c 00 0c 	add	r12,r8,r12
80003d6a:	0c 9a       	mov	r10,r6
80003d6c:	04 9b       	mov	r11,r2
80003d6e:	49 08       	lddpc	r8,80003dac <udi_cdc_multi_write_buf+0x94>
80003d70:	f0 0c 00 0c 	add	r12,r8,r12
80003d74:	f0 1f 00 0f 	mcall	80003db0 <udi_cdc_multi_write_buf+0x98>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
80003d78:	ec 04 00 04 	add	r4,r6,r4
80003d7c:	e0 05 0a 14 	st.h	r0[r5<<0x1],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003d80:	40 08       	lddsp	r8,sp[0x0]
80003d82:	e6 18 00 01 	andh	r8,0x1,COH
80003d86:	c0 21       	brne	80003d8a <udi_cdc_multi_write_buf+0x72>
      cpu_irq_enable();
80003d88:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
	size -= copy_nb;
80003d8a:	0c 17       	sub	r7,r6

	if (size) {
80003d8c:	c0 30       	breq	80003d92 <udi_cdc_multi_write_buf+0x7a>
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
80003d8e:	0c 02       	add	r2,r6
80003d90:	cd 2b       	rjmp	80003d34 <udi_cdc_multi_write_buf+0x1c>
	if (size) {
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
80003d92:	0e 9c       	mov	r12,r7
80003d94:	2f fd       	sub	sp,-4
80003d96:	d8 32       	popm	r0-r7,pc
80003d98:	00 00       	add	r0,r0
80003d9a:	03 94       	ld.ub	r4,r1[0x1]
80003d9c:	00 00       	add	r0,r0
80003d9e:	04 30       	cp.w	r0,r2
80003da0:	00 00       	add	r0,r0
80003da2:	03 a0       	ld.ub	r0,r1[0x2]
80003da4:	80 00       	ld.sh	r0,r0[0x0]
80003da6:	3c f8       	mov	r8,-49
80003da8:	00 00       	add	r0,r0
80003daa:	03 9c       	ld.ub	r12,r1[0x1]
80003dac:	00 00       	add	r0,r0
80003dae:	03 a4       	ld.ub	r4,r1[0x2]
80003db0:	80 00       	ld.sh	r0,r0[0x0]
80003db2:	4c 48       	lddpc	r8,80003ec0 <udi_cdc_multi_read_buf+0x1c>

80003db4 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
80003db4:	d4 01       	pushm	lr
	return udi_cdc_multi_write_buf(0, buf, size);
80003db6:	16 9a       	mov	r10,r11
80003db8:	18 9b       	mov	r11,r12
80003dba:	30 0c       	mov	r12,0
80003dbc:	f0 1f 00 02 	mcall	80003dc4 <udi_cdc_write_buf+0x10>
}
80003dc0:	d8 02       	popm	pc
80003dc2:	00 00       	add	r0,r0
80003dc4:	80 00       	ld.sh	r0,r0[0x0]
80003dc6:	3d 18       	mov	r8,-47

80003dc8 <udi_cdc_multi_get_nb_received_data>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003dc8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003dcc:	d3 03       	ssrf	0x10

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80003dce:	48 88       	lddpc	r8,80003dec <udi_cdc_multi_get_nb_received_data+0x24>
80003dd0:	90 08       	ld.sh	r8,r8[0x0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
80003dd2:	48 8a       	lddpc	r10,80003df0 <udi_cdc_multi_get_nb_received_data+0x28>
80003dd4:	15 8b       	ld.ub	r11,r10[0x0]
80003dd6:	48 8a       	lddpc	r10,80003df4 <udi_cdc_multi_get_nb_received_data+0x2c>
80003dd8:	f4 0b 04 1c 	ld.sh	r12,r10[r11<<0x1]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003ddc:	e6 19 00 01 	andh	r9,0x1,COH
80003de0:	c0 21       	brne	80003de4 <udi_cdc_multi_get_nb_received_data+0x1c>
      cpu_irq_enable();
80003de2:	d5 03       	csrf	0x10
   }

	barrier();
80003de4:	5c 7c       	castu.h	r12
80003de6:	5c 78       	castu.h	r8
	cpu_irq_restore(flags);
	return nb_received;
}
80003de8:	10 1c       	sub	r12,r8
80003dea:	5e fc       	retal	r12
80003dec:	00 00       	add	r0,r0
80003dee:	04 2a       	rsub	r10,r2
80003df0:	00 00       	add	r0,r0
80003df2:	04 34       	cp.w	r4,r2
80003df4:	00 00       	add	r0,r0
80003df6:	04 24       	rsub	r4,r2

80003df8 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
80003df8:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
80003dfa:	f0 1f 00 03 	mcall	80003e04 <udi_cdc_multi_is_rx_ready+0xc>
}
80003dfe:	5f 1c       	srne	r12
80003e00:	d8 02       	popm	pc
80003e02:	00 00       	add	r0,r0
80003e04:	80 00       	ld.sh	r0,r0[0x0]
80003e06:	3d c8       	mov	r8,-36

80003e08 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
80003e08:	d4 01       	pushm	lr
	return udi_cdc_multi_is_rx_ready(0);
80003e0a:	30 0c       	mov	r12,0
80003e0c:	f0 1f 00 02 	mcall	80003e14 <udi_cdc_is_rx_ready+0xc>
}
80003e10:	d8 02       	popm	pc
80003e12:	00 00       	add	r0,r0
80003e14:	80 00       	ld.sh	r0,r0[0x0]
80003e16:	3d f8       	mov	r8,-33

80003e18 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
80003e18:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003e1c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003e20:	d3 03       	ssrf	0x10
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
80003e22:	49 99       	lddpc	r9,80003e84 <udi_cdc_rx_start+0x6c>
80003e24:	13 87       	ld.ub	r7,r9[0x0]
	if (udi_cdc_rx_trans_ongoing[port] ||
80003e26:	49 99       	lddpc	r9,80003e88 <udi_cdc_rx_start+0x70>
80003e28:	13 89       	ld.ub	r9,r9[0x0]
80003e2a:	58 09       	cp.w	r9,0
80003e2c:	c0 a1       	brne	80003e40 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
80003e2e:	49 89       	lddpc	r9,80003e8c <udi_cdc_rx_start+0x74>
80003e30:	92 09       	ld.sh	r9,r9[0x0]
80003e32:	49 8a       	lddpc	r10,80003e90 <udi_cdc_rx_start+0x78>
80003e34:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
80003e38:	f2 0a 19 00 	cp.h	r10,r9
80003e3c:	e0 88 00 08 	brls	80003e4c <udi_cdc_rx_start+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003e40:	e6 18 00 01 	andh	r8,0x1,COH
80003e44:	c0 21       	brne	80003e48 <udi_cdc_rx_start+0x30>
      cpu_irq_enable();
80003e46:	d5 03       	csrf	0x10
   }

	barrier();
80003e48:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
80003e4c:	30 0a       	mov	r10,0
80003e4e:	49 09       	lddpc	r9,80003e8c <udi_cdc_rx_start+0x74>
80003e50:	b2 0a       	st.h	r9[0x0],r10
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80003e52:	58 07       	cp.w	r7,0
80003e54:	5f 0a       	sreq	r10
80003e56:	48 c9       	lddpc	r9,80003e84 <udi_cdc_rx_start+0x6c>
80003e58:	b2 8a       	st.b	r9[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
80003e5a:	30 1a       	mov	r10,1
80003e5c:	48 b9       	lddpc	r9,80003e88 <udi_cdc_rx_start+0x70>
80003e5e:	b2 8a       	st.b	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003e60:	e6 18 00 01 	andh	r8,0x1,COH
80003e64:	c0 21       	brne	80003e68 <udi_cdc_rx_start+0x50>
      cpu_irq_enable();
80003e66:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
80003e68:	30 0c       	mov	r12,0
80003e6a:	f0 1f 00 0b 	mcall	80003e94 <udi_cdc_rx_start+0x7c>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
80003e6e:	a7 67       	lsl	r7,0x6
80003e70:	48 a8       	lddpc	r8,80003e98 <udi_cdc_rx_start+0x80>
80003e72:	34 09       	mov	r9,64
80003e74:	48 aa       	lddpc	r10,80003e9c <udi_cdc_rx_start+0x84>
80003e76:	0e 0a       	add	r10,r7
80003e78:	30 1b       	mov	r11,1
80003e7a:	30 2c       	mov	r12,2
80003e7c:	f0 1f 00 09 	mcall	80003ea0 <udi_cdc_rx_start+0x88>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
80003e80:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e84:	00 00       	add	r0,r0
80003e86:	04 34       	cp.w	r4,r2
80003e88:	00 00       	add	r0,r0
80003e8a:	04 c8       	st.b	r2++,r8
80003e8c:	00 00       	add	r0,r0
80003e8e:	04 2a       	rsub	r10,r2
80003e90:	00 00       	add	r0,r0
80003e92:	04 24       	rsub	r4,r2
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	3d f8       	mov	r8,-33
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	3f 44       	mov	r4,-12
80003e9c:	00 00       	add	r0,r0
80003e9e:	04 48       	or	r8,r2
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	2d 4c       	sub	r12,-44

80003ea4 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
80003ea4:	d4 31       	pushm	r0-r7,lr
80003ea6:	14 97       	mov	r7,r10
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
80003ea8:	16 94       	mov	r4,r11
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80003eaa:	49 b5       	lddpc	r5,80003f14 <udi_cdc_multi_read_buf+0x70>
	buf_sel = udi_cdc_rx_buf_sel[port];
80003eac:	49 b3       	lddpc	r3,80003f18 <udi_cdc_multi_read_buf+0x74>
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
80003eae:	49 c2       	lddpc	r2,80003f1c <udi_cdc_multi_read_buf+0x78>
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
80003eb0:	49 c1       	lddpc	r1,80003f20 <udi_cdc_multi_read_buf+0x7c>
	udi_cdc_rx_pos[port] += copy_nb;
	ptr_buf += copy_nb;
	size -= copy_nb;
	udi_cdc_rx_start(port);
80003eb2:	30 00       	mov	r0,0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003eb4:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003eb8:	d3 03       	ssrf	0x10
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80003eba:	8a 09       	ld.sh	r9,r5[0x0]
	buf_sel = udi_cdc_rx_buf_sel[port];
80003ebc:	07 88       	ld.ub	r8,r3[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003ebe:	e6 1a 00 01 	andh	r10,0x1,COH
80003ec2:	c0 21       	brne	80003ec6 <udi_cdc_multi_read_buf+0x22>
      cpu_irq_enable();
80003ec4:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
80003ec6:	e4 08 04 16 	ld.sh	r6,r2[r8<<0x1]
80003eca:	ec 09 19 00 	cp.h	r9,r6
80003ece:	c0 63       	brcs	80003eda <udi_cdc_multi_read_buf+0x36>
		if (!udi_cdc_data_running) {
80003ed0:	49 59       	lddpc	r9,80003f24 <udi_cdc_multi_read_buf+0x80>
80003ed2:	13 88       	ld.ub	r8,r9[0x0]
80003ed4:	58 08       	cp.w	r8,0
80003ed6:	ce f1       	brne	80003eb4 <udi_cdc_multi_read_buf+0x10>
80003ed8:	c1 c8       	rjmp	80003f10 <udi_cdc_multi_read_buf+0x6c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
80003eda:	5c 76       	castu.h	r6
80003edc:	5c 79       	castu.h	r9
80003ede:	12 16       	sub	r6,r9
80003ee0:	0c 37       	cp.w	r7,r6
80003ee2:	ee 06 17 80 	movls	r6,r7
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
80003ee6:	f0 0b 15 06 	lsl	r11,r8,0x6
80003eea:	12 0b       	add	r11,r9
80003eec:	0c 9a       	mov	r10,r6
80003eee:	e2 0b 00 0b 	add	r11,r1,r11
80003ef2:	08 9c       	mov	r12,r4
80003ef4:	f0 1f 00 0d 	mcall	80003f28 <udi_cdc_multi_read_buf+0x84>
	udi_cdc_rx_pos[port] += copy_nb;
80003ef8:	8a 08       	ld.sh	r8,r5[0x0]
80003efa:	ec 08 00 08 	add	r8,r6,r8
80003efe:	aa 08       	st.h	r5[0x0],r8
	ptr_buf += copy_nb;
	size -= copy_nb;
80003f00:	0c 17       	sub	r7,r6
	udi_cdc_rx_start(port);
80003f02:	00 9c       	mov	r12,r0
80003f04:	f0 1f 00 0a 	mcall	80003f2c <udi_cdc_multi_read_buf+0x88>

	if (size) {
80003f08:	58 07       	cp.w	r7,0
80003f0a:	c0 30       	breq	80003f10 <udi_cdc_multi_read_buf+0x6c>
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
	udi_cdc_rx_pos[port] += copy_nb;
	ptr_buf += copy_nb;
80003f0c:	0c 04       	add	r4,r6
80003f0e:	cd 3b       	rjmp	80003eb4 <udi_cdc_multi_read_buf+0x10>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
80003f10:	0e 9c       	mov	r12,r7
80003f12:	d8 32       	popm	r0-r7,pc
80003f14:	00 00       	add	r0,r0
80003f16:	04 2a       	rsub	r10,r2
80003f18:	00 00       	add	r0,r0
80003f1a:	04 34       	cp.w	r4,r2
80003f1c:	00 00       	add	r0,r0
80003f1e:	04 24       	rsub	r4,r2
80003f20:	00 00       	add	r0,r0
80003f22:	04 48       	or	r8,r2
80003f24:	00 00       	add	r0,r0
80003f26:	04 30       	cp.w	r0,r2
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	4c 48       	lddpc	r8,80004038 <udi_cdc_tx_send+0x9c>
80003f2c:	80 00       	ld.sh	r0,r0[0x0]
80003f2e:	3e 18       	mov	r8,-31

80003f30 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
80003f30:	d4 01       	pushm	lr
	return udi_cdc_multi_read_buf(0, buf, size);
80003f32:	16 9a       	mov	r10,r11
80003f34:	18 9b       	mov	r11,r12
80003f36:	30 0c       	mov	r12,0
80003f38:	f0 1f 00 02 	mcall	80003f40 <udi_cdc_read_buf+0x10>
}
80003f3c:	d8 02       	popm	pc
80003f3e:	00 00       	add	r0,r0
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	3e a4       	mov	r4,-22

80003f44 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80003f44:	d4 01       	pushm	lr
80003f46:	14 9e       	mov	lr,r10
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80003f48:	58 0c       	cp.w	r12,0
80003f4a:	c1 c1       	brne	80003f82 <udi_cdc_data_received+0x3e>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
80003f4c:	48 e8       	lddpc	r8,80003f84 <udi_cdc_data_received+0x40>
80003f4e:	11 88       	ld.ub	r8,r8[0x0]
80003f50:	58 08       	cp.w	r8,0
80003f52:	5f 0a       	sreq	r10
	if (!n) {
80003f54:	58 0b       	cp.w	r11,0
80003f56:	c0 d1       	brne	80003f70 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
80003f58:	a7 6a       	lsl	r10,0x6
80003f5a:	fe c8 00 16 	sub	r8,pc,22
80003f5e:	34 09       	mov	r9,64
80003f60:	48 ab       	lddpc	r11,80003f88 <udi_cdc_data_received+0x44>
80003f62:	f6 0a 00 0a 	add	r10,r11,r10
80003f66:	30 1b       	mov	r11,1
80003f68:	1c 9c       	mov	r12,lr
80003f6a:	f0 1f 00 09 	mcall	80003f8c <udi_cdc_data_received+0x48>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
80003f6e:	d8 02       	popm	pc
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
80003f70:	48 88       	lddpc	r8,80003f90 <udi_cdc_data_received+0x4c>
80003f72:	f0 0a 0a 1b 	st.h	r8[r10<<0x1],r11
	udi_cdc_rx_trans_ongoing[port] = false;
80003f76:	30 09       	mov	r9,0
80003f78:	48 78       	lddpc	r8,80003f94 <udi_cdc_data_received+0x50>
80003f7a:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start(port);
80003f7c:	30 0c       	mov	r12,0
80003f7e:	f0 1f 00 07 	mcall	80003f98 <udi_cdc_data_received+0x54>
80003f82:	d8 02       	popm	pc
80003f84:	00 00       	add	r0,r0
80003f86:	04 34       	cp.w	r4,r2
80003f88:	00 00       	add	r0,r0
80003f8a:	04 48       	or	r8,r2
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	2d 4c       	sub	r12,-44
80003f90:	00 00       	add	r0,r0
80003f92:	04 24       	rsub	r4,r2
80003f94:	00 00       	add	r0,r0
80003f96:	04 c8       	st.b	r2++,r8
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	3e 18       	mov	r8,-31

80003f9c <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
80003f9c:	eb cd 40 e0 	pushm	r5-r7,lr

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
80003fa0:	4c 08       	lddpc	r8,800040a0 <udi_cdc_tx_send+0x104>
80003fa2:	11 88       	ld.ub	r8,r8[0x0]
80003fa4:	58 08       	cp.w	r8,0
80003fa6:	c7 a1       	brne	8000409a <udi_cdc_tx_send+0xfe>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
80003fa8:	f0 1f 00 3f 	mcall	800040a4 <udi_cdc_tx_send+0x108>
80003fac:	c0 a0       	breq	80003fc0 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
80003fae:	4b f8       	lddpc	r8,800040a8 <udi_cdc_tx_send+0x10c>
80003fb0:	90 07       	ld.sh	r7,r8[0x0]
80003fb2:	f0 1f 00 3f 	mcall	800040ac <udi_cdc_tx_send+0x110>
80003fb6:	f8 07 19 00 	cp.h	r7,r12
80003fba:	c0 a1       	brne	80003fce <udi_cdc_tx_send+0x32>
80003fbc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
80003fc0:	4b a8       	lddpc	r8,800040a8 <udi_cdc_tx_send+0x10c>
80003fc2:	90 07       	ld.sh	r7,r8[0x0]
80003fc4:	f0 1f 00 3b 	mcall	800040b0 <udi_cdc_tx_send+0x114>
80003fc8:	f8 07 19 00 	cp.h	r7,r12
80003fcc:	c6 70       	breq	8000409a <udi_cdc_tx_send+0xfe>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003fce:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003fd2:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
80003fd4:	4b 88       	lddpc	r8,800040b4 <udi_cdc_tx_send+0x118>
80003fd6:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
80003fd8:	4b 88       	lddpc	r8,800040b8 <udi_cdc_tx_send+0x11c>
80003fda:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003fde:	30 08       	mov	r8,0
80003fe0:	f0 09 19 00 	cp.h	r9,r8
80003fe4:	c2 01       	brne	80004024 <udi_cdc_tx_send+0x88>
		sof_zlp_counter++;
80003fe6:	4b 68       	lddpc	r8,800040bc <udi_cdc_tx_send+0x120>
80003fe8:	90 09       	ld.sh	r9,r8[0x0]
80003fea:	2f f9       	sub	r9,-1
80003fec:	b0 09       	st.h	r8[0x0],r9
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
80003fee:	f0 1f 00 2e 	mcall	800040a4 <udi_cdc_tx_send+0x108>
80003ff2:	c0 81       	brne	80004002 <udi_cdc_tx_send+0x66>
80003ff4:	4b 28       	lddpc	r8,800040bc <udi_cdc_tx_send+0x120>
80003ff6:	90 09       	ld.sh	r9,r8[0x0]
80003ff8:	36 38       	mov	r8,99
80003ffa:	f0 09 19 00 	cp.h	r9,r8
80003ffe:	e0 88 00 0d 	brls	80004018 <udi_cdc_tx_send+0x7c>
80004002:	f0 1f 00 29 	mcall	800040a4 <udi_cdc_tx_send+0x108>
80004006:	c0 f0       	breq	80004024 <udi_cdc_tx_send+0x88>
80004008:	4a d8       	lddpc	r8,800040bc <udi_cdc_tx_send+0x120>
8000400a:	90 09       	ld.sh	r9,r8[0x0]
8000400c:	e0 68 03 1f 	mov	r8,799
80004010:	f0 09 19 00 	cp.h	r9,r8
80004014:	e0 8b 00 08 	brhi	80004024 <udi_cdc_tx_send+0x88>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004018:	e6 16 00 01 	andh	r6,0x1,COH
8000401c:	c0 21       	brne	80004020 <udi_cdc_tx_send+0x84>
      cpu_irq_enable();
8000401e:	d5 03       	csrf	0x10
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
80004020:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		}
	}
	sof_zlp_counter = 0;
80004024:	30 09       	mov	r9,0
80004026:	4a 68       	lddpc	r8,800040bc <udi_cdc_tx_send+0x120>
80004028:	b0 09       	st.h	r8[0x0],r9

	if (!udi_cdc_tx_both_buf_to_send[port]) {
8000402a:	4a 68       	lddpc	r8,800040c0 <udi_cdc_tx_send+0x124>
8000402c:	11 88       	ld.ub	r8,r8[0x0]
8000402e:	58 08       	cp.w	r8,0
80004030:	c0 61       	brne	8000403c <udi_cdc_tx_send+0xa0>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80004032:	58 07       	cp.w	r7,0
80004034:	5f 09       	sreq	r9
80004036:	4a 08       	lddpc	r8,800040b4 <udi_cdc_tx_send+0x118>
80004038:	b0 89       	st.b	r8[0x0],r9
8000403a:	c0 38       	rjmp	80004040 <udi_cdc_tx_send+0xa4>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000403c:	58 07       	cp.w	r7,0
8000403e:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing[port] = true;
80004040:	30 19       	mov	r9,1
80004042:	49 88       	lddpc	r8,800040a0 <udi_cdc_tx_send+0x104>
80004044:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004046:	e6 16 00 01 	andh	r6,0x1,COH
8000404a:	c0 21       	brne	8000404e <udi_cdc_tx_send+0xb2>
      cpu_irq_enable();
8000404c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
8000404e:	0e 95       	mov	r5,r7
80004050:	49 a8       	lddpc	r8,800040b8 <udi_cdc_tx_send+0x11c>
80004052:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80004056:	34 08       	mov	r8,64
80004058:	f0 09 19 00 	cp.h	r9,r8
8000405c:	5f 16       	srne	r6
	if (b_short_packet) {
8000405e:	58 06       	cp.w	r6,0
80004060:	c0 e0       	breq	8000407c <udi_cdc_tx_send+0xe0>
		if (udd_is_high_speed()) {
80004062:	f0 1f 00 11 	mcall	800040a4 <udi_cdc_tx_send+0x108>
80004066:	c0 60       	breq	80004072 <udi_cdc_tx_send+0xd6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
80004068:	f0 1f 00 11 	mcall	800040ac <udi_cdc_tx_send+0x110>
8000406c:	48 f8       	lddpc	r8,800040a8 <udi_cdc_tx_send+0x10c>
8000406e:	b0 0c       	st.h	r8[0x0],r12
80004070:	c0 98       	rjmp	80004082 <udi_cdc_tx_send+0xe6>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
80004072:	f0 1f 00 10 	mcall	800040b0 <udi_cdc_tx_send+0x114>
80004076:	48 d8       	lddpc	r8,800040a8 <udi_cdc_tx_send+0x10c>
80004078:	b0 0c       	st.h	r8[0x0],r12
8000407a:	c0 48       	rjmp	80004082 <udi_cdc_tx_send+0xe6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
8000407c:	30 09       	mov	r9,0
8000407e:	48 b8       	lddpc	r8,800040a8 <udi_cdc_tx_send+0x10c>
80004080:	b0 09       	st.h	r8[0x0],r9
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80004082:	a7 67       	lsl	r7,0x6
80004084:	49 08       	lddpc	r8,800040c4 <udi_cdc_tx_send+0x128>
80004086:	48 d9       	lddpc	r9,800040b8 <udi_cdc_tx_send+0x11c>
80004088:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
8000408c:	48 fa       	lddpc	r10,800040c8 <udi_cdc_tx_send+0x12c>
8000408e:	0e 0a       	add	r10,r7
80004090:	0c 9b       	mov	r11,r6
80004092:	e0 6c 00 81 	mov	r12,129
80004096:	f0 1f 00 0e 	mcall	800040cc <udi_cdc_tx_send+0x130>
8000409a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000409e:	00 00       	add	r0,r0
800040a0:	00 00       	add	r0,r0
800040a2:	04 38       	cp.w	r8,r2
800040a4:	80 00       	ld.sh	r0,r0[0x0]
800040a6:	27 2a       	sub	r10,114
800040a8:	00 00       	add	r0,r0
800040aa:	04 2e       	rsub	lr,r2
800040ac:	80 00       	ld.sh	r0,r0[0x0]
800040ae:	27 66       	sub	r6,118
800040b0:	80 00       	ld.sh	r0,r0[0x0]
800040b2:	27 5a       	sub	r10,117
800040b4:	00 00       	add	r0,r0
800040b6:	03 9c       	ld.ub	r12,r1[0x1]
800040b8:	00 00       	add	r0,r0
800040ba:	03 a0       	ld.ub	r0,r1[0x2]
800040bc:	00 00       	add	r0,r0
800040be:	04 2c       	rsub	r12,r2
800040c0:	00 00       	add	r0,r0
800040c2:	04 cc       	st.b	r2++,r12
800040c4:	80 00       	ld.sh	r0,r0[0x0]
800040c6:	40 e0       	lddsp	r0,sp[0x38]
800040c8:	00 00       	add	r0,r0
800040ca:	03 a4       	ld.ub	r4,r1[0x2]
800040cc:	80 00       	ld.sh	r0,r0[0x0]
800040ce:	2d 4c       	sub	r12,-44

800040d0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800040d0:	d4 01       	pushm	lr
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
800040d2:	30 0c       	mov	r12,0
800040d4:	f0 1f 00 02 	mcall	800040dc <udi_cdc_data_sof_notify+0xc>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
800040d8:	d8 02       	popm	pc
800040da:	00 00       	add	r0,r0
800040dc:	80 00       	ld.sh	r0,r0[0x0]
800040de:	3f 9c       	mov	r12,-7

800040e0 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
800040e0:	d4 01       	pushm	lr
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
800040e2:	58 0c       	cp.w	r12,0
800040e4:	c1 21       	brne	80004108 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
800040e6:	48 a8       	lddpc	r8,8000410c <udi_cdc_data_sent+0x2c>
800040e8:	11 88       	ld.ub	r8,r8[0x0]
800040ea:	58 08       	cp.w	r8,0
800040ec:	f9 b9 01 00 	movne	r9,0
800040f0:	f9 b9 00 02 	moveq	r9,2
800040f4:	30 08       	mov	r8,0
800040f6:	48 7a       	lddpc	r10,80004110 <udi_cdc_data_sent+0x30>
800040f8:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
800040fc:	48 69       	lddpc	r9,80004114 <udi_cdc_data_sent+0x34>
800040fe:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing[port] = false;
80004100:	48 69       	lddpc	r9,80004118 <udi_cdc_data_sent+0x38>
80004102:	b2 88       	st.b	r9[0x0],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
80004104:	f0 1f 00 06 	mcall	8000411c <udi_cdc_data_sent+0x3c>
80004108:	d8 02       	popm	pc
8000410a:	00 00       	add	r0,r0
8000410c:	00 00       	add	r0,r0
8000410e:	03 9c       	ld.ub	r12,r1[0x1]
80004110:	00 00       	add	r0,r0
80004112:	03 a0       	ld.ub	r0,r1[0x2]
80004114:	00 00       	add	r0,r0
80004116:	04 cc       	st.b	r2++,r12
80004118:	00 00       	add	r0,r0
8000411a:	04 38       	cp.w	r8,r2
8000411c:	80 00       	ld.sh	r0,r0[0x0]
8000411e:	3f 9c       	mov	r12,-7

80004120 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
80004120:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
80004124:	30 07       	mov	r7,0
80004126:	49 88       	lddpc	r8,80004184 <udi_cdc_data_enable+0x64>
80004128:	b0 87       	st.b	r8[0x0],r7
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
8000412a:	49 88       	lddpc	r8,80004188 <udi_cdc_data_enable+0x68>
8000412c:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_both_buf_to_send[port] = false;
8000412e:	49 88       	lddpc	r8,8000418c <udi_cdc_data_enable+0x6c>
80004130:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_sel[port] = 0;
80004132:	49 88       	lddpc	r8,80004190 <udi_cdc_data_enable+0x70>
80004134:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_nb[port][0] = 0;
80004136:	49 88       	lddpc	r8,80004194 <udi_cdc_data_enable+0x74>
80004138:	30 06       	mov	r6,0
8000413a:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_buf_nb[port][1] = 0;
8000413c:	b0 16       	st.h	r8[0x2],r6
	udi_cdc_tx_sof_num[port] = 0;
8000413e:	49 78       	lddpc	r8,80004198 <udi_cdc_data_enable+0x78>
80004140:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_send(port);
80004142:	30 0c       	mov	r12,0
80004144:	f0 1f 00 16 	mcall	8000419c <udi_cdc_data_enable+0x7c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80004148:	49 68       	lddpc	r8,800041a0 <udi_cdc_data_enable+0x80>
8000414a:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_sel[port] = 0;
8000414c:	49 68       	lddpc	r8,800041a4 <udi_cdc_data_enable+0x84>
8000414e:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_nb[port][0] = 0;
80004150:	49 68       	lddpc	r8,800041a8 <udi_cdc_data_enable+0x88>
80004152:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_rx_pos[port] = 0;
80004154:	49 68       	lddpc	r8,800041ac <udi_cdc_data_enable+0x8c>
80004156:	b0 06       	st.h	r8[0x0],r6
	if (!udi_cdc_rx_start(port)) {
80004158:	30 0c       	mov	r12,0
8000415a:	f0 1f 00 16 	mcall	800041b0 <udi_cdc_data_enable+0x90>
8000415e:	c1 00       	breq	8000417e <udi_cdc_data_enable+0x5e>
		return false;
	}
	udi_cdc_nb_data_enabled++;
80004160:	48 98       	lddpc	r8,80004184 <udi_cdc_data_enable+0x64>
80004162:	11 89       	ld.ub	r9,r8[0x0]
80004164:	2f f9       	sub	r9,-1
80004166:	b0 89       	st.b	r8[0x0],r9
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
80004168:	11 89       	ld.ub	r9,r8[0x0]
8000416a:	30 18       	mov	r8,1
8000416c:	f0 09 18 00 	cp.b	r9,r8
80004170:	c0 30       	breq	80004176 <udi_cdc_data_enable+0x56>
80004172:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
		udi_cdc_data_running = true;
80004176:	30 19       	mov	r9,1
80004178:	48 f8       	lddpc	r8,800041b4 <udi_cdc_data_enable+0x94>
8000417a:	b0 89       	st.b	r8[0x0],r9
8000417c:	30 1c       	mov	r12,1
	}
	return true;
}
8000417e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004182:	00 00       	add	r0,r0
80004184:	00 00       	add	r0,r0
80004186:	03 9b       	ld.ub	r11,r1[0x1]
80004188:	00 00       	add	r0,r0
8000418a:	04 38       	cp.w	r8,r2
8000418c:	00 00       	add	r0,r0
8000418e:	04 cc       	st.b	r2++,r12
80004190:	00 00       	add	r0,r0
80004192:	03 9c       	ld.ub	r12,r1[0x1]
80004194:	00 00       	add	r0,r0
80004196:	03 a0       	ld.ub	r0,r1[0x2]
80004198:	00 00       	add	r0,r0
8000419a:	04 2e       	rsub	lr,r2
8000419c:	80 00       	ld.sh	r0,r0[0x0]
8000419e:	3f 9c       	mov	r12,-7
800041a0:	00 00       	add	r0,r0
800041a2:	04 c8       	st.b	r2++,r8
800041a4:	00 00       	add	r0,r0
800041a6:	04 34       	cp.w	r4,r2
800041a8:	00 00       	add	r0,r0
800041aa:	04 24       	rsub	r4,r2
800041ac:	00 00       	add	r0,r0
800041ae:	04 2a       	rsub	r10,r2
800041b0:	80 00       	ld.sh	r0,r0[0x0]
800041b2:	3e 18       	mov	r8,-31
800041b4:	00 00       	add	r0,r0
800041b6:	04 30       	cp.w	r0,r2

800041b8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800041b8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800041bc:	49 18       	lddpc	r8,80004200 <udc_sof_notify+0x48>
800041be:	11 89       	ld.ub	r9,r8[0x0]
800041c0:	30 08       	mov	r8,0
800041c2:	f0 09 18 00 	cp.b	r9,r8
800041c6:	c1 b0       	breq	800041fc <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800041c8:	48 f8       	lddpc	r8,80004204 <udc_sof_notify+0x4c>
800041ca:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800041cc:	70 09       	ld.w	r9,r8[0x0]
800041ce:	13 ca       	ld.ub	r10,r9[0x4]
800041d0:	30 09       	mov	r9,0
800041d2:	f2 0a 18 00 	cp.b	r10,r9
800041d6:	c1 30       	breq	800041fc <udc_sof_notify+0x44>
800041d8:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800041da:	48 b6       	lddpc	r6,80004204 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800041dc:	70 18       	ld.w	r8,r8[0x4]
800041de:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800041e2:	70 48       	ld.w	r8,r8[0x10]
800041e4:	58 08       	cp.w	r8,0
800041e6:	c0 20       	breq	800041ea <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800041e8:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800041ea:	2f f7       	sub	r7,-1
800041ec:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800041ee:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800041f0:	70 09       	ld.w	r9,r8[0x0]
800041f2:	13 c9       	ld.ub	r9,r9[0x4]
800041f4:	ee 09 18 00 	cp.b	r9,r7
800041f8:	fe 9b ff f2 	brhi	800041dc <udc_sof_notify+0x24>
800041fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004200:	00 00       	add	r0,r0
80004202:	04 dc       	st.w	--r2,r12
80004204:	00 00       	add	r0,r0
80004206:	04 d4       	st.w	--r2,r4

80004208 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80004208:	48 78       	lddpc	r8,80004224 <udc_get_eof_conf+0x1c>
8000420a:	70 08       	ld.w	r8,r8[0x0]
8000420c:	70 08       	ld.w	r8,r8[0x0]
8000420e:	11 aa       	ld.ub	r10,r8[0x2]
80004210:	11 b9       	ld.ub	r9,r8[0x3]
80004212:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80004216:	5c c9       	swap.bh	r9
80004218:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
8000421c:	f0 0c 00 0c 	add	r12,r8,r12
80004220:	5e fc       	retal	r12
80004222:	00 00       	add	r0,r0
80004224:	00 00       	add	r0,r0
80004226:	04 d4       	st.w	--r2,r4

80004228 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80004228:	eb cd 40 e0 	pushm	r5-r7,lr
8000422c:	18 97       	mov	r7,r12
8000422e:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80004230:	49 b8       	lddpc	r8,8000429c <udc_update_iface_desc+0x74>
80004232:	11 89       	ld.ub	r9,r8[0x0]
80004234:	30 08       	mov	r8,0
80004236:	f0 09 18 00 	cp.b	r9,r8
8000423a:	c2 f0       	breq	80004298 <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000423c:	49 98       	lddpc	r8,800042a0 <udc_update_iface_desc+0x78>
8000423e:	70 08       	ld.w	r8,r8[0x0]
80004240:	70 08       	ld.w	r8,r8[0x0]
80004242:	11 c9       	ld.ub	r9,r8[0x4]
80004244:	18 9e       	mov	lr,r12
80004246:	f8 09 18 00 	cp.b	r9,r12
8000424a:	e0 88 00 27 	brls	80004298 <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000424e:	49 65       	lddpc	r5,800042a4 <udc_update_iface_desc+0x7c>
80004250:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80004252:	f0 1f 00 16 	mcall	800042a8 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80004256:	6a 08       	ld.w	r8,r5[0x0]
80004258:	10 3c       	cp.w	r12,r8
8000425a:	e0 88 00 1f 	brls	80004298 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000425e:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80004260:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80004262:	11 9a       	ld.ub	r10,r8[0x1]
80004264:	f6 0a 18 00 	cp.b	r10,r11
80004268:	c0 a1       	brne	8000427c <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000426a:	11 aa       	ld.ub	r10,r8[0x2]
8000426c:	0e 9e       	mov	lr,r7
8000426e:	ee 0a 18 00 	cp.b	r10,r7
80004272:	c0 51       	brne	8000427c <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80004274:	11 ba       	ld.ub	r10,r8[0x3]
80004276:	ec 0a 18 00 	cp.b	r10,r6
8000427a:	c0 b0       	breq	80004290 <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000427c:	13 88       	ld.ub	r8,r9[0x0]
8000427e:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80004282:	10 3c       	cp.w	r12,r8
80004284:	fe 9b ff ee 	brhi	80004260 <udc_update_iface_desc+0x38>
80004288:	48 79       	lddpc	r9,800042a4 <udc_update_iface_desc+0x7c>
8000428a:	93 08       	st.w	r9[0x0],r8
8000428c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004290:	48 59       	lddpc	r9,800042a4 <udc_update_iface_desc+0x7c>
80004292:	93 08       	st.w	r9[0x0],r8
80004294:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004298:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000429c:	00 00       	add	r0,r0
8000429e:	04 dc       	st.w	--r2,r12
800042a0:	00 00       	add	r0,r0
800042a2:	04 d4       	st.w	--r2,r4
800042a4:	00 00       	add	r0,r0
800042a6:	04 e0       	st.h	--r2,r0
800042a8:	80 00       	ld.sh	r0,r0[0x0]
800042aa:	42 08       	lddsp	r8,sp[0x80]

800042ac <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800042ac:	eb cd 40 c0 	pushm	r6-r7,lr
800042b0:	18 96       	mov	r6,r12
800042b2:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800042b4:	f0 1f 00 11 	mcall	800042f8 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800042b8:	0d 88       	ld.ub	r8,r6[0x0]
800042ba:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800042bc:	0c 3c       	cp.w	r12,r6
800042be:	e0 88 00 19 	brls	800042f0 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
800042c2:	0d 98       	ld.ub	r8,r6[0x1]
800042c4:	30 49       	mov	r9,4
800042c6:	f2 08 18 00 	cp.b	r8,r9
800042ca:	c1 30       	breq	800042f0 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
800042cc:	ee 08 18 00 	cp.b	r8,r7
800042d0:	c0 a1       	brne	800042e4 <udc_next_desc_in_iface+0x38>
800042d2:	c1 08       	rjmp	800042f2 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
800042d4:	0d 98       	ld.ub	r8,r6[0x1]
800042d6:	f2 08 18 00 	cp.b	r8,r9
800042da:	c0 b0       	breq	800042f0 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
800042dc:	ee 08 18 00 	cp.b	r8,r7
800042e0:	c0 31       	brne	800042e6 <udc_next_desc_in_iface+0x3a>
800042e2:	c0 88       	rjmp	800042f2 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
800042e4:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800042e6:	0d 88       	ld.ub	r8,r6[0x0]
800042e8:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800042ea:	0c 3c       	cp.w	r12,r6
800042ec:	fe 9b ff f4 	brhi	800042d4 <udc_next_desc_in_iface+0x28>
800042f0:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
800042f2:	0c 9c       	mov	r12,r6
800042f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800042f8:	80 00       	ld.sh	r0,r0[0x0]
800042fa:	42 08       	lddsp	r8,sp[0x80]

800042fc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800042fc:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800042fe:	48 48       	lddpc	r8,8000430c <udc_valid_address+0x10>
80004300:	11 bc       	ld.ub	r12,r8[0x3]
80004302:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80004306:	f0 1f 00 03 	mcall	80004310 <udc_valid_address+0x14>
}
8000430a:	d8 02       	popm	pc
8000430c:	00 00       	add	r0,r0
8000430e:	05 a8       	ld.ub	r8,r2[0x2]
80004310:	80 00       	ld.sh	r0,r0[0x0]
80004312:	27 2c       	sub	r12,114

80004314 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80004314:	eb cd 40 e0 	pushm	r5-r7,lr
80004318:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000431a:	f0 1f 00 12 	mcall	80004360 <udc_iface_enable+0x4c>
8000431e:	c1 f0       	breq	8000435c <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80004320:	49 18       	lddpc	r8,80004364 <udc_iface_enable+0x50>
80004322:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004324:	30 56       	mov	r6,5
80004326:	0c 9b       	mov	r11,r6
80004328:	0e 9c       	mov	r12,r7
8000432a:	f0 1f 00 10 	mcall	80004368 <udc_iface_enable+0x54>
8000432e:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80004330:	c0 d0       	breq	8000434a <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80004332:	19 ca       	ld.ub	r10,r12[0x4]
80004334:	19 d8       	ld.ub	r8,r12[0x5]
80004336:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000433a:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000433c:	5c 7a       	castu.h	r10
8000433e:	19 bb       	ld.ub	r11,r12[0x3]
80004340:	19 ac       	ld.ub	r12,r12[0x2]
80004342:	f0 1f 00 0b 	mcall	8000436c <udc_iface_enable+0x58>
80004346:	cf 01       	brne	80004326 <udc_iface_enable+0x12>
80004348:	c0 a8       	rjmp	8000435c <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000434a:	48 a8       	lddpc	r8,80004370 <udc_iface_enable+0x5c>
8000434c:	70 08       	ld.w	r8,r8[0x0]
8000434e:	70 18       	ld.w	r8,r8[0x4]
80004350:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80004354:	70 0c       	ld.w	r12,r8[0x0]
80004356:	5d 1c       	icall	r12
80004358:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000435c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004360:	80 00       	ld.sh	r0,r0[0x0]
80004362:	42 28       	lddsp	r8,sp[0x88]
80004364:	00 00       	add	r0,r0
80004366:	04 e0       	st.h	--r2,r0
80004368:	80 00       	ld.sh	r0,r0[0x0]
8000436a:	42 ac       	lddsp	r12,sp[0xa8]
8000436c:	80 00       	ld.sh	r0,r0[0x0]
8000436e:	2f 80       	sub	r0,-8
80004370:	00 00       	add	r0,r0
80004372:	04 d4       	st.w	--r2,r4

80004374 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80004374:	eb cd 40 e0 	pushm	r5-r7,lr
80004378:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000437a:	18 97       	mov	r7,r12
8000437c:	30 0b       	mov	r11,0
8000437e:	f0 1f 00 12 	mcall	800043c4 <udc_iface_disable+0x50>
80004382:	c1 e0       	breq	800043be <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80004384:	49 18       	lddpc	r8,800043c8 <udc_iface_disable+0x54>
80004386:	70 08       	ld.w	r8,r8[0x0]
80004388:	70 18       	ld.w	r8,r8[0x4]
8000438a:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000438e:	6a 3c       	ld.w	r12,r5[0xc]
80004390:	5d 1c       	icall	r12
80004392:	18 9b       	mov	r11,r12
80004394:	0c 9c       	mov	r12,r6
80004396:	f0 1f 00 0c 	mcall	800043c4 <udc_iface_disable+0x50>
8000439a:	c1 20       	breq	800043be <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000439c:	48 c8       	lddpc	r8,800043cc <udc_iface_disable+0x58>
8000439e:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800043a0:	30 56       	mov	r6,5
800043a2:	0c 9b       	mov	r11,r6
800043a4:	0e 9c       	mov	r12,r7
800043a6:	f0 1f 00 0b 	mcall	800043d0 <udc_iface_disable+0x5c>
800043aa:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
800043ac:	c0 50       	breq	800043b6 <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
800043ae:	19 ac       	ld.ub	r12,r12[0x2]
800043b0:	f0 1f 00 09 	mcall	800043d4 <udc_iface_disable+0x60>
		}
800043b4:	cf 7b       	rjmp	800043a2 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
800043b6:	6a 18       	ld.w	r8,r5[0x4]
800043b8:	5d 18       	icall	r8
800043ba:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
800043be:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800043c2:	00 00       	add	r0,r0
800043c4:	80 00       	ld.sh	r0,r0[0x0]
800043c6:	42 28       	lddsp	r8,sp[0x88]
800043c8:	00 00       	add	r0,r0
800043ca:	04 d4       	st.w	--r2,r4
800043cc:	00 00       	add	r0,r0
800043ce:	04 e0       	st.h	--r2,r0
800043d0:	80 00       	ld.sh	r0,r0[0x0]
800043d2:	42 ac       	lddsp	r12,sp[0xa8]
800043d4:	80 00       	ld.sh	r0,r0[0x0]
800043d6:	28 f4       	sub	r4,-113

800043d8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800043d8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800043dc:	49 28       	lddpc	r8,80004424 <udc_reset+0x4c>
800043de:	11 89       	ld.ub	r9,r8[0x0]
800043e0:	30 08       	mov	r8,0
800043e2:	f0 09 18 00 	cp.b	r9,r8
800043e6:	c1 70       	breq	80004414 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800043e8:	49 08       	lddpc	r8,80004428 <udc_reset+0x50>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	70 08       	ld.w	r8,r8[0x0]
800043ee:	11 c9       	ld.ub	r9,r8[0x4]
800043f0:	30 08       	mov	r8,0
800043f2:	f0 09 18 00 	cp.b	r9,r8
800043f6:	c0 f0       	breq	80004414 <udc_reset+0x3c>
800043f8:	30 07       	mov	r7,0
800043fa:	48 c6       	lddpc	r6,80004428 <udc_reset+0x50>
				iface_num++) {
			udc_iface_disable(iface_num);
800043fc:	0e 9c       	mov	r12,r7
800043fe:	f0 1f 00 0c 	mcall	8000442c <udc_reset+0x54>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80004402:	2f f7       	sub	r7,-1
80004404:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004406:	6c 08       	ld.w	r8,r6[0x0]
80004408:	70 08       	ld.w	r8,r8[0x0]
8000440a:	11 c8       	ld.ub	r8,r8[0x4]
8000440c:	ee 08 18 00 	cp.b	r8,r7
80004410:	fe 9b ff f6 	brhi	800043fc <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80004414:	30 09       	mov	r9,0
80004416:	48 48       	lddpc	r8,80004424 <udc_reset+0x4c>
80004418:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000441a:	30 09       	mov	r9,0
8000441c:	48 58       	lddpc	r8,80004430 <udc_reset+0x58>
8000441e:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80004420:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004424:	00 00       	add	r0,r0
80004426:	04 dc       	st.w	--r2,r12
80004428:	00 00       	add	r0,r0
8000442a:	04 d4       	st.w	--r2,r4
8000442c:	80 00       	ld.sh	r0,r0[0x0]
8000442e:	43 74       	lddsp	r4,sp[0xdc]
80004430:	00 00       	add	r0,r0
80004432:	04 da       	st.w	--r2,r10

80004434 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80004434:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80004438:	fe f8 04 e8 	ld.w	r8,pc[1256]
8000443c:	30 09       	mov	r9,0
8000443e:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80004440:	30 0a       	mov	r10,0
80004442:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80004444:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80004446:	11 88       	ld.ub	r8,r8[0x0]
80004448:	10 9a       	mov	r10,r8
8000444a:	f2 08 18 00 	cp.b	r8,r9
8000444e:	c0 94       	brge	80004460 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
80004450:	fe f9 04 d0 	ld.w	r9,pc[1232]
80004454:	92 3b       	ld.sh	r11,r9[0x6]
80004456:	30 09       	mov	r9,0
80004458:	f2 0b 19 00 	cp.h	r11,r9
8000445c:	e0 80 02 59 	breq	8000490e <udc_process_setup+0x4da>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80004460:	10 99       	mov	r9,r8
80004462:	e2 19 00 60 	andl	r9,0x60,COH
80004466:	e0 81 01 fd 	brne	80004860 <udc_process_setup+0x42c>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
8000446a:	f2 0a 18 00 	cp.b	r10,r9
8000446e:	e0 84 01 1d 	brge	800046a8 <udc_process_setup+0x274>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80004472:	fe f9 04 ae 	ld.w	r9,pc[1198]
80004476:	92 39       	ld.sh	r9,r9[0x6]
80004478:	58 09       	cp.w	r9,0
8000447a:	e0 80 01 f3 	breq	80004860 <udc_process_setup+0x42c>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000447e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004482:	e0 81 00 ba 	brne	800045f6 <udc_process_setup+0x1c2>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80004486:	fe fa 04 9a 	ld.w	r10,pc[1178]
8000448a:	15 9a       	ld.ub	r10,r10[0x1]
8000448c:	30 6b       	mov	r11,6
8000448e:	f6 0a 18 00 	cp.b	r10,r11
80004492:	c1 a0       	breq	800044c6 <udc_process_setup+0x92>
80004494:	30 8b       	mov	r11,8
80004496:	f6 0a 18 00 	cp.b	r10,r11
8000449a:	e0 80 00 a1 	breq	800045dc <udc_process_setup+0x1a8>
8000449e:	30 0b       	mov	r11,0
800044a0:	f6 0a 18 00 	cp.b	r10,r11
800044a4:	e0 81 00 a9 	brne	800045f6 <udc_process_setup+0x1c2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
800044a8:	30 28       	mov	r8,2
800044aa:	f0 09 19 00 	cp.h	r9,r8
800044ae:	c0 40       	breq	800044b6 <udc_process_setup+0x82>
800044b0:	30 0c       	mov	r12,0
800044b2:	e0 8f 01 d5 	bral	8000485c <udc_process_setup+0x428>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
800044b6:	30 2b       	mov	r11,2
800044b8:	fe fc 04 6c 	ld.w	r12,pc[1132]
800044bc:	f0 1f 01 1b 	mcall	80004928 <udc_process_setup+0x4f4>
800044c0:	30 1c       	mov	r12,1
800044c2:	e0 8f 01 cd 	bral	8000485c <udc_process_setup+0x428>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
800044c6:	fe f8 04 5a 	ld.w	r8,pc[1114]
800044ca:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
800044cc:	f2 08 16 08 	lsr	r8,r9,0x8
800044d0:	30 2a       	mov	r10,2
800044d2:	f4 08 18 00 	cp.b	r8,r10
800044d6:	c1 80       	breq	80004506 <udc_process_setup+0xd2>
800044d8:	e0 8b 00 07 	brhi	800044e6 <udc_process_setup+0xb2>
800044dc:	30 19       	mov	r9,1
800044de:	f2 08 18 00 	cp.b	r8,r9
800044e2:	c7 a1       	brne	800045d6 <udc_process_setup+0x1a2>
800044e4:	c0 a8       	rjmp	800044f8 <udc_process_setup+0xc4>
800044e6:	30 3a       	mov	r10,3
800044e8:	f4 08 18 00 	cp.b	r8,r10
800044ec:	c3 70       	breq	8000455a <udc_process_setup+0x126>
800044ee:	30 f9       	mov	r9,15
800044f0:	f2 08 18 00 	cp.b	r8,r9
800044f4:	c7 11       	brne	800045d6 <udc_process_setup+0x1a2>
800044f6:	c2 68       	rjmp	80004542 <udc_process_setup+0x10e>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
800044f8:	fe f8 04 34 	ld.w	r8,pc[1076]
800044fc:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
800044fe:	19 8b       	ld.ub	r11,r12[0x0]
80004500:	f0 1f 01 0a 	mcall	80004928 <udc_process_setup+0x4f4>
80004504:	c5 88       	rjmp	800045b4 <udc_process_setup+0x180>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80004506:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80004508:	fe f8 04 24 	ld.w	r8,pc[1060]
8000450c:	70 08       	ld.w	r8,r8[0x0]
8000450e:	f1 38 00 11 	ld.ub	r8,r8[17]
80004512:	f2 08 18 00 	cp.b	r8,r9
80004516:	e0 88 00 60 	brls	800045d6 <udc_process_setup+0x1a2>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000451a:	fe f8 04 12 	ld.w	r8,pc[1042]
8000451e:	70 18       	ld.w	r8,r8[0x4]
80004520:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80004524:	19 a9       	ld.ub	r9,r12[0x2]
80004526:	19 b8       	ld.ub	r8,r12[0x3]
80004528:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000452c:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000452e:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80004532:	f0 1f 00 fe 	mcall	80004928 <udc_process_setup+0x4f4>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80004536:	fe f8 03 ea 	ld.w	r8,pc[1002]
8000453a:	70 28       	ld.w	r8,r8[0x8]
8000453c:	30 29       	mov	r9,2
8000453e:	b0 99       	st.b	r8[0x1],r9
80004540:	c3 a8       	rjmp	800045b4 <udc_process_setup+0x180>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
80004542:	fe f8 03 ea 	ld.w	r8,pc[1002]
80004546:	70 2c       	ld.w	r12,r8[0x8]
80004548:	58 0c       	cp.w	r12,0
8000454a:	c4 60       	breq	800045d6 <udc_process_setup+0x1a2>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
8000454c:	19 ab       	ld.ub	r11,r12[0x2]
8000454e:	19 b8       	ld.ub	r8,r12[0x3]
80004550:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
80004554:	f0 1f 00 f5 	mcall	80004928 <udc_process_setup+0x4f4>
80004558:	c2 e8       	rjmp	800045b4 <udc_process_setup+0x180>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000455a:	5c 59       	castu.b	r9
8000455c:	58 19       	cp.w	r9,1
8000455e:	c1 50       	breq	80004588 <udc_process_setup+0x154>
80004560:	e0 89 00 05 	brgt	8000456a <udc_process_setup+0x136>
80004564:	58 09       	cp.w	r9,0
80004566:	c0 b0       	breq	8000457c <udc_process_setup+0x148>
80004568:	c3 78       	rjmp	800045d6 <udc_process_setup+0x1a2>
8000456a:	58 29       	cp.w	r9,2
8000456c:	e0 80 01 d5 	breq	80004916 <udc_process_setup+0x4e2>
80004570:	58 39       	cp.w	r9,3
80004572:	c3 21       	brne	800045d6 <udc_process_setup+0x1a2>
80004574:	30 4b       	mov	r11,4
80004576:	fe fc 03 ba 	ld.w	r12,pc[954]
8000457a:	c0 a8       	rjmp	8000458e <udc_process_setup+0x15a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000457c:	30 4b       	mov	r11,4
8000457e:	fe fc 03 b6 	ld.w	r12,pc[950]
80004582:	f0 1f 00 ea 	mcall	80004928 <udc_process_setup+0x4f4>
80004586:	c1 78       	rjmp	800045b4 <udc_process_setup+0x180>
80004588:	fe fc 03 b0 	ld.w	r12,pc[944]
8000458c:	30 ab       	mov	r11,10
8000458e:	fe fa 03 ae 	ld.w	r10,pc[942]
80004592:	2f ea       	sub	r10,-2
80004594:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80004596:	11 39       	ld.ub	r9,r8++
80004598:	5c c9       	swap.bh	r9
8000459a:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000459c:	f0 0c 01 09 	sub	r9,r8,r12
800045a0:	f6 09 18 00 	cp.b	r9,r11
800045a4:	cf 93       	brcs	80004596 <udc_process_setup+0x162>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
800045a6:	a1 7b       	lsl	r11,0x1
800045a8:	2f eb       	sub	r11,-2
800045aa:	fe fc 03 92 	ld.w	r12,pc[914]
800045ae:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
800045b0:	f0 1f 00 de 	mcall	80004928 <udc_process_setup+0x4f4>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
800045b4:	fe f8 03 6c 	ld.w	r8,pc[876]
800045b8:	90 39       	ld.sh	r9,r8[0x6]
800045ba:	90 68       	ld.sh	r8,r8[0xc]
800045bc:	f2 08 19 00 	cp.h	r8,r9
800045c0:	e0 8b 00 05 	brhi	800045ca <udc_process_setup+0x196>
800045c4:	30 1c       	mov	r12,1
800045c6:	e0 8f 01 4b 	bral	8000485c <udc_process_setup+0x428>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800045ca:	fe f8 03 56 	ld.w	r8,pc[854]
800045ce:	b0 69       	st.h	r8[0xc],r9
800045d0:	30 1c       	mov	r12,1
800045d2:	e0 8f 01 45 	bral	8000485c <udc_process_setup+0x428>
800045d6:	30 0c       	mov	r12,0
800045d8:	e0 8f 01 42 	bral	8000485c <udc_process_setup+0x428>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
800045dc:	30 18       	mov	r8,1
800045de:	f0 09 19 00 	cp.h	r9,r8
800045e2:	c0 30       	breq	800045e8 <udc_process_setup+0x1b4>
800045e4:	30 0c       	mov	r12,0
800045e6:	c3 b9       	rjmp	8000485c <udc_process_setup+0x428>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
800045e8:	30 1b       	mov	r11,1
800045ea:	fe fc 03 56 	ld.w	r12,pc[854]
800045ee:	f0 1f 00 cf 	mcall	80004928 <udc_process_setup+0x4f4>
800045f2:	30 1c       	mov	r12,1
800045f4:	c3 49       	rjmp	8000485c <udc_process_setup+0x428>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800045f6:	58 18       	cp.w	r8,1
800045f8:	c3 61       	brne	80004664 <udc_process_setup+0x230>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800045fa:	fe fa 03 26 	ld.w	r10,pc[806]
800045fe:	15 9b       	ld.ub	r11,r10[0x1]
80004600:	30 aa       	mov	r10,10
80004602:	f4 0b 18 00 	cp.b	r11,r10
80004606:	c2 f1       	brne	80004664 <udc_process_setup+0x230>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80004608:	f0 09 19 00 	cp.h	r9,r8
8000460c:	c2 a1       	brne	80004660 <udc_process_setup+0x22c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
8000460e:	fe f8 03 32 	ld.w	r8,pc[818]
80004612:	11 89       	ld.ub	r9,r8[0x0]
80004614:	30 08       	mov	r8,0
80004616:	f0 09 18 00 	cp.b	r9,r8
8000461a:	c2 30       	breq	80004660 <udc_process_setup+0x22c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000461c:	fe f8 03 04 	ld.w	r8,pc[772]
80004620:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80004622:	fe f8 03 22 	ld.w	r8,pc[802]
80004626:	70 08       	ld.w	r8,r8[0x0]
80004628:	70 08       	ld.w	r8,r8[0x0]
8000462a:	11 c8       	ld.ub	r8,r8[0x4]
8000462c:	ee 08 18 00 	cp.b	r8,r7
80004630:	e0 88 00 18 	brls	80004660 <udc_process_setup+0x22c>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80004634:	30 0b       	mov	r11,0
80004636:	0e 9c       	mov	r12,r7
80004638:	f0 1f 00 c4 	mcall	80004948 <udc_process_setup+0x514>
8000463c:	c1 20       	breq	80004660 <udc_process_setup+0x22c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000463e:	fe f8 03 06 	ld.w	r8,pc[774]
80004642:	70 08       	ld.w	r8,r8[0x0]
80004644:	70 18       	ld.w	r8,r8[0x4]
80004646:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
8000464a:	70 3c       	ld.w	r12,r8[0xc]
8000464c:	5d 1c       	icall	r12
8000464e:	fe f8 02 fe 	ld.w	r8,pc[766]
80004652:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80004654:	30 1b       	mov	r11,1
80004656:	10 9c       	mov	r12,r8
80004658:	f0 1f 00 b4 	mcall	80004928 <udc_process_setup+0x4f4>
8000465c:	30 1c       	mov	r12,1
8000465e:	cf f8       	rjmp	8000485c <udc_process_setup+0x428>
80004660:	30 0c       	mov	r12,0
80004662:	cf d8       	rjmp	8000485c <udc_process_setup+0x428>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80004664:	58 28       	cp.w	r8,2
80004666:	e0 81 00 fd 	brne	80004860 <udc_process_setup+0x42c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000466a:	fe f8 02 b6 	ld.w	r8,pc[694]
8000466e:	11 9a       	ld.ub	r10,r8[0x1]
80004670:	30 08       	mov	r8,0
80004672:	f0 0a 18 00 	cp.b	r10,r8
80004676:	e0 81 00 f2 	brne	8000485a <udc_process_setup+0x426>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000467a:	30 28       	mov	r8,2
8000467c:	f0 09 19 00 	cp.h	r9,r8
80004680:	c0 30       	breq	80004686 <udc_process_setup+0x252>
80004682:	30 0c       	mov	r12,0
80004684:	ce c8       	rjmp	8000485c <udc_process_setup+0x428>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80004686:	fe f8 02 9a 	ld.w	r8,pc[666]
8000468a:	11 dc       	ld.ub	r12,r8[0x5]
8000468c:	f0 1f 00 b1 	mcall	80004950 <udc_process_setup+0x51c>
80004690:	e0 68 01 00 	mov	r8,256
80004694:	f9 b8 00 00 	moveq	r8,0
80004698:	fe fc 02 bc 	ld.w	r12,pc[700]
8000469c:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000469e:	30 2b       	mov	r11,2
800046a0:	f0 1f 00 a2 	mcall	80004928 <udc_process_setup+0x4f4>
800046a4:	30 1c       	mov	r12,1
800046a6:	cd b8       	rjmp	8000485c <udc_process_setup+0x428>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800046a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046ac:	e0 81 00 7e 	brne	800047a8 <udc_process_setup+0x374>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800046b0:	fe f9 02 70 	ld.w	r9,pc[624]
800046b4:	13 99       	ld.ub	r9,r9[0x1]
800046b6:	30 3a       	mov	r10,3
800046b8:	f4 09 18 00 	cp.b	r9,r10
800046bc:	e0 80 00 cf 	breq	8000485a <udc_process_setup+0x426>
800046c0:	e0 8b 00 07 	brhi	800046ce <udc_process_setup+0x29a>
800046c4:	30 1a       	mov	r10,1
800046c6:	f4 09 18 00 	cp.b	r9,r10
800046ca:	c6 f1       	brne	800047a8 <udc_process_setup+0x374>
800046cc:	c1 a8       	rjmp	80004700 <udc_process_setup+0x2cc>
800046ce:	30 5a       	mov	r10,5
800046d0:	f4 09 18 00 	cp.b	r9,r10
800046d4:	c0 60       	breq	800046e0 <udc_process_setup+0x2ac>
800046d6:	30 9a       	mov	r10,9
800046d8:	f4 09 18 00 	cp.b	r9,r10
800046dc:	c6 61       	brne	800047a8 <udc_process_setup+0x374>
800046de:	c2 88       	rjmp	8000472e <udc_process_setup+0x2fa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800046e0:	fe f8 02 40 	ld.w	r8,pc[576]
800046e4:	90 39       	ld.sh	r9,r8[0x6]
800046e6:	30 08       	mov	r8,0
800046e8:	f0 09 19 00 	cp.h	r9,r8
800046ec:	c0 30       	breq	800046f2 <udc_process_setup+0x2be>
800046ee:	30 0c       	mov	r12,0
800046f0:	cb 68       	rjmp	8000485c <udc_process_setup+0x428>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
800046f2:	fe f9 02 66 	ld.w	r9,pc[614]
800046f6:	fe f8 02 2a 	ld.w	r8,pc[554]
800046fa:	91 49       	st.w	r8[0x10],r9
800046fc:	30 1c       	mov	r12,1
800046fe:	ca f8       	rjmp	8000485c <udc_process_setup+0x428>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80004700:	fe f8 02 20 	ld.w	r8,pc[544]
80004704:	90 39       	ld.sh	r9,r8[0x6]
80004706:	30 08       	mov	r8,0
80004708:	f0 09 19 00 	cp.h	r9,r8
8000470c:	c0 f1       	brne	8000472a <udc_process_setup+0x2f6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000470e:	fe f8 02 12 	ld.w	r8,pc[530]
80004712:	90 19       	ld.sh	r9,r8[0x2]
80004714:	30 18       	mov	r8,1
80004716:	f0 09 19 00 	cp.h	r9,r8
8000471a:	c0 81       	brne	8000472a <udc_process_setup+0x2f6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000471c:	fe f8 02 08 	ld.w	r8,pc[520]
80004720:	90 09       	ld.sh	r9,r8[0x0]
80004722:	a9 d9       	cbr	r9,0x9
80004724:	b0 09       	st.h	r8[0x0],r9
80004726:	30 1c       	mov	r12,1
80004728:	c9 a8       	rjmp	8000485c <udc_process_setup+0x428>
8000472a:	30 0c       	mov	r12,0
8000472c:	c9 88       	rjmp	8000485c <udc_process_setup+0x428>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000472e:	4f d8       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
80004730:	90 39       	ld.sh	r9,r8[0x6]
80004732:	30 08       	mov	r8,0
80004734:	f0 09 19 00 	cp.h	r9,r8
80004738:	c3 41       	brne	800047a0 <udc_process_setup+0x36c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000473a:	f0 1f 00 89 	mcall	8000495c <udc_process_setup+0x528>
8000473e:	c3 10       	breq	800047a0 <udc_process_setup+0x36c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80004740:	4f 88       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
80004742:	11 b9       	ld.ub	r9,r8[0x3]
80004744:	4f a8       	lddpc	r8,8000492c <udc_process_setup+0x4f8>
80004746:	70 08       	ld.w	r8,r8[0x0]
80004748:	f1 38 00 11 	ld.ub	r8,r8[17]
8000474c:	10 39       	cp.w	r9,r8
8000474e:	e0 89 00 29 	brgt	800047a0 <udc_process_setup+0x36c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
80004752:	f0 1f 00 84 	mcall	80004960 <udc_process_setup+0x52c>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80004756:	4f 38       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
80004758:	11 b8       	ld.ub	r8,r8[0x3]
8000475a:	4f a9       	lddpc	r9,80004940 <udc_process_setup+0x50c>
8000475c:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000475e:	58 08       	cp.w	r8,0
80004760:	c2 20       	breq	800047a4 <udc_process_setup+0x370>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80004762:	20 18       	sub	r8,1
80004764:	4f 29       	lddpc	r9,8000492c <udc_process_setup+0x4f8>
80004766:	72 19       	ld.w	r9,r9[0x4]
80004768:	f2 08 00 38 	add	r8,r9,r8<<0x3
8000476c:	4f 69       	lddpc	r9,80004944 <udc_process_setup+0x510>
8000476e:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004770:	70 08       	ld.w	r8,r8[0x0]
80004772:	11 c9       	ld.ub	r9,r8[0x4]
80004774:	30 08       	mov	r8,0
80004776:	f0 09 18 00 	cp.b	r9,r8
8000477a:	c1 50       	breq	800047a4 <udc_process_setup+0x370>
8000477c:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000477e:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004780:	4f 16       	lddpc	r6,80004944 <udc_process_setup+0x510>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80004782:	0a 9b       	mov	r11,r5
80004784:	0e 9c       	mov	r12,r7
80004786:	f0 1f 00 78 	mcall	80004964 <udc_process_setup+0x530>
8000478a:	c0 b0       	breq	800047a0 <udc_process_setup+0x36c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000478c:	2f f7       	sub	r7,-1
8000478e:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004790:	6c 08       	ld.w	r8,r6[0x0]
80004792:	70 08       	ld.w	r8,r8[0x0]
80004794:	11 c8       	ld.ub	r8,r8[0x4]
80004796:	ee 08 18 00 	cp.b	r8,r7
8000479a:	fe 9b ff f4 	brhi	80004782 <udc_process_setup+0x34e>
8000479e:	c0 38       	rjmp	800047a4 <udc_process_setup+0x370>
800047a0:	30 0c       	mov	r12,0
800047a2:	c5 d8       	rjmp	8000485c <udc_process_setup+0x428>
800047a4:	30 1c       	mov	r12,1
800047a6:	c5 b8       	rjmp	8000485c <udc_process_setup+0x428>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800047a8:	58 18       	cp.w	r8,1
800047aa:	c2 21       	brne	800047ee <udc_process_setup+0x3ba>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800047ac:	4d d9       	lddpc	r9,80004920 <udc_process_setup+0x4ec>
800047ae:	13 9a       	ld.ub	r10,r9[0x1]
800047b0:	30 b9       	mov	r9,11
800047b2:	f2 0a 18 00 	cp.b	r10,r9
800047b6:	c1 c1       	brne	800047ee <udc_process_setup+0x3ba>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800047b8:	4d a8       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
800047ba:	90 39       	ld.sh	r9,r8[0x6]
800047bc:	30 08       	mov	r8,0
800047be:	f0 09 19 00 	cp.h	r9,r8
800047c2:	c1 41       	brne	800047ea <udc_process_setup+0x3b6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
800047c4:	4d f8       	lddpc	r8,80004940 <udc_process_setup+0x50c>
800047c6:	11 89       	ld.ub	r9,r8[0x0]
800047c8:	30 08       	mov	r8,0
800047ca:	f0 09 18 00 	cp.b	r9,r8
800047ce:	c0 e0       	breq	800047ea <udc_process_setup+0x3b6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800047d0:	4d 48       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
800047d2:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800047d4:	11 d7       	ld.ub	r7,r8[0x5]
800047d6:	0e 9c       	mov	r12,r7
800047d8:	f0 1f 00 64 	mcall	80004968 <udc_process_setup+0x534>
800047dc:	c0 70       	breq	800047ea <udc_process_setup+0x3b6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800047de:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
800047e2:	0e 9c       	mov	r12,r7
800047e4:	f0 1f 00 60 	mcall	80004964 <udc_process_setup+0x530>
800047e8:	c3 a8       	rjmp	8000485c <udc_process_setup+0x428>
800047ea:	30 0c       	mov	r12,0
800047ec:	c3 88       	rjmp	8000485c <udc_process_setup+0x428>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800047ee:	58 28       	cp.w	r8,2
800047f0:	c3 81       	brne	80004860 <udc_process_setup+0x42c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800047f2:	4c c8       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
800047f4:	11 98       	ld.ub	r8,r8[0x1]
800047f6:	30 19       	mov	r9,1
800047f8:	f2 08 18 00 	cp.b	r8,r9
800047fc:	c0 60       	breq	80004808 <udc_process_setup+0x3d4>
800047fe:	30 39       	mov	r9,3
80004800:	f2 08 18 00 	cp.b	r8,r9
80004804:	c2 b1       	brne	8000485a <udc_process_setup+0x426>
80004806:	c1 48       	rjmp	8000482e <udc_process_setup+0x3fa>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80004808:	4c 68       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
8000480a:	90 39       	ld.sh	r9,r8[0x6]
8000480c:	30 08       	mov	r8,0
8000480e:	f0 09 19 00 	cp.h	r9,r8
80004812:	c0 c1       	brne	8000482a <udc_process_setup+0x3f6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004814:	4c 38       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
80004816:	90 19       	ld.sh	r9,r8[0x2]
80004818:	30 08       	mov	r8,0
8000481a:	f0 09 19 00 	cp.h	r9,r8
8000481e:	c0 61       	brne	8000482a <udc_process_setup+0x3f6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80004820:	4c 08       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
80004822:	11 dc       	ld.ub	r12,r8[0x5]
80004824:	f0 1f 00 52 	mcall	8000496c <udc_process_setup+0x538>
80004828:	c1 a8       	rjmp	8000485c <udc_process_setup+0x428>
8000482a:	30 0c       	mov	r12,0
8000482c:	c1 88       	rjmp	8000485c <udc_process_setup+0x428>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000482e:	4b d8       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
80004830:	90 39       	ld.sh	r9,r8[0x6]
80004832:	30 08       	mov	r8,0
80004834:	f0 09 19 00 	cp.h	r9,r8
80004838:	c0 f1       	brne	80004856 <udc_process_setup+0x422>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000483a:	4b a8       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
8000483c:	90 19       	ld.sh	r9,r8[0x2]
8000483e:	30 08       	mov	r8,0
80004840:	f0 09 19 00 	cp.h	r9,r8
80004844:	c0 91       	brne	80004856 <udc_process_setup+0x422>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80004846:	4b 77       	lddpc	r7,80004920 <udc_process_setup+0x4ec>
80004848:	0f dc       	ld.ub	r12,r7[0x5]
8000484a:	f0 1f 00 4a 	mcall	80004970 <udc_process_setup+0x53c>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000484e:	0f dc       	ld.ub	r12,r7[0x5]
80004850:	f0 1f 00 49 	mcall	80004974 <udc_process_setup+0x540>
80004854:	c0 48       	rjmp	8000485c <udc_process_setup+0x428>
80004856:	30 0c       	mov	r12,0
80004858:	c0 28       	rjmp	8000485c <udc_process_setup+0x428>
8000485a:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
8000485c:	58 0c       	cp.w	r12,0
8000485e:	c5 a1       	brne	80004912 <udc_process_setup+0x4de>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80004860:	4b 08       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
80004862:	11 88       	ld.ub	r8,r8[0x0]
80004864:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004868:	58 18       	cp.w	r8,1
8000486a:	c2 61       	brne	800048b6 <udc_process_setup+0x482>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000486c:	4b 58       	lddpc	r8,80004940 <udc_process_setup+0x50c>
8000486e:	11 89       	ld.ub	r9,r8[0x0]
80004870:	30 08       	mov	r8,0
80004872:	f0 09 18 00 	cp.b	r9,r8
80004876:	c2 00       	breq	800048b6 <udc_process_setup+0x482>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80004878:	4a a8       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
8000487a:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000487c:	4b 28       	lddpc	r8,80004944 <udc_process_setup+0x510>
8000487e:	70 08       	ld.w	r8,r8[0x0]
80004880:	70 08       	ld.w	r8,r8[0x0]
80004882:	11 c8       	ld.ub	r8,r8[0x4]
80004884:	ee 08 18 00 	cp.b	r8,r7
80004888:	e0 88 00 17 	brls	800048b6 <udc_process_setup+0x482>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000488c:	0e 96       	mov	r6,r7
8000488e:	30 0b       	mov	r11,0
80004890:	0e 9c       	mov	r12,r7
80004892:	f0 1f 00 2e 	mcall	80004948 <udc_process_setup+0x514>
80004896:	c1 00       	breq	800048b6 <udc_process_setup+0x482>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80004898:	4a b8       	lddpc	r8,80004944 <udc_process_setup+0x510>
8000489a:	70 08       	ld.w	r8,r8[0x0]
8000489c:	70 18       	ld.w	r8,r8[0x4]
8000489e:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800048a2:	6e 3c       	ld.w	r12,r7[0xc]
800048a4:	5d 1c       	icall	r12
800048a6:	18 9b       	mov	r11,r12
800048a8:	0c 9c       	mov	r12,r6
800048aa:	f0 1f 00 28 	mcall	80004948 <udc_process_setup+0x514>
800048ae:	c0 40       	breq	800048b6 <udc_process_setup+0x482>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
800048b0:	6e 2c       	ld.w	r12,r7[0x8]
800048b2:	5d 1c       	icall	r12
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
800048b4:	c2 f1       	brne	80004912 <udc_process_setup+0x4de>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
800048b6:	49 b8       	lddpc	r8,80004920 <udc_process_setup+0x4ec>
800048b8:	11 88       	ld.ub	r8,r8[0x0]
800048ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048be:	58 28       	cp.w	r8,2
800048c0:	c2 71       	brne	8000490e <udc_process_setup+0x4da>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
800048c2:	4a 08       	lddpc	r8,80004940 <udc_process_setup+0x50c>
800048c4:	11 89       	ld.ub	r9,r8[0x0]
800048c6:	30 08       	mov	r8,0
800048c8:	f0 09 18 00 	cp.b	r9,r8
800048cc:	c2 10       	breq	8000490e <udc_process_setup+0x4da>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800048ce:	49 e8       	lddpc	r8,80004944 <udc_process_setup+0x510>
800048d0:	70 08       	ld.w	r8,r8[0x0]
800048d2:	70 09       	ld.w	r9,r8[0x0]
800048d4:	13 ca       	ld.ub	r10,r9[0x4]
800048d6:	30 09       	mov	r9,0
800048d8:	f2 0a 18 00 	cp.b	r10,r9
800048dc:	c1 90       	breq	8000490e <udc_process_setup+0x4da>
800048de:	30 07       	mov	r7,0
800048e0:	49 95       	lddpc	r5,80004944 <udc_process_setup+0x510>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
800048e2:	70 18       	ld.w	r8,r8[0x4]
800048e4:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800048e8:	6c 3c       	ld.w	r12,r6[0xc]
800048ea:	5d 1c       	icall	r12
800048ec:	18 9b       	mov	r11,r12
800048ee:	0e 9c       	mov	r12,r7
800048f0:	f0 1f 00 16 	mcall	80004948 <udc_process_setup+0x514>
800048f4:	c0 d0       	breq	8000490e <udc_process_setup+0x4da>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
800048f6:	6c 2c       	ld.w	r12,r6[0x8]
800048f8:	5d 1c       	icall	r12
800048fa:	c0 c1       	brne	80004912 <udc_process_setup+0x4de>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800048fc:	2f f7       	sub	r7,-1
800048fe:	5c 57       	castu.b	r7
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004900:	6a 08       	ld.w	r8,r5[0x0]
80004902:	70 09       	ld.w	r9,r8[0x0]
80004904:	13 c9       	ld.ub	r9,r9[0x4]
80004906:	ee 09 18 00 	cp.b	r9,r7
8000490a:	fe 9b ff ec 	brhi	800048e2 <udc_process_setup+0x4ae>
8000490e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004912:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004916:	31 6b       	mov	r11,22
80004918:	49 8c       	lddpc	r12,80004978 <udc_process_setup+0x544>
8000491a:	fe 9f fe 3a 	bral	8000458e <udc_process_setup+0x15a>
8000491e:	00 00       	add	r0,r0
80004920:	00 00       	add	r0,r0
80004922:	05 a8       	ld.ub	r8,r2[0x2]
80004924:	00 00       	add	r0,r0
80004926:	04 da       	st.w	--r2,r10
80004928:	80 00       	ld.sh	r0,r0[0x0]
8000492a:	27 68       	sub	r8,118
8000492c:	00 00       	add	r0,r0
8000492e:	00 34       	cp.w	r4,r0
80004930:	80 00       	ld.sh	r0,r0[0x0]
80004932:	51 98       	stdsp	sp[0x64],r8
80004934:	00 00       	add	r0,r0
80004936:	00 f4       	st.b	--r0,r4
80004938:	00 00       	add	r0,r0
8000493a:	00 b8       	st.h	r0++,r8
8000493c:	00 00       	add	r0,r0
8000493e:	00 c4       	st.b	r0++,r4
80004940:	00 00       	add	r0,r0
80004942:	04 dc       	st.w	--r2,r12
80004944:	00 00       	add	r0,r0
80004946:	04 d4       	st.w	--r2,r4
80004948:	80 00       	ld.sh	r0,r0[0x0]
8000494a:	42 28       	lddsp	r8,sp[0x88]
8000494c:	00 00       	add	r0,r0
8000494e:	04 d2       	st.w	--r2,r2
80004950:	80 00       	ld.sh	r0,r0[0x0]
80004952:	27 74       	sub	r4,119
80004954:	00 00       	add	r0,r0
80004956:	04 d8       	st.w	--r2,r8
80004958:	80 00       	ld.sh	r0,r0[0x0]
8000495a:	42 fc       	lddsp	r12,sp[0xbc]
8000495c:	80 00       	ld.sh	r0,r0[0x0]
8000495e:	27 4e       	sub	lr,116
80004960:	80 00       	ld.sh	r0,r0[0x0]
80004962:	43 d8       	lddsp	r8,sp[0xf4]
80004964:	80 00       	ld.sh	r0,r0[0x0]
80004966:	43 14       	lddsp	r4,sp[0xc4]
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	43 74       	lddsp	r4,sp[0xdc]
8000496c:	80 00       	ld.sh	r0,r0[0x0]
8000496e:	27 88       	sub	r8,120
80004970:	80 00       	ld.sh	r0,r0[0x0]
80004972:	28 5c       	sub	r12,-123
80004974:	80 00       	ld.sh	r0,r0[0x0]
80004976:	28 cc       	sub	r12,-116
80004978:	00 00       	add	r0,r0
8000497a:	00 a0       	st.w	r0++,r0

8000497c <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000497c:	d4 01       	pushm	lr
	udd_enable();
8000497e:	f0 1f 00 02 	mcall	80004984 <udc_start+0x8>
}
80004982:	d8 02       	popm	pc
80004984:	80 00       	ld.sh	r0,r0[0x0]
80004986:	30 0c       	mov	r12,0

80004988 <main>:
{
	main_b_cdc_enable = false;
}

int main(void)
{
80004988:	eb cd 40 fc 	pushm	r2-r7,lr
8000498c:	21 1d       	sub	sp,68
	  .cpcstop  = false,                        // Counter clock stopped with RC compare.

	  .burst    = TC_BURST_NOT_GATED,           // Burst signal selection.
	  .clki     = TC_CLOCK_RISING_EDGE ,         // Clock inversion.
	  .tcclks   = TC_CLOCK_SOURCE_TC3           // Internal source clock 3, connected to PBC/8.
  };
8000498e:	30 17       	mov	r7,1
80004990:	50 f7       	stdsp	sp[0x3c],r7
80004992:	30 08       	mov	r8,0
80004994:	30 29       	mov	r9,2
80004996:	f1 d9 d3 c2 	bfins	r8,r9,0x1e,0x2
8000499a:	ea 18 03 00 	orh	r8,0x300
8000499e:	f1 d7 d2 c2 	bfins	r8,r7,0x16,0x2
800049a2:	30 36       	mov	r6,3
800049a4:	ea 18 00 03 	orh	r8,0x3
800049a8:	e8 18 60 00 	orl	r8,0x6000
800049ac:	f1 d7 d1 42 	bfins	r8,r7,0xa,0x2
800049b0:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800049b4:	51 08       	stdsp	sp[0x40],r8
//
// Configure clocks
//
// ------------------------------------------------------------------------------------------------------------

 sysclk_init();
800049b6:	f0 1f 00 6d 	mcall	80004b68 <main+0x1e0>
 irq_initialize_vectors();
800049ba:	f0 1f 00 6d 	mcall	80004b6c <main+0x1e4>
 cpu_irq_enable();
800049be:	d5 03       	csrf	0x10
 board_init();
800049c0:	f0 1f 00 6c 	mcall	80004b70 <main+0x1e8>
 * \brief Enable a module clock derived from the PBC clock
 * \param index Index of the module clock in the PBCMASK register
 */
static inline void sysclk_enable_pbc_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBC, index);
800049c4:	30 5b       	mov	r11,5
800049c6:	30 4c       	mov	r12,4
800049c8:	f0 1f 00 6b 	mcall	80004b74 <main+0x1ec>
// ------------------------------------------------------------------------------------------------------------
	scif_gclk_opt_t gclk0_opt = {
	.clock_source = AVR32_SCIF_GC_USES_CLK_PBC,	// The input clock source to use for the generic clock
	.divider = 7,								// The division factor to apply to the clock src.
	.diven	= 1									// Enable/disable the generic clock divisor
	} ;
800049cc:	4e b8       	lddpc	r8,80004b78 <main+0x1f0>
800049ce:	fa cb ff d0 	sub	r11,sp,-48
800049d2:	f0 e4 00 00 	ld.d	r4,r8[0]
800049d6:	f6 e5 00 00 	st.d	r11[0],r4
800049da:	70 28       	ld.w	r8,r8[0x8]
800049dc:	97 28       	st.w	r11[0x8],r8

  scif_start_gclk (GCLK0_ID, &gclk0_opt); 
800049de:	30 9c       	mov	r12,9
800049e0:	f0 1f 00 67 	mcall	80004b7c <main+0x1f4>
  
  gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);
800049e4:	0e 9b       	mov	r11,r7
800049e6:	35 3c       	mov	r12,83
800049e8:	f0 1f 00 66 	mcall	80004b80 <main+0x1f8>
//
// ------------------------------------------------------------------------------------------------------------
  
  // Assign I/O to timer/counter channel pin & function.

  gpio_enable_module_pin(AVR32_TC0_A1_2_PIN, AVR32_TC0_A1_2_FUNCTION);    // ICG
800049ec:	0c 9b       	mov	r11,r6
800049ee:	37 ec       	mov	r12,126
800049f0:	f0 1f 00 64 	mcall	80004b80 <main+0x1f8>
  gpio_enable_module_pin(AVR32_TC0_B1_2_PIN, AVR32_TC0_B1_2_FUNCTION);    // SH
800049f4:	0c 9b       	mov	r11,r6
800049f6:	34 4c       	mov	r12,68
800049f8:	f0 1f 00 62 	mcall	80004b80 <main+0x1f8>
  	  
  // Initialize the timer/counter.
  
  tc_init_waveform(tc, &waveform_opt1);      
800049fc:	fa cb ff c4 	sub	r11,sp,-60
80004a00:	fc 7c 20 00 	mov	r12,-188416
80004a04:	f0 1f 00 60 	mcall	80004b84 <main+0x1fc>
  
  int readout_time = CCD_LENGTH * 2 + ICG_WIDTH ;
  
  // SH and ICG signals
  
  tc_write_ra(tc, ICG_SH_CHANNEL, SH_WIDTH );					// Set RA value.
80004a08:	0e 9a       	mov	r10,r7
80004a0a:	0e 9b       	mov	r11,r7
80004a0c:	fc 7c 20 00 	mov	r12,-188416
80004a10:	f0 1f 00 5e 	mcall	80004b88 <main+0x200>
  tc_write_rb(tc, ICG_SH_CHANNEL, ICG_WIDTH );					// Set RB value.
80004a14:	0c 9a       	mov	r10,r6
80004a16:	0e 9b       	mov	r11,r7
80004a18:	fc 7c 20 00 	mov	r12,-188416
80004a1c:	f0 1f 00 5c 	mcall	80004b8c <main+0x204>
  tc_write_rc(tc, ICG_SH_CHANNEL, readout_time );				// Set RC value.
80004a20:	e0 6a 1c df 	mov	r10,7391
80004a24:	0e 9b       	mov	r11,r7
80004a26:	fc 7c 20 00 	mov	r12,-188416
80004a2a:	f0 1f 00 5a 	mcall	80004b90 <main+0x208>
  
  tc_sync_start(tc); 
80004a2e:	fc 7c 20 00 	mov	r12,-188416
80004a32:	f0 1f 00 59 	mcall	80004b94 <main+0x20c>
		.igf = PEVC_EVS_IGF_OFF,  // Input Glitch Filter off
		.evf = PEVC_EVS_EVF_OFF,   // Enable Event on falling edge
		.evr = PEVC_EVS_EVR_ON   // Enable Event on rising edge
	}  ;
	
   pevc_channel_configure(ppevc,
80004a36:	4d 96       	lddpc	r6,80004b98 <main+0x210>
80004a38:	4d 99       	lddpc	r9,80004b9c <main+0x214>
80004a3a:	31 6a       	mov	r10,22
80004a3c:	30 0b       	mov	r11,0
80004a3e:	6c 0c       	ld.w	r12,r6[0x0]
80004a40:	f0 1f 00 58 	mcall	80004ba0 <main+0x218>

#ifdef IRIS_DEBUG
   pevc_channels_enable_trigger_interrupt(ppevc, 1<<AVR32_PEVC_ID_USER_ADCIFA_0);  
#endif
   
   pevc_channels_enable(ppevc, 1 << AVR32_PEVC_ID_USER_ADCIFA_0);
80004a44:	30 1a       	mov	r10,1
80004a46:	30 0b       	mov	r11,0
80004a48:	6c 0c       	ld.w	r12,r6[0x0]
80004a4a:	f0 1f 00 57 	mcall	80004ba4 <main+0x21c>
	.reference_source         = ADCIFA_REF06VDD, // Reference Source
	.sample_and_hold_disable  = true,    // Disable Sample and Hold Time
	.single_sequencer_mode    = false,    // Single Sequencer Mode
	.free_running_mode_enable = true,     // Free Running Mode
	.sleep_mode_enable        = false     // Sleep Mode
};
80004a4e:	fa c6 ff e4 	sub	r6,sp,-28
80004a52:	31 4a       	mov	r10,20
80004a54:	30 0b       	mov	r11,0
80004a56:	0c 9c       	mov	r12,r6
80004a58:	f0 1f 00 54 	mcall	80004ba8 <main+0x220>
80004a5c:	ee 78 42 40 	mov	r8,1000000
80004a60:	50 78       	stdsp	sp[0x1c],r8
80004a62:	fb 67 00 20 	st.b	sp[32],r7
80004a66:	fb 67 00 21 	st.b	sp[33],r7
80004a6a:	fb 67 00 23 	st.b	sp[35],r7
	.trigger_selection    = ADCIFA_TRGSEL_EVT,       // Trigger selection
	.start_of_conversion  = ADCIFA_SOCB_ALLSEQ,      // Conversion Management
	.sh_mode              = ADCIFA_SH_MODE_OVERSAMP, // Oversampling Management
	.half_word_adjustment = ADCIFA_HWLA_NOADJ,       // Half word Adjustment
	.software_acknowledge = ADCIFA_SA_NO_EOS_SOFTACK, // Software Acknowledge
};
80004a6e:	fa c4 ff eb 	sub	r4,sp,-21
80004a72:	30 7a       	mov	r10,7
80004a74:	4c eb       	lddpc	r11,80004bac <main+0x224>
80004a76:	08 9c       	mov	r12,r4
80004a78:	f0 1f 00 4e 	mcall	80004bb0 <main+0x228>
	{
		.channel_p = AVR32_ADCIFA_INP_ADCIN0,			// Positive Channel
		.channel_n = AVR32_ADCIFA_INN_GNDANA,			// Negative Channel
		.gain      = ADCIFA_SHG_1						// Gain of the conversion
	}
};
80004a7c:	fa c5 ff fd 	sub	r5,sp,-3
80004a80:	31 2a       	mov	r10,18
80004a82:	4c db       	lddpc	r11,80004bb4 <main+0x22c>
80004a84:	0a 9c       	mov	r12,r5
80004a86:	f0 1f 00 4b 	mcall	80004bb0 <main+0x228>
	
// Assign and enable GPIO pins to th ADC function.
  gpio_enable_module_pin(AVR32_ADCIN0_PIN, AVR32_ADCIN0_FUNCTION);
80004a8a:	30 0b       	mov	r11,0
80004a8c:	30 4c       	mov	r12,4
80004a8e:	f0 1f 00 3d 	mcall	80004b80 <main+0x1f8>
  
// Get ADCIFA Factory Configuration
adcifa_get_calibration_data(adcifa, &adc_config_t);
80004a92:	4c a7       	lddpc	r7,80004bb8 <main+0x230>
80004a94:	0c 9b       	mov	r11,r6
80004a96:	6e 0c       	ld.w	r12,r7[0x0]
80004a98:	f0 1f 00 49 	mcall	80004bbc <main+0x234>

// Configure ADCIFA core
adcifa_configure(adcifa, &adc_config_t, 16000000);
80004a9c:	e0 6a 24 00 	mov	r10,9216
80004aa0:	ea 1a 00 f4 	orh	r10,0xf4
80004aa4:	0c 9b       	mov	r11,r6
80004aa6:	6e 0c       	ld.w	r12,r7[0x0]
80004aa8:	f0 1f 00 46 	mcall	80004bc0 <main+0x238>

// Configure ADCIFA sequencer 0
adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt, adcifa_sequence_conversion_opt);
80004aac:	0a 99       	mov	r9,r5
80004aae:	08 9a       	mov	r10,r4
80004ab0:	30 0b       	mov	r11,0
80004ab2:	6e 0c       	ld.w	r12,r7[0x0]
80004ab4:	f0 1f 00 44 	mcall	80004bc4 <main+0x23c>
// DMA setup
//
// ------------------------------------------------------------------------------------------------------------
	
	// Initialize PDCA channel with the pdca_options
	pdca_init_channel(ADC_PDCA_CHANNEL_SEQ0, &pdca_channel0_config_t);
80004ab8:	4c 4b       	lddpc	r11,80004bc8 <main+0x240>
80004aba:	30 0c       	mov	r12,0
80004abc:	f0 1f 00 44 	mcall	80004bcc <main+0x244>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004ac0:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80004ac4:	d3 03       	ssrf	0x10

	// register Register pdca_int_handler_seq0 interrupt on level 0
	flags = cpu_irq_save();
	irq_register_handler(pdca_int_handler_seq0, AVR32_PDCA_IRQ_0, 0);
80004ac6:	30 0a       	mov	r10,0
80004ac8:	36 0b       	mov	r11,96
80004aca:	4c 2c       	lddpc	r12,80004bd0 <main+0x248>
80004acc:	f0 1f 00 42 	mcall	80004bd4 <main+0x24c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004ad0:	e6 17 00 01 	andh	r7,0x1,COH
80004ad4:	c0 21       	brne	80004ad8 <main+0x150>
      cpu_irq_enable();
80004ad6:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Enable the PDCA interrupt each time the transfer is complete,
	// i.e. each time a data buffer is ready
	pdca_enable_interrupt_transfer_complete(ADC_PDCA_CHANNEL_SEQ0);
80004ad8:	30 0c       	mov	r12,0
80004ada:	f0 1f 00 40 	mcall	80004bd8 <main+0x250>
	
	pdca_enable(ADC_PDCA_CHANNEL_SEQ0);
80004ade:	30 0c       	mov	r12,0
80004ae0:	f0 1f 00 3f 	mcall	80004bdc <main+0x254>
//
// USB setup
//
// ------------------------------------------------------------------------------------------------------------
	
	udc_start();
80004ae4:	f0 1f 00 3f 	mcall	80004be0 <main+0x258>
//
// Main loop
//
// ------------------------------------------------------------------------------------------------------------
	  
  flag_end_of_acquisition = false;
80004ae8:	30 09       	mov	r9,0
80004aea:	4b f8       	lddpc	r8,80004be4 <main+0x25c>
80004aec:	b0 89       	st.b	r8[0x0],r9
	  
	  if ( udi_cdc_is_rx_ready() )
	  {	
		  len = udi_cdc_read_buf(TC_Buff, TC_SIZE_MAX);

		  if ( ( len == 2 ) && ( TC_Buff[0] == 0xAA ) )
80004aee:	4b f3       	lddpc	r3,80004be8 <main+0x260>
		  {  
			  // Execute TC
		
		      for(int j=0;j<=ACQ_LENGTH;j++)
			    TM_Buff[j] = 0;
80004af0:	12 97       	mov	r7,r9
								
			  Tint = TC_Buff[1];
			  
			  for(int i=0;i<Tint;i++)
			  {
				  while ( ! flag_end_of_acquisition );
80004af2:	10 96       	mov	r6,r8
				  
				  flag_end_of_acquisition = false;
80004af4:	e6 c5 ff ff 	sub	r5,r3,-1
80004af8:	4b d4       	lddpc	r4,80004bec <main+0x264>
  
  while (true)
  {		 
	  // Wait for TC
	  
	  if ( udi_cdc_is_rx_ready() )
80004afa:	f0 1f 00 3e 	mcall	80004bf0 <main+0x268>
80004afe:	cf e0       	breq	80004afa <main+0x172>
	  {	
		  len = udi_cdc_read_buf(TC_Buff, TC_SIZE_MAX);
80004b00:	30 2b       	mov	r11,2
80004b02:	4b dc       	lddpc	r12,80004bf4 <main+0x26c>
80004b04:	f0 1f 00 3d 	mcall	80004bf8 <main+0x270>

		  if ( ( len == 2 ) && ( TC_Buff[0] == 0xAA ) )
80004b08:	58 2c       	cp.w	r12,2
80004b0a:	cf 81       	brne	80004afa <main+0x172>
80004b0c:	4b a8       	lddpc	r8,80004bf4 <main+0x26c>
80004b0e:	11 89       	ld.ub	r9,r8[0x0]
80004b10:	3a a8       	mov	r8,-86
80004b12:	f0 09 18 00 	cp.b	r9,r8
80004b16:	cf 21       	brne	80004afa <main+0x172>
80004b18:	06 98       	mov	r8,r3
void my_callback_cdc_disable(void)
{
	main_b_cdc_enable = false;
}

int main(void)
80004b1a:	e6 cc f2 b7 	sub	r12,r3,-3401
		  if ( ( len == 2 ) && ( TC_Buff[0] == 0xAA ) )
		  {  
			  // Execute TC
		
		      for(int j=0;j<=ACQ_LENGTH;j++)
			    TM_Buff[j] = 0;
80004b1e:	10 c7       	st.b	r8++,r7

		  if ( ( len == 2 ) && ( TC_Buff[0] == 0xAA ) )
		  {  
			  // Execute TC
		
		      for(int j=0;j<=ACQ_LENGTH;j++)
80004b20:	18 38       	cp.w	r8,r12
80004b22:	cf e1       	brne	80004b1e <main+0x196>
			    TM_Buff[j] = 0;
								
			  Tint = TC_Buff[1];
80004b24:	4b 48       	lddpc	r8,80004bf4 <main+0x26c>
80004b26:	11 92       	ld.ub	r2,r8[0x1]
			  
			  for(int i=0;i<Tint;i++)
80004b28:	58 02       	cp.w	r2,0
80004b2a:	e0 8a 00 14 	brle	80004b52 <main+0x1ca>
80004b2e:	30 0e       	mov	lr,0
			  {
				  while ( ! flag_end_of_acquisition );
80004b30:	0d 88       	ld.ub	r8,r6[0x0]
80004b32:	58 08       	cp.w	r8,0
80004b34:	cf e0       	breq	80004b30 <main+0x1a8>
				  
				  flag_end_of_acquisition = false;
80004b36:	ac 87       	st.b	r6[0x0],r7
80004b38:	0a 98       	mov	r8,r5
80004b3a:	08 99       	mov	r9,r4
				  
				  for(int j=0;j<ACQ_LENGTH;j++)
						TM_Buff[j+1] = TM_Buff[j+1] + adc_values[j];
80004b3c:	13 1a       	ld.sh	r10,r9++
80004b3e:	11 8b       	ld.ub	r11,r8[0x0]
80004b40:	f6 0a 00 0a 	add	r10,r11,r10
80004b44:	10 ca       	st.b	r8++,r10
			  {
				  while ( ! flag_end_of_acquisition );
				  
				  flag_end_of_acquisition = false;
				  
				  for(int j=0;j<ACQ_LENGTH;j++)
80004b46:	18 38       	cp.w	r8,r12
80004b48:	cf a1       	brne	80004b3c <main+0x1b4>
		      for(int j=0;j<=ACQ_LENGTH;j++)
			    TM_Buff[j] = 0;
								
			  Tint = TC_Buff[1];
			  
			  for(int i=0;i<Tint;i++)
80004b4a:	2f fe       	sub	lr,-1
80004b4c:	1c 32       	cp.w	r2,lr
80004b4e:	fe 99 ff f1 	brgt	80004b30 <main+0x1a8>
						TM_Buff[j+1] = TM_Buff[j+1] + adc_values[j];
			  }
			  
			  // Send TM
			  
			  TM_Buff[0] = 0x1664;
80004b52:	36 48       	mov	r8,100
80004b54:	a6 88       	st.b	r3[0x0],r8
			  
			  while (!udi_cdc_is_tx_ready());
80004b56:	f0 1f 00 2a 	mcall	80004bfc <main+0x274>
80004b5a:	cf e0       	breq	80004b56 <main+0x1ce>
			  udi_cdc_write_buf(TM_Buff, 4096);
80004b5c:	e0 6b 10 00 	mov	r11,4096
80004b60:	06 9c       	mov	r12,r3
80004b62:	f0 1f 00 28 	mcall	80004c00 <main+0x278>
80004b66:	cc ab       	rjmp	80004afa <main+0x172>
80004b68:	80 00       	ld.sh	r0,r0[0x0]
80004b6a:	38 2c       	mov	r12,-126
80004b6c:	80 00       	ld.sh	r0,r0[0x0]
80004b6e:	3a 8c       	mov	r12,-88
80004b70:	80 00       	ld.sh	r0,r0[0x0]
80004b72:	3b 58       	mov	r8,-75
80004b74:	80 00       	ld.sh	r0,r0[0x0]
80004b76:	37 78       	mov	r8,119
80004b78:	80 00       	ld.sh	r0,r0[0x0]
80004b7a:	51 b4       	stdsp	sp[0x6c],r4
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	26 ec       	sub	r12,110
80004b80:	80 00       	ld.sh	r0,r0[0x0]
80004b82:	24 a0       	sub	r0,74
80004b84:	80 00       	ld.sh	r0,r0[0x0]
80004b86:	38 c0       	mov	r0,-116
80004b88:	80 00       	ld.sh	r0,r0[0x0]
80004b8a:	39 6e       	mov	lr,-106
80004b8c:	80 00       	ld.sh	r0,r0[0x0]
80004b8e:	39 a2       	mov	r2,-102
80004b90:	80 00       	ld.sh	r0,r0[0x0]
80004b92:	39 d6       	mov	r6,-99
80004b94:	80 00       	ld.sh	r0,r0[0x0]
80004b96:	39 5c       	mov	r12,-107
80004b98:	00 00       	add	r0,r0
80004b9a:	00 fc       	st.b	--r0,r12
80004b9c:	80 00       	ld.sh	r0,r0[0x0]
80004b9e:	51 dc       	stdsp	sp[0x74],r12
80004ba0:	80 00       	ld.sh	r0,r0[0x0]
80004ba2:	26 54       	sub	r4,101
80004ba4:	80 00       	ld.sh	r0,r0[0x0]
80004ba6:	26 d6       	sub	r6,109
80004ba8:	80 00       	ld.sh	r0,r0[0x0]
80004baa:	4d 90       	lddpc	r0,80004d0c <memcpy+0xc4>
80004bac:	80 00       	ld.sh	r0,r0[0x0]
80004bae:	51 ec       	stdsp	sp[0x78],r12
80004bb0:	80 00       	ld.sh	r0,r0[0x0]
80004bb2:	4c 48       	lddpc	r8,80004cc0 <memcpy+0x78>
80004bb4:	80 00       	ld.sh	r0,r0[0x0]
80004bb6:	51 a0       	stdsp	sp[0x68],r0
80004bb8:	00 00       	add	r0,r0
80004bba:	00 f8       	st.b	--r0,r8
80004bbc:	80 00       	ld.sh	r0,r0[0x0]
80004bbe:	20 04       	sub	r4,0
80004bc0:	80 00       	ld.sh	r0,r0[0x0]
80004bc2:	20 38       	sub	r8,3
80004bc4:	80 00       	ld.sh	r0,r0[0x0]
80004bc6:	21 04       	sub	r4,16
80004bc8:	80 00       	ld.sh	r0,r0[0x0]
80004bca:	51 c0       	stdsp	sp[0x70],r0
80004bcc:	80 00       	ld.sh	r0,r0[0x0]
80004bce:	25 f4       	sub	r4,95
80004bd0:	80 00       	ld.sh	r0,r0[0x0]
80004bd2:	4c 04       	lddpc	r4,80004cd0 <memcpy+0x88>
80004bd4:	80 00       	ld.sh	r0,r0[0x0]
80004bd6:	3a 0c       	mov	r12,-96
80004bd8:	80 00       	ld.sh	r0,r0[0x0]
80004bda:	25 74       	sub	r4,87
80004bdc:	80 00       	ld.sh	r0,r0[0x0]
80004bde:	25 64       	sub	r4,86
80004be0:	80 00       	ld.sh	r0,r0[0x0]
80004be2:	49 7c       	lddpc	r12,80004c3c <pdca_int_handler_seq0+0x38>
80004be4:	00 00       	add	r0,r0
80004be6:	04 e4       	st.h	--r2,r4
80004be8:	00 00       	add	r0,r0
80004bea:	06 0c       	add	r12,r3
80004bec:	00 00       	add	r0,r0
80004bee:	13 58       	ld.sh	r8,--r9
80004bf0:	80 00       	ld.sh	r0,r0[0x0]
80004bf2:	3e 08       	mov	r8,-32
80004bf4:	00 00       	add	r0,r0
80004bf6:	06 08       	add	r8,r3
80004bf8:	80 00       	ld.sh	r0,r0[0x0]
80004bfa:	3f 30       	mov	r0,-13
80004bfc:	80 00       	ld.sh	r0,r0[0x0]
80004bfe:	3d 08       	mov	r8,-48
80004c00:	80 00       	ld.sh	r0,r0[0x0]
80004c02:	3d b4       	mov	r4,-37

80004c04 <pdca_int_handler_seq0>:
// The handler disables the PDCA transfer.
// The interrupt will happen each time the transfer is completed.
//
// ------------------------------------------------------------------------------------------------------------
ISR(pdca_int_handler_seq0, AVR32_PDCA_IRQ_GROUP0, 0)
{
80004c04:	eb cd 40 80 	pushm	r7,lr
	int temp;
	
	gpio_tgl_gpio_pin(AVR32_PIN_PD11);
80004c08:	36 bc       	mov	r12,107
80004c0a:	f0 1f 00 0c 	mcall	80004c38 <pdca_int_handler_seq0+0x34>

	ADCIFA_disable();	
80004c0e:	fc 77 24 00 	mov	r7,-187392
80004c12:	6e 18       	ld.w	r8,r7[0x4]
80004c14:	a1 c8       	cbr	r8,0x0
80004c16:	8f 18       	st.w	r7[0x4],r8
	
	pdca_reload_channel(ADC_PDCA_CHANNEL_SEQ0, (void *)(adc_values), ACQ_LENGTH);
80004c18:	e0 6a 0d 48 	mov	r10,3400
80004c1c:	48 8b       	lddpc	r11,80004c3c <pdca_int_handler_seq0+0x38>
80004c1e:	30 0c       	mov	r12,0
80004c20:	f0 1f 00 08 	mcall	80004c40 <pdca_int_handler_seq0+0x3c>
	ADCIFA_enable();
80004c24:	6e 18       	ld.w	r8,r7[0x4]
80004c26:	a1 a8       	sbr	r8,0x0
80004c28:	8f 18       	st.w	r7[0x4],r8
		
	flag_end_of_acquisition = true;
80004c2a:	30 19       	mov	r9,1
80004c2c:	48 68       	lddpc	r8,80004c44 <pdca_int_handler_seq0+0x40>
80004c2e:	b0 89       	st.b	r8[0x0],r9
80004c30:	e3 cd 40 80 	ldm	sp++,r7,lr
80004c34:	d6 03       	rete
80004c36:	00 00       	add	r0,r0
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	25 34       	sub	r4,83
80004c3c:	00 00       	add	r0,r0
80004c3e:	13 58       	ld.sh	r8,--r9
80004c40:	80 00       	ld.sh	r0,r0[0x0]
80004c42:	25 c4       	sub	r4,92
80004c44:	00 00       	add	r0,r0
80004c46:	04 e4       	st.h	--r2,r4

80004c48 <memcpy>:
80004c48:	58 8a       	cp.w	r10,8
80004c4a:	c2 f5       	brlt	80004ca8 <memcpy+0x60>
80004c4c:	f9 eb 10 09 	or	r9,r12,r11
80004c50:	e2 19 00 03 	andl	r9,0x3,COH
80004c54:	e0 81 00 97 	brne	80004d82 <memcpy+0x13a>
80004c58:	e0 4a 00 20 	cp.w	r10,32
80004c5c:	c3 b4       	brge	80004cd2 <memcpy+0x8a>
80004c5e:	f4 08 14 02 	asr	r8,r10,0x2
80004c62:	f0 09 11 08 	rsub	r9,r8,8
80004c66:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004c6a:	76 69       	ld.w	r9,r11[0x18]
80004c6c:	99 69       	st.w	r12[0x18],r9
80004c6e:	76 59       	ld.w	r9,r11[0x14]
80004c70:	99 59       	st.w	r12[0x14],r9
80004c72:	76 49       	ld.w	r9,r11[0x10]
80004c74:	99 49       	st.w	r12[0x10],r9
80004c76:	76 39       	ld.w	r9,r11[0xc]
80004c78:	99 39       	st.w	r12[0xc],r9
80004c7a:	76 29       	ld.w	r9,r11[0x8]
80004c7c:	99 29       	st.w	r12[0x8],r9
80004c7e:	76 19       	ld.w	r9,r11[0x4]
80004c80:	99 19       	st.w	r12[0x4],r9
80004c82:	76 09       	ld.w	r9,r11[0x0]
80004c84:	99 09       	st.w	r12[0x0],r9
80004c86:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004c8a:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004c8e:	e0 1a 00 03 	andl	r10,0x3
80004c92:	f4 0a 11 04 	rsub	r10,r10,4
80004c96:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004c9a:	17 a9       	ld.ub	r9,r11[0x2]
80004c9c:	b0 a9       	st.b	r8[0x2],r9
80004c9e:	17 99       	ld.ub	r9,r11[0x1]
80004ca0:	b0 99       	st.b	r8[0x1],r9
80004ca2:	17 89       	ld.ub	r9,r11[0x0]
80004ca4:	b0 89       	st.b	r8[0x0],r9
80004ca6:	5e fc       	retal	r12
80004ca8:	f4 0a 11 09 	rsub	r10,r10,9
80004cac:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004cb0:	17 f9       	ld.ub	r9,r11[0x7]
80004cb2:	b8 f9       	st.b	r12[0x7],r9
80004cb4:	17 e9       	ld.ub	r9,r11[0x6]
80004cb6:	b8 e9       	st.b	r12[0x6],r9
80004cb8:	17 d9       	ld.ub	r9,r11[0x5]
80004cba:	b8 d9       	st.b	r12[0x5],r9
80004cbc:	17 c9       	ld.ub	r9,r11[0x4]
80004cbe:	b8 c9       	st.b	r12[0x4],r9
80004cc0:	17 b9       	ld.ub	r9,r11[0x3]
80004cc2:	b8 b9       	st.b	r12[0x3],r9
80004cc4:	17 a9       	ld.ub	r9,r11[0x2]
80004cc6:	b8 a9       	st.b	r12[0x2],r9
80004cc8:	17 99       	ld.ub	r9,r11[0x1]
80004cca:	b8 99       	st.b	r12[0x1],r9
80004ccc:	17 89       	ld.ub	r9,r11[0x0]
80004cce:	b8 89       	st.b	r12[0x0],r9
80004cd0:	5e fc       	retal	r12
80004cd2:	eb cd 40 c0 	pushm	r6-r7,lr
80004cd6:	18 99       	mov	r9,r12
80004cd8:	22 0a       	sub	r10,32
80004cda:	b7 07       	ld.d	r6,r11++
80004cdc:	b3 26       	st.d	r9++,r6
80004cde:	b7 07       	ld.d	r6,r11++
80004ce0:	b3 26       	st.d	r9++,r6
80004ce2:	b7 07       	ld.d	r6,r11++
80004ce4:	b3 26       	st.d	r9++,r6
80004ce6:	b7 07       	ld.d	r6,r11++
80004ce8:	b3 26       	st.d	r9++,r6
80004cea:	22 0a       	sub	r10,32
80004cec:	cf 74       	brge	80004cda <memcpy+0x92>
80004cee:	2f 0a       	sub	r10,-16
80004cf0:	c0 65       	brlt	80004cfc <memcpy+0xb4>
80004cf2:	b7 07       	ld.d	r6,r11++
80004cf4:	b3 26       	st.d	r9++,r6
80004cf6:	b7 07       	ld.d	r6,r11++
80004cf8:	b3 26       	st.d	r9++,r6
80004cfa:	21 0a       	sub	r10,16
80004cfc:	5c 3a       	neg	r10
80004cfe:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004d02:	d7 03       	nop
80004d04:	d7 03       	nop
80004d06:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004d0a:	f3 66 00 0e 	st.b	r9[14],r6
80004d0e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004d12:	f3 66 00 0d 	st.b	r9[13],r6
80004d16:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004d1a:	f3 66 00 0c 	st.b	r9[12],r6
80004d1e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004d22:	f3 66 00 0b 	st.b	r9[11],r6
80004d26:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004d2a:	f3 66 00 0a 	st.b	r9[10],r6
80004d2e:	f7 36 00 09 	ld.ub	r6,r11[9]
80004d32:	f3 66 00 09 	st.b	r9[9],r6
80004d36:	f7 36 00 08 	ld.ub	r6,r11[8]
80004d3a:	f3 66 00 08 	st.b	r9[8],r6
80004d3e:	f7 36 00 07 	ld.ub	r6,r11[7]
80004d42:	f3 66 00 07 	st.b	r9[7],r6
80004d46:	f7 36 00 06 	ld.ub	r6,r11[6]
80004d4a:	f3 66 00 06 	st.b	r9[6],r6
80004d4e:	f7 36 00 05 	ld.ub	r6,r11[5]
80004d52:	f3 66 00 05 	st.b	r9[5],r6
80004d56:	f7 36 00 04 	ld.ub	r6,r11[4]
80004d5a:	f3 66 00 04 	st.b	r9[4],r6
80004d5e:	f7 36 00 03 	ld.ub	r6,r11[3]
80004d62:	f3 66 00 03 	st.b	r9[3],r6
80004d66:	f7 36 00 02 	ld.ub	r6,r11[2]
80004d6a:	f3 66 00 02 	st.b	r9[2],r6
80004d6e:	f7 36 00 01 	ld.ub	r6,r11[1]
80004d72:	f3 66 00 01 	st.b	r9[1],r6
80004d76:	f7 36 00 00 	ld.ub	r6,r11[0]
80004d7a:	f3 66 00 00 	st.b	r9[0],r6
80004d7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004d82:	20 1a       	sub	r10,1
80004d84:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004d88:	f8 0a 0b 09 	st.b	r12[r10],r9
80004d8c:	cf b1       	brne	80004d82 <memcpy+0x13a>
80004d8e:	5e fc       	retal	r12

80004d90 <memset>:
80004d90:	18 98       	mov	r8,r12
80004d92:	c0 38       	rjmp	80004d98 <memset+0x8>
80004d94:	10 cb       	st.b	r8++,r11
80004d96:	20 1a       	sub	r10,1
80004d98:	58 0a       	cp.w	r10,0
80004d9a:	cf d1       	brne	80004d94 <memset+0x4>
80004d9c:	5e fc       	retal	r12

Disassembly of section .exception:

80004e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80004e00:	c0 08       	rjmp	80004e00 <_evba>
	...

80004e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80004e04:	c0 08       	rjmp	80004e04 <_handle_TLB_Multiple_Hit>
	...

80004e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80004e08:	c0 08       	rjmp	80004e08 <_handle_Bus_Error_Data_Fetch>
	...

80004e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80004e0c:	c0 08       	rjmp	80004e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80004e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80004e10:	c0 08       	rjmp	80004e10 <_handle_NMI>
	...

80004e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80004e14:	c0 08       	rjmp	80004e14 <_handle_Instruction_Address>
	...

80004e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80004e18:	c0 08       	rjmp	80004e18 <_handle_ITLB_Protection>
	...

80004e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80004e1c:	c0 08       	rjmp	80004e1c <_handle_Breakpoint>
	...

80004e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80004e20:	c0 08       	rjmp	80004e20 <_handle_Illegal_Opcode>
	...

80004e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80004e24:	c0 08       	rjmp	80004e24 <_handle_Unimplemented_Instruction>
	...

80004e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80004e28:	c0 08       	rjmp	80004e28 <_handle_Privilege_Violation>
	...

80004e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80004e2c:	c0 08       	rjmp	80004e2c <_handle_Floating_Point>
	...

80004e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80004e30:	c0 08       	rjmp	80004e30 <_handle_Coprocessor_Absent>
	...

80004e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80004e34:	c0 08       	rjmp	80004e34 <_handle_Data_Address_Read>
	...

80004e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80004e38:	c0 08       	rjmp	80004e38 <_handle_Data_Address_Write>
	...

80004e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80004e3c:	c0 08       	rjmp	80004e3c <_handle_DTLB_Protection_Read>
	...

80004e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80004e40:	c0 08       	rjmp	80004e40 <_handle_DTLB_Protection_Write>
	...

80004e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80004e44:	c0 08       	rjmp	80004e44 <_handle_DTLB_Modified>
	...

80004e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80004e50:	c0 08       	rjmp	80004e50 <_handle_ITLB_Miss>
	...

80004e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80004e60:	c0 08       	rjmp	80004e60 <_handle_DTLB_Miss_Read>
	...

80004e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80004e70:	c0 08       	rjmp	80004e70 <_handle_DTLB_Miss_Write>
	...

80004f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80004f00:	c0 08       	rjmp	80004f00 <_handle_Supervisor_Call>
80004f02:	d7 03       	nop

80004f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004f04:	30 0c       	mov	r12,0
80004f06:	fe b0 f5 ed 	rcall	80003ae0 <_get_interrupt_handler>
80004f0a:	58 0c       	cp.w	r12,0
80004f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80004f10:	d6 03       	rete

80004f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004f12:	30 1c       	mov	r12,1
80004f14:	fe b0 f5 e6 	rcall	80003ae0 <_get_interrupt_handler>
80004f18:	58 0c       	cp.w	r12,0
80004f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80004f1e:	d6 03       	rete

80004f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004f20:	30 2c       	mov	r12,2
80004f22:	fe b0 f5 df 	rcall	80003ae0 <_get_interrupt_handler>
80004f26:	58 0c       	cp.w	r12,0
80004f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80004f2c:	d6 03       	rete

80004f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004f2e:	30 3c       	mov	r12,3
80004f30:	fe b0 f5 d8 	rcall	80003ae0 <_get_interrupt_handler>
80004f34:	58 0c       	cp.w	r12,0
80004f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80004f3a:	d6 03       	rete
80004f3c:	d7 03       	nop
80004f3e:	d7 03       	nop
80004f40:	d7 03       	nop
80004f42:	d7 03       	nop
80004f44:	d7 03       	nop
80004f46:	d7 03       	nop
80004f48:	d7 03       	nop
80004f4a:	d7 03       	nop
80004f4c:	d7 03       	nop
80004f4e:	d7 03       	nop
80004f50:	d7 03       	nop
80004f52:	d7 03       	nop
80004f54:	d7 03       	nop
80004f56:	d7 03       	nop
80004f58:	d7 03       	nop
80004f5a:	d7 03       	nop
80004f5c:	d7 03       	nop
80004f5e:	d7 03       	nop
80004f60:	d7 03       	nop
80004f62:	d7 03       	nop
80004f64:	d7 03       	nop
80004f66:	d7 03       	nop
80004f68:	d7 03       	nop
80004f6a:	d7 03       	nop
80004f6c:	d7 03       	nop
80004f6e:	d7 03       	nop
80004f70:	d7 03       	nop
80004f72:	d7 03       	nop
80004f74:	d7 03       	nop
80004f76:	d7 03       	nop
80004f78:	d7 03       	nop
80004f7a:	d7 03       	nop
80004f7c:	d7 03       	nop
80004f7e:	d7 03       	nop
80004f80:	d7 03       	nop
80004f82:	d7 03       	nop
80004f84:	d7 03       	nop
80004f86:	d7 03       	nop
80004f88:	d7 03       	nop
80004f8a:	d7 03       	nop
80004f8c:	d7 03       	nop
80004f8e:	d7 03       	nop
80004f90:	d7 03       	nop
80004f92:	d7 03       	nop
80004f94:	d7 03       	nop
80004f96:	d7 03       	nop
80004f98:	d7 03       	nop
80004f9a:	d7 03       	nop
80004f9c:	d7 03       	nop
80004f9e:	d7 03       	nop
80004fa0:	d7 03       	nop
80004fa2:	d7 03       	nop
80004fa4:	d7 03       	nop
80004fa6:	d7 03       	nop
80004fa8:	d7 03       	nop
80004faa:	d7 03       	nop
80004fac:	d7 03       	nop
80004fae:	d7 03       	nop
80004fb0:	d7 03       	nop
80004fb2:	d7 03       	nop
80004fb4:	d7 03       	nop
80004fb6:	d7 03       	nop
80004fb8:	d7 03       	nop
80004fba:	d7 03       	nop
80004fbc:	d7 03       	nop
80004fbe:	d7 03       	nop
80004fc0:	d7 03       	nop
80004fc2:	d7 03       	nop
80004fc4:	d7 03       	nop
80004fc6:	d7 03       	nop
80004fc8:	d7 03       	nop
80004fca:	d7 03       	nop
80004fcc:	d7 03       	nop
80004fce:	d7 03       	nop
80004fd0:	d7 03       	nop
80004fd2:	d7 03       	nop
80004fd4:	d7 03       	nop
80004fd6:	d7 03       	nop
80004fd8:	d7 03       	nop
80004fda:	d7 03       	nop
80004fdc:	d7 03       	nop
80004fde:	d7 03       	nop
80004fe0:	d7 03       	nop
80004fe2:	d7 03       	nop
80004fe4:	d7 03       	nop
80004fe6:	d7 03       	nop
80004fe8:	d7 03       	nop
80004fea:	d7 03       	nop
80004fec:	d7 03       	nop
80004fee:	d7 03       	nop
80004ff0:	d7 03       	nop
80004ff2:	d7 03       	nop
80004ff4:	d7 03       	nop
80004ff6:	d7 03       	nop
80004ff8:	d7 03       	nop
80004ffa:	d7 03       	nop
80004ffc:	d7 03       	nop
80004ffe:	d7 03       	nop
